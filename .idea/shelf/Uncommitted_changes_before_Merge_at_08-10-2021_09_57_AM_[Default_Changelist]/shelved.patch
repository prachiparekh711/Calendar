Index: app/src/main/res/layout/activity_main.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<layout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\">\r\n\r\n    <data>\r\n\r\n    </data>\r\n\r\n    <androidx.coordinatorlayout.widget.CoordinatorLayout\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\"\r\n        android:background=\"@color/white\"\r\n        tools:context=\".Activity.MainActivity\">\r\n\r\n        <RelativeLayout\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"match_parent\">\r\n\r\n            <com.shrikanthravi.customnavigationdrawer2.widget.SNavigationDrawer\r\n                android:id=\"@+id/navigationDrawer\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"match_parent\"\r\n                android:layout_marginTop=\"@dimen/_5sdp\">\r\n\r\n                <FrameLayout\r\n                    android:id=\"@+id/container\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"match_parent\" />\r\n\r\n            </com.shrikanthravi.customnavigationdrawer2.widget.SNavigationDrawer>\r\n\r\n            <RelativeLayout\r\n                android:id=\"@+id/topRL\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_marginHorizontal=\"@dimen/_10sdp\"\r\n                android:layout_marginVertical=\"@dimen/_5sdp\"\r\n                android:layout_marginStart=\"@dimen/_40sdp\"\r\n                android:layout_marginLeft=\"@dimen/_40sdp\"\r\n                android:orientation=\"horizontal\">\r\n\r\n                <TextView\r\n                    android:id=\"@+id/dateTitleTV\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_centerVertical=\"true\"\r\n                    android:layout_toLeftOf=\"@id/today\"\r\n                    android:fontFamily=\"@font/plusjakarta\"\r\n                    android:text=\"@string/title_date\"\r\n                    android:textColor=\"@color/black\"\r\n                    android:textSize=\"@dimen/_17sdp\" />\r\n\r\n                <ImageView\r\n                    android:id=\"@+id/today\"\r\n                    android:layout_width=\"@dimen/_30sdp\"\r\n                    android:layout_height=\"@dimen/_30sdp\"\r\n                    android:layout_alignParentRight=\"true\"\r\n                    android:layout_centerVertical=\"true\"\r\n                    android:layout_marginRight=\"@dimen/_7sdp\"\r\n                    android:padding=\"@dimen/_4sdp\"\r\n                    android:src=\"@drawable/ic_event\"\r\n                    app:tint=\"@color/black\" />\r\n\r\n            </RelativeLayout>\r\n\r\n            <RelativeLayout\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_alignParentBottom=\"true\"\r\n                android:layout_centerHorizontal=\"true\"\r\n                android:layout_marginBottom=\"@dimen/_26sdp\">\r\n\r\n                <ImageView\r\n                    android:id=\"@+id/fab\"\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_centerHorizontal=\"true\"\r\n                    android:layout_gravity=\"center\"\r\n                    android:src=\"@drawable/ic_add_items\" />\r\n\r\n            </RelativeLayout>\r\n\r\n            <View\r\n                android:id=\"@+id/hideBack\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"match_parent\"\r\n                android:background=\"#6C000000\"\r\n                android:visibility=\"gone\" />\r\n\r\n        </RelativeLayout>\r\n\r\n        <LinearLayout\r\n            android:id=\"@+id/llBottom\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            app:behavior_hideable=\"true\"\r\n            app:behavior_peekHeight=\"0dp\"\r\n            app:elevation=\"@dimen/_3sdp\"\r\n            app:layout_behavior=\"com.google.android.material.bottomsheet.BottomSheetBehavior\">\r\n\r\n            <include\r\n                android:id=\"@+id/llMain\"\r\n                layout=\"@layout/select_calendar_account\" />\r\n\r\n        </LinearLayout>\r\n\r\n        <LinearLayout\r\n            android:id=\"@+id/llBottomSync\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:background=\"@drawable/bottom_back\"\r\n            app:behavior_hideable=\"true\"\r\n            app:behavior_peekHeight=\"0dp\"\r\n            app:elevation=\"@dimen/_3sdp\"\r\n            app:layout_behavior=\"com.google.android.material.bottomsheet.BottomSheetBehavior\">\r\n\r\n            <RelativeLayout\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:orientation=\"vertical\"\r\n                android:paddingTop=\"@dimen/activity_margin\"\r\n                android:paddingBottom=\"@dimen/_10sdp\">\r\n\r\n                <View\r\n                    android:layout_width=\"@dimen/_40sdp\"\r\n                    android:layout_height=\"@dimen/_2sdp\"\r\n                    android:layout_alignParentTop=\"true\"\r\n                    android:layout_centerHorizontal=\"true\"\r\n                    android:layout_gravity=\"center_horizontal\"\r\n                    android:background=\"@color/grey_view\" />\r\n\r\n                <TextView\r\n                    android:id=\"@+id/t1\"\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_centerHorizontal=\"true\"\r\n                    android:layout_marginTop=\"@dimen/_15sdp\"\r\n                    android:fontFamily=\"@font/plusjakarta\"\r\n                    android:text=\"@string/sync_ur\"\r\n                    android:textColor=\"@color/black\"\r\n                    android:textSize=\"@dimen/_15sdp\" />\r\n\r\n\r\n                <LinearLayout\r\n                    android:id=\"@+id/llBottom1\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_below=\"@id/t1\"\r\n                    android:layout_marginHorizontal=\"@dimen/_20sdp\"\r\n                    android:layout_marginVertical=\"@dimen/_15sdp\"\r\n                    android:orientation=\"horizontal\">\r\n\r\n                    <TextView\r\n                        android:id=\"@+id/dialog_not_now\"\r\n                        android:layout_width=\"0dp\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_marginRight=\"@dimen/_10sdp\"\r\n                        android:layout_weight=\"1\"\r\n                        android:background=\"@drawable/ic_cancel_bg\"\r\n                        android:clickable=\"true\"\r\n                        android:gravity=\"center\"\r\n                        android:paddingHorizontal=\"16dp\"\r\n                        android:text=\"Not now\"\r\n                        android:textColor=\"@color/grey\"\r\n                        android:textSize=\"16sp\"\r\n                        android:textStyle=\"bold\"\r\n                        android:visibility=\"visible\" />\r\n\r\n                    <TextView\r\n                        android:id=\"@+id/dialog_sync\"\r\n                        android:layout_width=\"0dp\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_marginLeft=\"@dimen/_10sdp\"\r\n                        android:layout_weight=\"1\"\r\n                        android:background=\"@drawable/ic_ok_bg\"\r\n                        android:clickable=\"true\"\r\n                        android:gravity=\"center\"\r\n                        android:paddingHorizontal=\"16dp\"\r\n                        android:text=\"Sync calendar\"\r\n                        android:textColor=\"@color/white\"\r\n                        android:textSize=\"16sp\"\r\n                        android:textStyle=\"bold\" />\r\n\r\n                </LinearLayout>\r\n\r\n            </RelativeLayout>\r\n\r\n        </LinearLayout>\r\n\r\n    </androidx.coordinatorlayout.widget.CoordinatorLayout>\r\n\r\n</layout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/activity_main.xml	(revision bb4a732c06b2d4ae313f7cb7d6b22f16dee5bf89)
+++ app/src/main/res/layout/activity_main.xml	(date 1633666352642)
@@ -43,9 +43,10 @@
                 <TextView
                     android:id="@+id/dateTitleTV"
                     android:layout_width="match_parent"
-                    android:layout_height="wrap_content"
+                    android:layout_height="@dimen/_30sdp"
                     android:layout_centerVertical="true"
                     android:layout_toLeftOf="@id/today"
+                    android:gravity="center_vertical"
                     android:fontFamily="@font/plusjakarta"
                     android:text="@string/title_date"
                     android:textColor="@color/black"
Index: app/src/main/java/com/daily/events/calender/Activity/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.daily.events.calender.Activity\r\n\r\nimport android.app.Activity\r\nimport android.appwidget.AppWidgetManager\r\nimport android.content.*\r\nimport android.database.ContentObserver\r\nimport android.os.*\r\nimport android.provider.CalendarContract\r\nimport android.provider.ContactsContract\r\nimport android.text.TextUtils\r\nimport android.util.Log\r\nimport android.view.View\r\nimport android.widget.LinearLayout\r\nimport android.widget.RelativeLayout\r\nimport android.widget.Toast\r\nimport androidx.appcompat.widget.SwitchCompat\r\nimport androidx.databinding.DataBindingUtil\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.fragment.app.FragmentManager\r\nimport androidx.loader.content.CursorLoader\r\nimport androidx.localbroadcastmanager.content.LocalBroadcastManager\r\nimport com.daily.events.calender.Extensions.*\r\nimport com.daily.events.calender.Fragment.*\r\nimport com.daily.events.calender.Fragment.Home.HomeFragment\r\nimport com.daily.events.calender.Model.Event\r\nimport com.daily.events.calender.Model.EventType\r\nimport com.daily.events.calender.R\r\nimport com.daily.events.calender.SharedPrefrences\r\nimport com.daily.events.calender.databinding.ActivityMainBinding\r\nimport com.daily.events.calender.dialogs.SetRemindersDialog\r\nimport com.daily.events.calender.helpers.*\r\nimport com.daily.events.calender.helpers.Formatter\r\nimport com.google.android.material.bottomsheet.BottomSheetBehavior\r\nimport com.google.android.material.bottomsheet.BottomSheetBehavior.BottomSheetCallback\r\nimport com.shrikanthravi.customnavigationdrawer2.widget.SNavigationDrawer\r\nimport com.simplemobiletools.commons.dialogs.RadioGroupDialog\r\nimport com.simplemobiletools.commons.extensions.*\r\nimport com.simplemobiletools.commons.helpers.*\r\nimport com.simplemobiletools.commons.models.RadioItem\r\nimport com.simplemobiletools.commons.models.SimpleContact\r\nimport kotlinx.android.synthetic.main.activity_main.*\r\nimport kotlinx.android.synthetic.main.calendar_item_account.view.*\r\nimport kotlinx.android.synthetic.main.calendar_item_calendar.view.*\r\nimport kotlinx.android.synthetic.main.dialog_select_calendars.view.*\r\nimport org.joda.time.DateTime\r\nimport org.joda.time.DateTimeZone\r\nimport pub.devrel.easypermissions.AppSettingsDialog.DEFAULT_SETTINGS_REQ_CODE\r\nimport pub.devrel.easypermissions.EasyPermissions\r\nimport java.text.SimpleDateFormat\r\nimport java.util.*\r\n\r\n\r\nclass MainActivity : SimpleActivity() {\r\n    //    var fragmentClass: Intrinsics.Kotlin<*>? = null\r\n    private var selectAccountReceiver: SelectAccountReceiver? = null\r\n    var IsSet = false\r\n    var homeFragment: HomeFragment? = null\r\n    var eventFragment: EventFragment? = null\r\n    var notificationFragment: NotificationFragment? = null\r\n    var settingFragment: SettingFragment? = null\r\n\r\n    companion object {\r\n\r\n        var fragment: Fragment? = null\r\n        val CALDAV_REFRESH_DELAY = 3000L\r\n        val calDAVRefreshHandler = Handler()\r\n        var calDAVRefreshCallback: (() -> Unit)? = null\r\n\r\n        lateinit var selectAccountBehaviour: BottomSheetBehavior<LinearLayout>\r\n        lateinit var syncCalendarBehaviour: BottomSheetBehavior<LinearLayout>\r\n        var mainBinding: ActivityMainBinding? = null\r\n\r\n        lateinit var activity: Activity\r\n\r\n        fun getSyncedCalDAVCalendars() =\r\n            activity.calDAVHelper.getCalDAVCalendars(activity.config.caldavSyncedCalendarIds, false)\r\n\r\n        fun syncCalDAVCalendars(callback: () -> Unit) {\r\n            calDAVRefreshCallback = callback\r\n            ensureBackgroundThread {\r\n                val uri = CalendarContract.Calendars.CONTENT_URI\r\n                activity.contentResolver.unregisterContentObserver(calDAVSyncObserver)\r\n                activity.contentResolver.registerContentObserver(uri, false, calDAVSyncObserver)\r\n                activity.refreshCalDAVCalendars(activity.config.caldavSyncedCalendarIds, true)\r\n            }\r\n        }\r\n\r\n        private val calDAVSyncObserver = object : ContentObserver(Handler()) {\r\n            override fun onChange(selfChange: Boolean) {\r\n                super.onChange(selfChange)\r\n                if (!selfChange) {\r\n                    calDAVRefreshHandler.removeCallbacksAndMessages(null)\r\n                    calDAVRefreshHandler.postDelayed({\r\n                        ensureBackgroundThread {\r\n                            unregisterObserver()\r\n                            calDAVRefreshCallback?.invoke()\r\n                            calDAVRefreshCallback = null\r\n                        }\r\n                    }, CALDAV_REFRESH_DELAY)\r\n                }\r\n            }\r\n        }\r\n\r\n        fun unregisterObserver() {\r\n            activity.contentResolver.unregisterContentObserver(calDAVSyncObserver)\r\n        }\r\n\r\n        private fun updateDefaultEventTypeText() {\r\n            if (activity.config.defaultEventTypeId == -1L) {\r\n\r\n            } else {\r\n                ensureBackgroundThread {\r\n                    val eventType =\r\n                        activity.eventTypesDB.getEventTypeWithId(activity.config.defaultEventTypeId)\r\n                    if (eventType != null) {\r\n                        activity.config.lastUsedCaldavCalendarId = eventType.caldavCalendarId\r\n                    } else {\r\n                        activity.config.defaultEventTypeId = -1\r\n                        updateDefaultEventTypeText()\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        fun getMyContactsCursor(favoritesOnly: Boolean, withPhoneNumbersOnly: Boolean) = try {\r\n            val getFavoritesOnly = if (favoritesOnly) \"1\" else \"0\"\r\n            val getWithPhoneNumbersOnly = if (withPhoneNumbersOnly) \"1\" else \"0\"\r\n            val args = arrayOf(getFavoritesOnly, getWithPhoneNumbersOnly)\r\n            CursorLoader(\r\n                activity,\r\n                MyContactsContentProvider.CONTACTS_CONTENT_URI,\r\n                null,\r\n                null,\r\n                args,\r\n                null\r\n            )\r\n        } catch (e: Exception) {\r\n            null\r\n        }\r\n\r\n        fun updateWidgets() {\r\n            val widgetIDs = AppWidgetManager.getInstance(activity)?.getAppWidgetIds(\r\n                ComponentName(\r\n                    activity, MyWidgetMonthlyProvider::class.java\r\n                )\r\n            )\r\n                ?: return\r\n            if (widgetIDs.isNotEmpty()) {\r\n                Intent(activity, MyWidgetMonthlyProvider::class.java).apply {\r\n                    action = AppWidgetManager.ACTION_APPWIDGET_UPDATE\r\n                    putExtra(AppWidgetManager.EXTRA_APPWIDGET_IDS, widgetIDs)\r\n                    activity.sendBroadcast(this)\r\n                }\r\n            }\r\n\r\n            updateListWidget()\r\n            updateDateWidget()\r\n        }\r\n\r\n        fun updateListWidget() {\r\n            val widgetIDs = AppWidgetManager.getInstance(activity)\r\n                ?.getAppWidgetIds(ComponentName(activity, MyWidgetListProvider::class.java))\r\n                ?: return\r\n            if (widgetIDs.isNotEmpty()) {\r\n                Intent(activity, MyWidgetListProvider::class.java).apply {\r\n                    action = AppWidgetManager.ACTION_APPWIDGET_UPDATE\r\n                    putExtra(AppWidgetManager.EXTRA_APPWIDGET_IDS, widgetIDs)\r\n                    activity.sendBroadcast(this)\r\n                }\r\n            }\r\n        }\r\n\r\n        fun updateDateWidget() {\r\n            val widgetIDs = AppWidgetManager.getInstance(activity)\r\n                ?.getAppWidgetIds(ComponentName(activity, MyWidgetDateProvider::class.java))\r\n                ?: return\r\n            if (widgetIDs.isNotEmpty()) {\r\n                Intent(activity, MyWidgetDateProvider::class.java).apply {\r\n                    action = AppWidgetManager.ACTION_APPWIDGET_UPDATE\r\n                    putExtra(AppWidgetManager.EXTRA_APPWIDGET_IDS, widgetIDs)\r\n                    activity.sendBroadcast(this)\r\n                }\r\n            }\r\n        }\r\n\r\n        private fun addPrivateEvents(\r\n            birthdays: Boolean,\r\n            contacts: ArrayList<SimpleContact>,\r\n            reminders: ArrayList<Int>,\r\n            callback: (eventsFound: Int, eventsAdded: Int) -> Unit\r\n        ) {\r\n            var eventsAdded = 0\r\n            var eventsFound = 0\r\n            if (contacts.isEmpty()) {\r\n                callback(0, 0)\r\n                return\r\n            }\r\n\r\n            try {\r\n                val eventTypeId =\r\n                    if (birthdays) activity.eventsHelper.getBirthdaysEventTypeId() else activity.eventsHelper.getAnniversariesEventTypeId()\r\n                val source = if (birthdays) SOURCE_CONTACT_BIRTHDAY else SOURCE_CONTACT_ANNIVERSARY\r\n\r\n                val existingEvents =\r\n                    if (birthdays) activity.eventsDB.getBirthdays() else activity.eventsDB.getAnniversaries()\r\n                val importIDs = HashMap<String, Long>()\r\n                existingEvents.forEach {\r\n                    importIDs[it.importId] = it.startTS\r\n                }\r\n\r\n                contacts.forEach { contact ->\r\n                    val events = if (birthdays) contact.birthdays else contact.anniversaries\r\n                    events.forEach { birthdayAnniversary ->\r\n                        // private contacts are created in Simple Contacts Pro, so we can guarantee that they exist only in these 2 formats\r\n                        val format = if (birthdayAnniversary.startsWith(\"--\")) {\r\n                            \"--MM-dd\"\r\n                        } else {\r\n                            \"yyyy-MM-dd\"\r\n                        }\r\n\r\n                        val formatter = SimpleDateFormat(format, Locale.getDefault())\r\n                        val date = formatter.parse(birthdayAnniversary)\r\n                        if (date.year < 70) {\r\n                            date.year = 70\r\n                        }\r\n\r\n                        val timestamp = date.time / 1000L\r\n                        val lastUpdated = System.currentTimeMillis()\r\n                        val event = Event(\r\n                            null,\r\n                            timestamp,\r\n                            timestamp,\r\n                            contact.name,\r\n                            reminder1Minutes = reminders[0],\r\n                            reminder2Minutes = reminders[1],\r\n                            reminder3Minutes = reminders[2],\r\n                            importId = contact.contactId.toString(),\r\n                            timeZone = DateTimeZone.getDefault().id,\r\n                            flags = FLAG_ALL_DAY,\r\n                            repeatInterval = YEAR,\r\n                            repeatRule = REPEAT_SAME_DAY,\r\n                            eventType = eventTypeId,\r\n                            source = source,\r\n                            lastUpdated = lastUpdated\r\n                        )\r\n\r\n                        val importIDsToDelete = ArrayList<String>()\r\n                        for ((key, value) in importIDs) {\r\n                            if (key == contact.contactId.toString() && value != timestamp) {\r\n                                val deleted =\r\n                                    activity.eventsDB.deleteBirthdayAnniversary(source, key)\r\n                                if (deleted == 1) {\r\n                                    importIDsToDelete.add(key)\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        importIDsToDelete.forEach {\r\n                            importIDs.remove(it)\r\n                        }\r\n\r\n                        eventsFound++\r\n                        if (!importIDs.containsKey(contact.contactId.toString())) {\r\n                            activity.eventsHelper.insertEvent(event, false, false) {\r\n                                eventsAdded++\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            } catch (e: Exception) {\r\n                Log.e(\"LLL_Error: \", \"Add Contact ${e.localizedMessage}\")\r\n            }\r\n\r\n            callback(eventsFound, eventsAdded)\r\n        }\r\n\r\n        private fun addContactEvents(\r\n            birthdays: Boolean,\r\n            reminders: ArrayList<Int>,\r\n            initEventsFound: Int,\r\n            initEventsAdded: Int,\r\n            callback: (Int) -> Unit\r\n        ) {\r\n            var eventsFound = initEventsFound\r\n            var eventsAdded = initEventsAdded\r\n            val uri = ContactsContract.Data.CONTENT_URI\r\n            val projection = arrayOf(\r\n                ContactsContract.Contacts.DISPLAY_NAME,\r\n                ContactsContract.CommonDataKinds.Event.CONTACT_ID,\r\n                ContactsContract.CommonDataKinds.Event.CONTACT_LAST_UPDATED_TIMESTAMP,\r\n                ContactsContract.CommonDataKinds.Event.START_DATE\r\n            )\r\n\r\n            val selection =\r\n                \"${ContactsContract.Data.MIMETYPE} = ? AND ${ContactsContract.CommonDataKinds.Event.TYPE} = ?\"\r\n            val type =\r\n                if (birthdays) ContactsContract.CommonDataKinds.Event.TYPE_BIRTHDAY else ContactsContract.CommonDataKinds.Event.TYPE_ANNIVERSARY\r\n            val selectionArgs =\r\n                arrayOf(ContactsContract.CommonDataKinds.Event.CONTENT_ITEM_TYPE, type.toString())\r\n\r\n            val dateFormats = getDateFormats()\r\n            val yearDateFormats = getDateFormatsWithYear()\r\n            val existingEvents =\r\n                if (birthdays) activity.eventsDB.getBirthdays() else activity.eventsDB.getAnniversaries()\r\n            val importIDs = HashMap<String, Long>()\r\n            existingEvents.forEach {\r\n                importIDs[it.importId] = it.startTS\r\n            }\r\n\r\n            val eventTypeId =\r\n                if (birthdays) activity.eventsHelper.getBirthdaysEventTypeId() else activity.eventsHelper.getAnniversariesEventTypeId()\r\n            val source = if (birthdays) SOURCE_CONTACT_BIRTHDAY else SOURCE_CONTACT_ANNIVERSARY\r\n\r\n            activity.queryCursor(\r\n                uri,\r\n                projection,\r\n                selection,\r\n                selectionArgs,\r\n                showErrors = true\r\n            ) { cursor ->\r\n                val contactId =\r\n                    cursor.getIntValue(ContactsContract.CommonDataKinds.Event.CONTACT_ID).toString()\r\n                val name = cursor.getStringValue(ContactsContract.Contacts.DISPLAY_NAME)\r\n                val startDate =\r\n                    cursor.getStringValue(ContactsContract.CommonDataKinds.Event.START_DATE)\r\n\r\n                for (format in dateFormats) {\r\n                    try {\r\n                        val formatter = SimpleDateFormat(format, Locale.getDefault())\r\n                        val date = formatter.parse(startDate)\r\n                        val flags = if (format in yearDateFormats) {\r\n                            FLAG_ALL_DAY\r\n                        } else {\r\n                            FLAG_ALL_DAY or FLAG_MISSING_YEAR\r\n                        }\r\n\r\n                        val timestamp = date.time / 1000L\r\n                        val lastUpdated =\r\n                            cursor.getLongValue(ContactsContract.CommonDataKinds.Event.CONTACT_LAST_UPDATED_TIMESTAMP)\r\n                        val event = Event(\r\n                            null,\r\n                            timestamp,\r\n                            timestamp,\r\n                            name,\r\n                            reminder1Minutes = reminders[0],\r\n                            reminder2Minutes = reminders[1],\r\n                            reminder3Minutes = reminders[2],\r\n                            importId = contactId,\r\n                            timeZone = DateTimeZone.getDefault().id,\r\n                            flags = flags,\r\n                            repeatInterval = YEAR,\r\n                            repeatRule = REPEAT_SAME_DAY,\r\n                            eventType = eventTypeId,\r\n                            source = source,\r\n                            lastUpdated = lastUpdated\r\n                        )\r\n\r\n                        val importIDsToDelete = ArrayList<String>()\r\n                        for ((key, value) in importIDs) {\r\n                            if (key == contactId && value != timestamp) {\r\n                                val deleted =\r\n                                    activity.eventsDB.deleteBirthdayAnniversary(source, key)\r\n                                if (deleted == 1) {\r\n                                    importIDsToDelete.add(key)\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        importIDsToDelete.forEach {\r\n                            importIDs.remove(it)\r\n                        }\r\n\r\n                        eventsFound++\r\n                        if (!importIDs.containsKey(contactId)) {\r\n                            activity.eventsHelper.insertEvent(event, false, false) {\r\n                                eventsAdded++\r\n                            }\r\n                        }\r\n                        break\r\n                    } catch (e: Exception) {\r\n                    }\r\n                }\r\n            }\r\n\r\n            activity.runOnUiThread {\r\n                callback(if (eventsAdded == 0 && eventsFound > 0) -1 else eventsAdded)\r\n            }\r\n        }\r\n\r\n        private fun setupQuickFilter(isAdded: Boolean) {\r\n            activity.eventsHelper.getEventTypes(activity, false) {\r\n                activity.config.displayEventTypes.plus(\r\n                    activity.eventsHelper.getBirthdaysEventTypeId().toString()\r\n                )\r\n                updateWidgets()\r\n            }\r\n        }\r\n\r\n        private fun setupQuicAnniversaryFilter() {\r\n            activity.eventsHelper.getEventTypes(activity, false) {\r\n                activity.config.displayEventTypes.plus(\r\n                    activity.eventsHelper.getAnniversariesEventTypeId().toString()\r\n                )\r\n                updateWidgets()\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    override fun onPostCreate(savedInstanceState: Bundle?) {\r\n        super.onPostCreate(savedInstanceState)\r\n        val currentDate = SimpleDateFormat(\"d\", Locale.getDefault()).format(Date())\r\n\r\n//        for (i in 1..31) {\r\n//            if (i == currentDate.toInt()) {\r\n//                packageManager.setComponentEnabledSetting(\r\n//                    ComponentName(\r\n//                        applicationContext,\r\n//                        \"com.daily.events.calender.LauncherAlias\" + i\r\n//                    ),\r\n//                    PackageManager.COMPONENT_ENABLED_STATE_ENABLED, PackageManager.DONT_KILL_APP\r\n//                )\r\n//            } else {\r\n//                packageManager.setComponentEnabledSetting(\r\n//                    ComponentName(\r\n//                        applicationContext,\r\n//                        \"com.daily.events.calender.LauncherAlias\" + i\r\n//                    ),\r\n//                    PackageManager.COMPONENT_ENABLED_STATE_DISABLED, PackageManager.DONT_KILL_APP\r\n//                )\r\n//            }\r\n//        }\r\n    }\r\n\r\n    private var showCalDAVRefreshToast = false\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n        mainBinding =\r\n            DataBindingUtil.setContentView(this@MainActivity, R.layout.activity_main)\r\n\r\n        supportActionBar?.hide()\r\n\r\n        activity = this@MainActivity\r\n        val calendar = Calendar.getInstance()\r\n//        AlarmReceiver().setRepeatAlarm(applicationContext, 1001, calendar)\r\n\r\n        if (config.caldavSync) {\r\n            refreshCalDAVCalendars(false)\r\n        }\r\n\r\n        selectAccountBehaviour =\r\n            BottomSheetBehavior.from(llBottom)\r\n        syncCalendarBehaviour =\r\n            BottomSheetBehavior.from(llBottomSync)\r\n\r\n        selectAccountBehaviour.addBottomSheetCallback(object : BottomSheetCallback() {\r\n            override fun onStateChanged(bottomSheet: View, newState: Int) {\r\n                if (newState == BottomSheetBehavior.STATE_COLLAPSED) {\r\n                    mainBinding?.hideBack?.beGone()\r\n                }\r\n            }\r\n\r\n            override fun onSlide(bottomSheet: View, slideOffset: Float) {\r\n\r\n            }\r\n        })\r\n\r\n        syncCalendarBehaviour.addBottomSheetCallback(object : BottomSheetCallback() {\r\n            override fun onStateChanged(bottomSheet: View, newState: Int) {\r\n                if (newState == BottomSheetBehavior.STATE_EXPANDED) {\r\n                    mainBinding?.hideBack?.beVisible()\r\n                }\r\n            }\r\n\r\n            override fun onSlide(bottomSheet: View, slideOffset: Float) {\r\n\r\n            }\r\n        })\r\n\r\n        selectAccountReceiver = SelectAccountReceiver()\r\n\r\n        LocalBroadcastManager.getInstance(this@MainActivity).registerReceiver(\r\n            selectAccountReceiver!!,\r\n            IntentFilter(\"OPEN_ACCOUNT_SYNC\")\r\n        )\r\n\r\n        LocalBroadcastManager.getInstance(this@MainActivity).registerReceiver(\r\n            holidayReceiver,\r\n            IntentFilter(\"ADD_HOLIDAYS\")\r\n        )\r\n\r\n        LocalBroadcastManager.getInstance(this@MainActivity).registerReceiver(\r\n            birthdayReceiver,\r\n            IntentFilter(\"ADD_BIRTHDAY\")\r\n        )\r\n\r\n        LocalBroadcastManager.getInstance(this@MainActivity).registerReceiver(\r\n            anniversaryReceiver,\r\n            IntentFilter(\"ADD_ANNIVERSARY\")\r\n        )\r\n\r\n        config.isSundayFirst = false\r\n\r\n        mainBinding?.fab?.setOnClickListener {\r\n\r\n            launchNewEventIntent(getNewEventDayCode())\r\n        }\r\n\r\n    }\r\n\r\n    fun getNewEventDayCode() = Formatter.getTodayCode()\r\n\r\n    override fun permissionGranted() {\r\n        if (!IsSet) SetFragments()\r\n    }\r\n\r\n    fun SetFragments() {\r\n\r\n        if (!SharedPrefrences.getUser(this)) {\r\n            syncCalendarBehaviour.state = BottomSheetBehavior.STATE_EXPANDED\r\n            SharedPrefrences.setUser(this, true)\r\n            mainBinding?.dialogNotNow?.setOnClickListener {\r\n                syncCalendarBehaviour.state = BottomSheetBehavior.STATE_COLLAPSED\r\n            }\r\n            mainBinding?.dialogSync?.setOnClickListener {\r\n                syncCalendarBehaviour.state = BottomSheetBehavior.STATE_COLLAPSED\r\n                val lbm = LocalBroadcastManager.getInstance(this)\r\n                val localIn = Intent(\"OPEN_ACCOUNT_SYNC\")\r\n                lbm.sendBroadcast(localIn)\r\n                selectAccountBehaviour.state = BottomSheetBehavior.STATE_EXPANDED\r\n            }\r\n        }\r\n\r\n        IsSet = true\r\n        homeFragment = HomeFragment()\r\n        eventFragment = EventFragment()\r\n        notificationFragment = NotificationFragment()\r\n        settingFragment = SettingFragment()\r\n        setNavigationItems()\r\n        homeFragment?.let {\r\n            supportFragmentManager.beginTransaction().replace(R.id.container, it)\r\n                .commit()\r\n        }\r\n\r\n    }\r\n\r\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n        super.onActivityResult(requestCode, resultCode, data)\r\n        if (requestCode == DEFAULT_SETTINGS_REQ_CODE) {\r\n            // Do something after user returned from app settings screen, like showing a Toast.\r\n            if (EasyPermissions.hasPermissions(this, *perms)) {\r\n                permissionGranted()\r\n\r\n            } else {\r\n                EasyPermissions.requestPermissions(\r\n                    this, getString(R.string.permission_str),\r\n                    RC_READ_EXTERNAL_STORAGE, *perms\r\n                )\r\n            }\r\n        }\r\n        if (requestCode == 2296) {\r\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {\r\n\r\n                if (Environment.isExternalStorageManager()) {\r\n                    permissionGranted()\r\n\r\n                } else {\r\n                    EasyPermissions.requestPermissions(\r\n                        this, getString(R.string.permission_str),\r\n                        RC_READ_EXTERNAL_STORAGE, *perms\r\n                    )\r\n                    //                    Toasty.info(this, \"Allow permission for storage access!\", Toast.LENGTH_SHORT).show();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun refreshCalDAVCalendars(showRefreshToast: Boolean) {\r\n        showCalDAVRefreshToast = showRefreshToast\r\n        if (showRefreshToast) {\r\n            toast(R.string.refreshing)\r\n        }\r\n\r\n        syncCalDAVCalendars {\r\n            calDAVHelper.refreshCalendars(true) {\r\n                calDAVChanged()\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun calDAVChanged() {\r\n        if (showCalDAVRefreshToast) {\r\n            toast(R.string.refreshing_complete)\r\n        }\r\n    }\r\n\r\n\r\n    override fun onBackPressed() {\r\n\r\n        if (selectAccountBehaviour.state == BottomSheetBehavior.STATE_EXPANDED) {\r\n            selectAccountBehaviour.state = BottomSheetBehavior.STATE_COLLAPSED\r\n            mainBinding?.hideBack?.beGone()\r\n        }\r\n\r\n        if (syncCalendarBehaviour.state == BottomSheetBehavior.STATE_EXPANDED) {\r\n            syncCalendarBehaviour.state = BottomSheetBehavior.STATE_COLLAPSED\r\n            mainBinding?.hideBack?.beGone()\r\n        }\r\n\r\n        if (menuItem != 0) {\r\n            homeFragment?.let {\r\n                supportFragmentManager.beginTransaction().replace(R.id.container, it)\r\n                    .commit()\r\n            }\r\n            mainBinding?.fab?.visibility = View.VISIBLE\r\n            mainBinding?.today?.visibility = View.VISIBLE\r\n            mainBinding?.today?.beVisible()\r\n            menuItem = 0\r\n        } else {\r\n            super.onBackPressed()\r\n        }\r\n\r\n    }\r\n\r\n    fun setNavigationItems() {\r\n        val menuItems: MutableList<com.shrikanthravi.customnavigationdrawer2.data.MenuItem> =\r\n            ArrayList()\r\n        menuItems.add(\r\n            com.shrikanthravi.customnavigationdrawer2.data.MenuItem(\r\n                \"Home\",\r\n                R.drawable.ic_side_select,\r\n                R.drawable.ic_home_new\r\n            )\r\n        )\r\n        menuItems.add(\r\n            com.shrikanthravi.customnavigationdrawer2.data.MenuItem(\r\n                \"Event\",\r\n                R.drawable.ic_side_select,\r\n                R.drawable.ic_event_new\r\n            )\r\n        )\r\n        menuItems.add(\r\n            com.shrikanthravi.customnavigationdrawer2.data.MenuItem(\r\n                \"Notification\",\r\n                R.drawable.ic_side_select,\r\n                R.drawable.ic_notification_new\r\n            )\r\n        )\r\n        menuItems.add(\r\n            com.shrikanthravi.customnavigationdrawer2.data.MenuItem(\r\n                \"Setting\",\r\n                R.drawable.ic_side_select,\r\n                R.drawable.ic_setting_new\r\n            )\r\n        )\r\n        mainBinding?.navigationDrawer?.menuItemList = menuItems\r\n\r\n        try {\r\n            fragment = HomeFragment()\r\n        } catch (e: java.lang.Exception) {\r\n            e.printStackTrace()\r\n        }\r\n        val fragmentManager: FragmentManager = supportFragmentManager\r\n        fragment?.let {\r\n            fragmentManager.beginTransaction()\r\n                .setCustomAnimations(android.R.animator.fade_in, android.R.animator.fade_out)\r\n                .replace(\r\n                    R.id.container,\r\n                    it\r\n                ).commit()\r\n        }\r\n\r\n        mainBinding?.navigationDrawer?.onMenuItemClickListener =\r\n            SNavigationDrawer.OnMenuItemClickListener { position ->\r\n                menuItem = position\r\n                when (position) {\r\n                    0 -> {\r\n                        mainBinding?.fab?.visibility = View.VISIBLE\r\n                        mainBinding?.today?.visibility = View.VISIBLE\r\n                        fragment = HomeFragment()\r\n                    }\r\n                    1 -> {\r\n                        mainBinding?.fab?.visibility = View.GONE\r\n                        mainBinding?.today?.visibility = View.GONE\r\n                        fragment = EventFragment()\r\n                    }\r\n                    2 -> {\r\n                        mainBinding?.fab?.visibility = View.GONE\r\n                        mainBinding?.today?.visibility = View.GONE\r\n                        fragment = NotificationFragment()\r\n                    }\r\n                    3 -> {\r\n                        mainBinding?.fab?.visibility = View.GONE\r\n                        mainBinding?.today?.visibility = View.GONE\r\n                        fragment = SettingFragment()\r\n                    }\r\n                }\r\n                mainBinding?.navigationDrawer?.drawerListener =\r\n                    object : SNavigationDrawer.DrawerListener {\r\n                        override fun onDrawerOpened() {\r\n\r\n                        }\r\n\r\n                        override fun onDrawerOpening() {\r\n                            mainBinding?.topRL?.visibility = View.GONE\r\n                            mainBinding?.fab?.visibility = View.GONE\r\n                        }\r\n\r\n                        override fun onDrawerClosing() {\r\n//                            println(\"Drawer closed\")\r\n                            mainBinding?.topRL?.visibility = View.VISIBLE\r\n                            mainBinding?.fab?.visibility = View.VISIBLE\r\n                            if (fragment != null) {\r\n                                val fragmentManager = supportFragmentManager\r\n                                fragmentManager.beginTransaction().setCustomAnimations(\r\n                                    android.R.animator.fade_in,\r\n                                    android.R.animator.fade_out\r\n                                ).replace(\r\n                                    R.id.container,\r\n                                    fragment!!\r\n                                ).commit()\r\n                            }\r\n                        }\r\n\r\n                        override fun onDrawerClosed() {}\r\n                        override fun onDrawerStateChanged(newState: Int) {\r\n                            println(\"State $newState\")\r\n                        }\r\n                    }\r\n            }\r\n    }\r\n\r\n\r\n    var menuItem: Int = 0\r\n\r\n\r\n    fun openMonthFromYearly(dateTime: DateTime) {\r\n        val fragment = MonthFragmentsHolder()\r\n        val bundle = Bundle()\r\n        bundle.putString(DAY_CODE, Formatter.getDayCodeFromDateTime(dateTime))\r\n        fragment.arguments = bundle\r\n        supportFragmentManager.beginTransaction().replace(R.id.container1, fragment).commitNow()\r\n        homeFragment?.monthChanges()\r\n    }\r\n\r\n    fun openDayFromMonthly(dateTime: DateTime) {\r\n//        val fragment = DayFragmentsHolder()\r\n//        val bundle = Bundle()\r\n//        bundle.putString(DAY_CODE, Formatter.getDayCodeFromDateTime(dateTime))\r\n//        fragment.arguments = bundle\r\n//        try {\r\n//            supportFragmentManager.beginTransaction().replace(R.id.container1, fragment).commitNow()\r\n//            homeFragment?.dayChanges()\r\n//        } catch (e: Exception) {\r\n//        }\r\n    }\r\n\r\n    fun toggleGoToTodayVisibility(beVisible: Boolean) {\r\n//        shouldGoToTodayBeVisible = beVisible\r\n//        if (goToTodayButton?.isVisible != beVisible) {\r\n//            invalidateOptionsMenu()\r\n//        }\r\n    }\r\n\r\n    private class SelectAccountReceiver : BroadcastReceiver() {\r\n\r\n        override fun onReceive(context: Context, intent: Intent) {\r\n\r\n            var prevAccount = \"\"\r\n\r\n            selectAccountBehaviour.state = BottomSheetBehavior.STATE_EXPANDED\r\n            mainBinding?.hideBack?.visibility = View.VISIBLE\r\n\r\n\r\n            val ids = context.config.getSyncedCalendarIdsAsList()\r\n            val calendars = context.calDAVHelper.getCalDAVCalendars(\"\", true)\r\n            mainBinding?.llMain?.dialogSelectCalendarsPlaceholder?.beVisibleIf(calendars.isEmpty())\r\n            mainBinding?.llMain?.dialogSelectCalendarsHolder?.beVisibleIf(calendars.isNotEmpty())\r\n\r\n            mainBinding?.llMain?.dialogSelectCalendarsHolder?.removeAllViews()\r\n\r\n            val sorted = calendars.sortedWith(compareBy({ it.accountName }, { it.displayName }))\r\n            sorted.forEach {\r\n                if (prevAccount != it.accountName) {\r\n                    prevAccount = it.accountName\r\n                    addCalendarItem(false, it.accountName)\r\n                }\r\n\r\n                addCalendarItem(true, it.displayName, it.id, ids.contains(it.id))\r\n            }\r\n\r\n            mainBinding?.llMain?.dialogSubmit?.setOnClickListener {\r\n                confirmSelection(mainBinding?.llMain?.calendarItemBirthdaySwitch?.isChecked!!)\r\n\r\n            }\r\n\r\n            mainBinding?.llMain?.dialogCancel?.setOnClickListener {\r\n                selectAccountBehaviour.state = BottomSheetBehavior.STATE_COLLAPSED\r\n                mainBinding?.hideBack?.beGone()\r\n            }\r\n\r\n        }\r\n\r\n        fun addCalendarItem(\r\n            isEvent: Boolean,\r\n            text: String,\r\n            tag: Int = 0,\r\n            shouldCheck: Boolean = false\r\n        ) {\r\n            val layout =\r\n                if (isEvent) R.layout.calendar_item_calendar else R.layout.calendar_item_account\r\n            val calendarItem = activity.layoutInflater.inflate(\r\n                layout,\r\n                mainBinding?.llMain?.dialogSelectCalendarsHolder,\r\n                false\r\n            )\r\n\r\n            mainBinding?.llMain?.calendarItemBirthdaySwitch?.apply {\r\n                this.text = \"Add Contact Birthday\"\r\n                isChecked = shouldCheck\r\n                mainBinding?.llMain?.calendarItemBirthdaySwitch?.setOnClickListener {\r\n                    toggle()\r\n                }\r\n            }\r\n\r\n            mainBinding?.llMain?.calendarItemAnniversarySwitch?.apply {\r\n                this.text = \"Add Contact Anniversary\"\r\n                isChecked = shouldCheck\r\n                mainBinding?.llMain?.calendarItemBirthdaySwitch?.setOnClickListener {\r\n                    toggle()\r\n                }\r\n            }\r\n\r\n            if (isEvent) {\r\n                calendarItem.calendar_item_calendar_switch.apply {\r\n                    this.tag = tag\r\n                    this.text = text\r\n                    isChecked = shouldCheck\r\n                    calendarItem.setOnClickListener {\r\n                        toggle()\r\n                    }\r\n                }\r\n            } else {\r\n                calendarItem.calendar_item_account.text = text\r\n            }\r\n\r\n            mainBinding?.llMain?.dialogSelectCalendarsHolder?.addView(calendarItem)\r\n\r\n        }\r\n\r\n        private fun confirmSelection(isAdded: Boolean) {\r\n            val oldCalendarIds = activity.config.getSyncedCalendarIdsAsList()\r\n            val calendarIds = ArrayList<Int>()\r\n            val childCnt = mainBinding?.llMain?.dialogSelectCalendarsHolder?.childCount\r\n            for (i in 0..childCnt!!) {\r\n                val child = mainBinding?.llMain?.dialogSelectCalendarsHolder?.getChildAt(i)\r\n                if (child is RelativeLayout) {\r\n                    val check = child.getChildAt(0)\r\n                    if (check is SwitchCompat && check.isChecked) {\r\n                        calendarIds.add(check.tag as Int)\r\n                    }\r\n                }\r\n            }\r\n            activity.config.caldavSyncedCalendarIds = TextUtils.join(\",\", calendarIds)\r\n\r\n            val newCalendarIds = activity.config.getSyncedCalendarIdsAsList()\r\n\r\n            activity.config.caldavSync = newCalendarIds.isNotEmpty()\r\n            if (newCalendarIds.isNotEmpty()) {\r\n                Toast.makeText(\r\n                    activity,\r\n                    activity.resources.getString(R.string.syncing),\r\n                    Toast.LENGTH_SHORT\r\n                ).show()\r\n            }\r\n\r\n            ensureBackgroundThread {\r\n                if (newCalendarIds.isNotEmpty()) {\r\n                    val existingEventTypeNames = activity.eventsHelper.getEventTypesSync().map {\r\n                        it.getDisplayTitle()\r\n                            .lowercase(Locale.getDefault())\r\n                    } as ArrayList<String>\r\n                    getSyncedCalDAVCalendars().forEach {\r\n                        val calendarTitle = it.getFullTitle()\r\n                        if (!existingEventTypeNames.contains(calendarTitle.lowercase(Locale.getDefault()))) {\r\n                            val eventType = EventType(\r\n                                null,\r\n                                it.displayName,\r\n                                it.color,\r\n                                it.id,\r\n                                it.displayName,\r\n                                it.accountName\r\n                            )\r\n                            existingEventTypeNames.add(calendarTitle.lowercase(Locale.getDefault()))\r\n                            activity.eventsHelper.insertOrUpdateEventType(activity, eventType)\r\n                        }\r\n                    }\r\n\r\n                    syncCalDAVCalendars {\r\n                        activity.calDAVHelper.refreshCalendars(true) {\r\n                            if (newCalendarIds.isNotEmpty()) {\r\n                                activity.runOnUiThread {\r\n                                    Toast.makeText(\r\n                                        activity,\r\n                                        activity.resources.getString(R.string.synchronization_completed),\r\n                                        Toast.LENGTH_SHORT\r\n                                    ).show()\r\n\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                val removedCalendarIds = oldCalendarIds.filter { !newCalendarIds.contains(it) }\r\n                removedCalendarIds.forEach {\r\n                    activity.calDAVHelper.deleteCalDAVCalendarEvents(it.toLong())\r\n                    activity.eventsHelper.getEventTypeWithCalDAVCalendarId(it)?.apply {\r\n                        activity.eventsHelper.deleteEventTypes(arrayListOf(this), true)\r\n                    }\r\n                }\r\n\r\n                activity.eventTypesDB.deleteEventTypesWithCalendarId(removedCalendarIds)\r\n                updateDefaultEventTypeText()\r\n            }\r\n            selectAccountBehaviour.state = BottomSheetBehavior.STATE_COLLAPSED\r\n            mainBinding?.hideBack?.beGone()\r\n        }\r\n    }\r\n\r\n\r\n    class AddBirthdayTask : AsyncTask<Void, Void, String>() {\r\n        override fun doInBackground(vararg params: Void?): String {\r\n            tryAddBirthdays(true)\r\n            return \"\"\r\n        }\r\n\r\n        fun tryAddBirthdays(isAdded: Boolean) {\r\n            val isGranted = EasyPermissions.hasPermissions(activity, *perms)\r\n            if (isGranted) {\r\n                activity.runOnUiThread {\r\n                    SetRemindersDialog(activity) {\r\n                        val reminders = it\r\n                        val privateCursor =\r\n                            Companion.getMyContactsCursor(false, false)?.loadInBackground()\r\n\r\n                        ensureBackgroundThread {\r\n                            val privateContacts =\r\n                                MyContactsContentProvider.getSimpleContacts(activity, privateCursor)\r\n                            addPrivateEvents(\r\n                                true,\r\n                                privateContacts,\r\n                                reminders\r\n                            ) { eventsFound, eventsAdded ->\r\n                                addContactEvents(true, reminders, eventsFound, eventsAdded) {\r\n                                    when {\r\n                                        it > 0 -> {\r\n                                            Toast.makeText(\r\n                                                activity,\r\n                                                R.string.birthdays_added,\r\n                                                Toast.LENGTH_SHORT\r\n                                            ).show()\r\n                                            setupQuickFilter(isAdded)\r\n                                        }\r\n                                        it == -1 -> Toast.makeText(\r\n                                            activity,\r\n                                            R.string.no_new_birthdays,\r\n                                            Toast.LENGTH_SHORT\r\n                                        ).show()\r\n                                        else -> Toast.makeText(\r\n                                            activity,\r\n                                            R.string.no_birthdays,\r\n                                            Toast.LENGTH_SHORT\r\n                                        ).show()\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Toast.makeText(\r\n                    activity,\r\n                    R.string.no_contacts_permission,\r\n                    Toast.LENGTH_SHORT\r\n                ).show()\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    class AddAnniversaryTask : AsyncTask<Void, Void, String>() {\r\n        override fun doInBackground(vararg params: Void?): String {\r\n            tryAddAnniversaries()\r\n            return \"\"\r\n        }\r\n\r\n        private fun tryAddAnniversaries() {\r\n            val isGranted = EasyPermissions.hasPermissions(activity, *perms)\r\n            if (isGranted) {\r\n                activity.runOnUiThread {\r\n                    SetRemindersDialog(activity) {\r\n                        val reminders = it\r\n                        val privateCursor = getMyContactsCursor(false, false)?.loadInBackground()\r\n\r\n                        ensureBackgroundThread {\r\n                            val privateContacts =\r\n                                MyContactsContentProvider.getSimpleContacts(activity, privateCursor)\r\n                            addPrivateEvents(\r\n                                false,\r\n                                privateContacts,\r\n                                reminders\r\n                            ) { eventsFound, eventsAdded ->\r\n                                addContactEvents(false, reminders, eventsFound, eventsAdded) {\r\n                                    when {\r\n                                        it > 0 -> {\r\n                                            Toast.makeText(\r\n                                                activity,\r\n                                                R.string.anniversaries_added,\r\n                                                Toast.LENGTH_SHORT\r\n                                            ).show()\r\n                                            setupQuicAnniversaryFilter()\r\n                                        }\r\n                                        it == -1 -> Toast.makeText(\r\n                                            activity,\r\n                                            R.string.no_new_anniversaries,\r\n                                            Toast.LENGTH_SHORT\r\n                                        ).show()\r\n                                        else -> Toast.makeText(\r\n                                            activity,\r\n                                            R.string.no_anniversaries,\r\n                                            Toast.LENGTH_SHORT\r\n                                        ).show()\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Toast.makeText(\r\n                    activity,\r\n                    R.string.no_contacts_permission,\r\n                    Toast.LENGTH_SHORT\r\n                ).show()\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    /******************** Add holidays *************************/\r\n    private val holidayReceiver: BroadcastReceiver = object : BroadcastReceiver() {\r\n        override fun onReceive(context: Context, intent: Intent) {\r\n            addHolidays()\r\n        }\r\n    }\r\n\r\n    private val birthdayReceiver: BroadcastReceiver = object : BroadcastReceiver() {\r\n        override fun onReceive(context: Context, intent: Intent) {\r\n            AddBirthdayTask().execute()\r\n        }\r\n    }\r\n\r\n    private val anniversaryReceiver: BroadcastReceiver = object : BroadcastReceiver() {\r\n        override fun onReceive(context: Context, intent: Intent) {\r\n            AddAnniversaryTask().execute()\r\n        }\r\n    }\r\n\r\n    private fun addHolidays() {\r\n        val items = getHolidayRadioItems()\r\n        RadioGroupDialog(this, items) {\r\n            toast(R.string.importing)\r\n            ensureBackgroundThread {\r\n                val holidays = getString(R.string.holidays)\r\n                var eventTypeId = eventsHelper.getEventTypeIdWithTitle(holidays)\r\n                if (eventTypeId == -1L) {\r\n                    val eventType = EventType(\r\n                        null,\r\n                        holidays,\r\n                        resources.getColor(R.color.default_holidays_color)\r\n                    )\r\n                    eventTypeId = eventsHelper.insertOrUpdateEventTypeSync(eventType)\r\n                }\r\n\r\n                val result = IcsImporter(this).importEvents(it as String, eventTypeId, 0, false)\r\n                handleParseResult(result)\r\n                if (result != IcsImporter.ImportResult.IMPORT_FAIL) {\r\n                    runOnUiThread {\r\n\r\n                        homeFragment?.let {\r\n                            supportFragmentManager.beginTransaction().replace(R.id.container, it)\r\n                                .commit()\r\n                        }\r\n\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun getHolidayRadioItems(): ArrayList<RadioItem> {\r\n        val items = ArrayList<RadioItem>()\r\n\r\n        LinkedHashMap<String, String>().apply {\r\n            put(\"Algeria\", \"algeria.ics\")\r\n            put(\"Argentina\", \"argentina.ics\")\r\n            put(\"Australia\", \"australia.ics\")\r\n            put(\"België\", \"belgium.ics\")\r\n            put(\"Bolivia\", \"bolivia.ics\")\r\n            put(\"Brasil\", \"brazil.ics\")\r\n            put(\"България\", \"bulgaria.ics\")\r\n            put(\"Canada\", \"canada.ics\")\r\n            put(\"China\", \"china.ics\")\r\n            put(\"Colombia\", \"colombia.ics\")\r\n            put(\"Česká republika\", \"czech.ics\")\r\n            put(\"Danmark\", \"denmark.ics\")\r\n            put(\"Deutschland\", \"germany.ics\")\r\n            put(\"Eesti\", \"estonia.ics\")\r\n            put(\"España\", \"spain.ics\")\r\n            put(\"Éire\", \"ireland.ics\")\r\n            put(\"France\", \"france.ics\")\r\n            put(\"Fürstentum Liechtenstein\", \"liechtenstein.ics\")\r\n            put(\"Hellas\", \"greece.ics\")\r\n            put(\"Hrvatska\", \"croatia.ics\")\r\n            put(\"India\", \"india.ics\")\r\n            put(\"Indonesia\", \"indonesia.ics\")\r\n            put(\"Ísland\", \"iceland.ics\")\r\n            put(\"Israel\", \"israel.ics\")\r\n            put(\"Italia\", \"italy.ics\")\r\n            put(\"Қазақстан Республикасы\", \"kazakhstan.ics\")\r\n            put(\"المملكة المغربية\", \"morocco.ics\")\r\n            put(\"Latvija\", \"latvia.ics\")\r\n            put(\"Lietuva\", \"lithuania.ics\")\r\n            put(\"Luxemburg\", \"luxembourg.ics\")\r\n            put(\"Makedonija\", \"macedonia.ics\")\r\n            put(\"Malaysia\", \"malaysia.ics\")\r\n            put(\"Magyarország\", \"hungary.ics\")\r\n            put(\"México\", \"mexico.ics\")\r\n            put(\"Nederland\", \"netherlands.ics\")\r\n            put(\"República de Nicaragua\", \"nicaragua.ics\")\r\n            put(\"日本\", \"japan.ics\")\r\n            put(\"Nigeria\", \"nigeria.ics\")\r\n            put(\"Norge\", \"norway.ics\")\r\n            put(\"Österreich\", \"austria.ics\")\r\n            put(\"Pākistān\", \"pakistan.ics\")\r\n            put(\"Polska\", \"poland.ics\")\r\n            put(\"Portugal\", \"portugal.ics\")\r\n            put(\"Россия\", \"russia.ics\")\r\n            put(\"República de Costa Rica\", \"costarica.ics\")\r\n            put(\"República Oriental del Uruguay\", \"uruguay.ics\")\r\n            put(\"République d'Haïti\", \"haiti.ics\")\r\n            put(\"România\", \"romania.ics\")\r\n            put(\"Schweiz\", \"switzerland.ics\")\r\n            put(\"Singapore\", \"singapore.ics\")\r\n            put(\"한국\", \"southkorea.ics\")\r\n            put(\"Srbija\", \"serbia.ics\")\r\n            put(\"Slovenija\", \"slovenia.ics\")\r\n            put(\"Slovensko\", \"slovakia.ics\")\r\n            put(\"South Africa\", \"southafrica.ics\")\r\n            put(\"Suomi\", \"finland.ics\")\r\n            put(\"Sverige\", \"sweden.ics\")\r\n            put(\"Taiwan\", \"taiwan.ics\")\r\n            put(\"ราชอาณาจักรไทย\", \"thailand.ics\")\r\n            put(\"Türkiye Cumhuriyeti\", \"turkey.ics\")\r\n            put(\"Ukraine\", \"ukraine.ics\")\r\n            put(\"United Kingdom\", \"unitedkingdom.ics\")\r\n            put(\"United States\", \"unitedstates.ics\")\r\n\r\n            var i = 0\r\n            for ((country, file) in this) {\r\n                items.add(RadioItem(i++, country, file))\r\n            }\r\n        }\r\n\r\n        return items\r\n    }\r\n\r\n    private fun handleParseResult(result: IcsImporter.ImportResult) {\r\n        toast(\r\n            when (result) {\r\n                IcsImporter.ImportResult.IMPORT_NOTHING_NEW -> R.string.no_new_items\r\n                IcsImporter.ImportResult.IMPORT_OK -> R.string.holidays_imported_successfully\r\n                IcsImporter.ImportResult.IMPORT_PARTIAL -> R.string.importing_some_holidays_failed\r\n                else -> R.string.importing_holidays_failed\r\n            }, Toast.LENGTH_LONG\r\n        )\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/daily/events/calender/Activity/MainActivity.kt	(revision bb4a732c06b2d4ae313f7cb7d6b22f16dee5bf89)
+++ app/src/main/java/com/daily/events/calender/Activity/MainActivity.kt	(date 1633665618260)
@@ -704,8 +704,13 @@
                         }
 
                         override fun onDrawerOpening() {
-                            mainBinding?.topRL?.visibility = View.GONE
-                            mainBinding?.fab?.visibility = View.GONE
+                            if(position!=0) {
+                                mainBinding?.topRL?.visibility = View.GONE
+                                mainBinding?.fab?.visibility = View.GONE
+                            }else{
+                                mainBinding?.topRL?.visibility = View.VISIBLE
+                                mainBinding?.fab?.visibility = View.VISIBLE
+                            }
                         }
 
                         override fun onDrawerClosing() {
Index: app/src/main/java/com/daily/events/calender/Fragment/Home/MonthFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.daily.events.calender.Fragment.Home\r\n\r\nimport android.content.Context\r\nimport android.content.res.Resources\r\nimport android.os.Bundle\r\nimport android.util.DisplayMetrics\r\nimport android.view.LayoutInflater\r\nimport android.view.MotionEvent\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.view.animation.TranslateAnimation\r\nimport android.widget.LinearLayout\r\nimport android.widget.RelativeLayout\r\nimport androidx.fragment.app.Fragment\r\nimport com.daily.events.calender.Activity.MainActivity\r\nimport com.daily.events.calender.Activity.SimpleActivity\r\nimport com.daily.events.calender.Adapter.EventListAdapter\r\nimport com.daily.events.calender.Extensions.*\r\nimport com.daily.events.calender.Model.DayMonthly\r\nimport com.daily.events.calender.Model.Event\r\nimport com.daily.events.calender.R\r\nimport com.daily.events.calender.helpers.Config\r\nimport com.daily.events.calender.helpers.DAY_CODE\r\nimport com.daily.events.calender.helpers.Formatter\r\nimport com.daily.events.calender.helpers.MonthlyCalendarImpl\r\nimport com.daily.events.calender.interfaces.MonthlyCalendar\r\nimport com.daily.events.calender.interfaces.NavigationListener\r\nimport com.daily.events.calender.models.ListEvent\r\nimport com.daily.events.calender.views.MonthViewWrapper\r\nimport com.simplemobiletools.commons.extensions.beVisibleIf\r\nimport com.simplemobiletools.commons.interfaces.RefreshRecyclerViewListener\r\nimport kotlinx.android.synthetic.main.fragment_month.view.*\r\nimport kotlinx.android.synthetic.main.layout_monthview_event.*\r\nimport kotlinx.android.synthetic.main.layout_monthview_event.view.*\r\nimport org.joda.time.DateTime\r\n\r\n\r\n// TODO: Rename parameter arguments, choose names that match\r\n// the fragment initialization parameters, e.g. ARG_ITEM_NUMBER\r\nprivate const val ARG_PARAM1 = \"param1\"\r\nprivate const val ARG_PARAM2 = \"param2\"\r\n\r\n/**\r\n * A simple [Fragment] subclass.\r\n * Use the [MonthFragment.newInstance] factory method to\r\n * create an instance of this fragment.\r\n */\r\nclass MonthFragment : Fragment(), MonthlyCalendar, RefreshRecyclerViewListener,\r\n    View.OnTouchListener {\r\n\r\n    private var mTextColor = 0\r\n    private var mSundayFirst = false\r\n    private var mShowWeekNumbers = false\r\n    private var mDayCode = \"\"\r\n    private var mPackageName = \"\"\r\n    private var mLastHash = 0L\r\n    private var mCalendar: MonthlyCalendarImpl? = null\r\n\r\n    var listener: NavigationListener? = null\r\n\r\n    lateinit var mRes: Resources\r\n    lateinit var mHolder: RelativeLayout\r\n    lateinit var mMainRL: RelativeLayout\r\n    lateinit var mMonthViewWaraper: MonthViewWrapper\r\n    lateinit var mConfig: Config\r\n\r\n    private var mSelectedDayCode = \"\"\r\n\r\n    private var mListEvents = ArrayList<Event>()\r\n\r\n    // TODO: Rename and change types of parameters\r\n    private var param1: String? = null\r\n    private var param2: String? = null\r\n\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        arguments?.let {\r\n            param1 = it.getString(ARG_PARAM1)\r\n            param2 = it.getString(ARG_PARAM2)\r\n        }\r\n    }\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        val view = inflater.inflate(R.layout.fragment_month, container, false)\r\n\r\n        mRes = resources\r\n        mPackageName = requireActivity().packageName\r\n        mHolder = view.month_calendar_holder\r\n        mMonthViewWaraper = view.month_view_wrapper\r\n        mMainRL = view.mainRL\r\n        mMainRL.setOnTouchListener(this)\r\n        mDayCode = requireArguments().getString(DAY_CODE)!!\r\n        mConfig = requireContext().config\r\n        storeStateVariables()\r\n\r\n//        setupButtons()\r\n        mCalendar = MonthlyCalendarImpl(this, requireContext())\r\n        return view\r\n    }\r\n\r\n    override fun onPause() {\r\n        super.onPause()\r\n        storeStateVariables()\r\n    }\r\n\r\n    override fun onResume() {\r\n        super.onResume()\r\n        if (mConfig.showWeekNumbers != mShowWeekNumbers) {\r\n            mLastHash = -1L\r\n        }\r\n\r\n        mCalendar!!.apply {\r\n            mTargetDate = Formatter.getDateTimeFromCode(mDayCode)\r\n            getDays(false)    // prefill the screen asap, even if without events\r\n        }\r\n\r\n        storeStateVariables()\r\n        updateCalendar()\r\n    }\r\n\r\n    private fun storeStateVariables() {\r\n        mConfig.apply {\r\n            mSundayFirst = isSundayFirst\r\n            mShowWeekNumbers = showWeekNumbers\r\n        }\r\n    }\r\n\r\n    fun updateCalendar() {\r\n//        if(isExpand) {\r\n//            expand(mMonthViewWaraper)\r\n//        }else{\r\n//            collapse(mMonthViewWaraper)\r\n//        }\r\n        mCalendar?.updateMonthlyCalendar(Formatter.getDateTimeFromCode(mDayCode))\r\n    }\r\n\r\n    companion object {\r\n        var isExpand: Boolean = true\r\n\r\n        @JvmStatic\r\n        fun newInstance(param1: String, param2: String) =\r\n            MonthFragment().apply {\r\n                arguments = Bundle().apply {\r\n                    putString(ARG_PARAM1, param1)\r\n                    putString(ARG_PARAM2, param2)\r\n                }\r\n            }\r\n    }\r\n\r\n    override fun updateMonthlyCalendar(\r\n        context: Context,\r\n        month: String,\r\n        days: ArrayList<DayMonthly>,\r\n        checkedEvents: Boolean,\r\n        currTargetDate: DateTime\r\n    ) {\r\n        val newHash = month.hashCode() + days.hashCode().toLong()\r\n        if ((mLastHash != 0L && !checkedEvents) || mLastHash == newHash) {\r\n            return\r\n        }\r\n\r\n        mLastHash = newHash\r\n\r\n        activity?.runOnUiThread {\r\n            mHolder.month_view_wrapper.updateDays(days, false) {\r\n                mSelectedDayCode = it.code\r\n                updateVisibleEvents()\r\n            }\r\n            updateDays(days)\r\n        }\r\n\r\n        refreshItems()\r\n    }\r\n\r\n\r\n    private fun updateDays(days: ArrayList<DayMonthly>) {\r\n        mHolder.month_view_wrapper.updateDays(days, true) {\r\n            (activity as MainActivity).openDayFromMonthly(Formatter.getDateTimeFromCode(it.code))\r\n        }\r\n    }\r\n\r\n    fun printCurrentView() {\r\n        mHolder.apply {\r\n            month_view_wrapper.togglePrintMode()\r\n\r\n            requireContext().printBitmap(month_calendar_holder.getViewBitmap())\r\n\r\n            month_view_wrapper.togglePrintMode()\r\n\r\n        }\r\n    }\r\n\r\n    private fun updateVisibleEvents() {\r\n        if (activity == null) {\r\n            return\r\n        }\r\n\r\n        val filtered = mListEvents.filter {\r\n            if (mSelectedDayCode.isEmpty()) {\r\n                val shownMonthDateTime = Formatter.getDateTimeFromCode(mDayCode)\r\n                val startDateTime = Formatter.getDateTimeFromTS(it.startTS)\r\n                shownMonthDateTime.year == startDateTime.year && shownMonthDateTime.monthOfYear == startDateTime.monthOfYear\r\n            } else {\r\n                val selectionDate = Formatter.getDateTimeFromCode(mSelectedDayCode).toLocalDate()\r\n                val startDate = Formatter.getDateFromTS(it.startTS)\r\n                val endDate = Formatter.getDateFromTS(it.endTS)\r\n                selectionDate in startDate..endDate\r\n            }\r\n        }\r\n\r\n        val listItems = requireActivity().getEventListItems(filtered, false)\r\n\r\n\r\n        activity?.runOnUiThread {\r\n            if (activity != null) {\r\n                mHolder.month_day_events_list.beVisibleIf(listItems.isNotEmpty())\r\n                mHolder.month_day_no_events_placeholder.beVisibleIf(listItems.isEmpty())\r\n\r\n                val currAdapter = mHolder.month_day_events_list.adapter\r\n                if (currAdapter == null) {\r\n                    EventListAdapter(\r\n                        activity as SimpleActivity,\r\n                        listItems,\r\n                        true,\r\n                        this,\r\n                        month_day_events_list\r\n                    ) {\r\n                        if (it is ListEvent) {\r\n                            activity?.editEvent(it)\r\n                        }\r\n                    }.apply {\r\n                        month_day_events_list.adapter = this\r\n                    }\r\n                    month_day_events_list.scheduleLayoutAnimation()\r\n                } else {\r\n                    (currAdapter as EventListAdapter).updateListItems(listItems)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun refreshItems() {\r\n        val startDateTime = Formatter.getLocalDateTimeFromCode(mDayCode).minusWeeks(1)\r\n        val endDateTime = startDateTime.plusWeeks(7)\r\n        activity?.eventsHelper?.getEvents(\r\n            startDateTime.seconds(),\r\n            endDateTime.seconds()\r\n        ) { events ->\r\n            mListEvents = events\r\n            activity?.runOnUiThread {\r\n                updateVisibleEvents()\r\n            }\r\n        }\r\n    }\r\n\r\n    fun expand(v: View) {\r\n        isExpand = true\r\n        val matchParentMeasureSpec =\r\n            View.MeasureSpec.makeMeasureSpec((v.parent as View).width, View.MeasureSpec.EXACTLY)\r\n        val wrapContentMeasureSpec =\r\n            View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED)\r\n        v.measure(matchParentMeasureSpec, wrapContentMeasureSpec)\r\n        v.layoutParams.height = 1\r\n\r\n        val a = TranslateAnimation(\r\n            0F,\r\n            0F,\r\n            0F,\r\n            0F\r\n        )\r\n        v.layoutParams.height = LinearLayout.LayoutParams.MATCH_PARENT\r\n        v.requestLayout()\r\n        a.duration = 20000\r\n        a.fillAfter = true\r\n        v.startAnimation(a)\r\n    }\r\n\r\n    fun collapse(v: View) {\r\n        isExpand = false\r\n\r\n        val a = TranslateAnimation(\r\n            0F,\r\n            0F,\r\n            LinearLayout.LayoutParams.MATCH_PARENT.toFloat(),  // fromYDelta\r\n            0F\r\n        )\r\n        val displayMetrics = DisplayMetrics()\r\n        activity?.windowManager?.defaultDisplay?.getMetrics(displayMetrics)\r\n        val height: Int = displayMetrics.heightPixels\r\n\r\n        v.layoutParams.height = ((height / 2.5).toInt())\r\n        v.requestLayout()\r\n        a.duration = 20000\r\n        a.fillAfter = true\r\n        v.startAnimation(a)\r\n\r\n    }\r\n\r\n    override fun onTouch(v: View?, event: MotionEvent?): Boolean {\r\n        when (event?.action) {\r\n            MotionEvent.ACTION_UP -> {\r\n                if (isExpand) {\r\n                    collapse(mMonthViewWaraper)\r\n                } else {\r\n                    expand(mMonthViewWaraper)\r\n                }\r\n            }\r\n        }\r\n        return true\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/daily/events/calender/Fragment/Home/MonthFragment.kt	(revision bb4a732c06b2d4ae313f7cb7d6b22f16dee5bf89)
+++ app/src/main/java/com/daily/events/calender/Fragment/Home/MonthFragment.kt	(date 1633666977067)
@@ -48,7 +48,6 @@
 class MonthFragment : Fragment(), MonthlyCalendar, RefreshRecyclerViewListener,
     View.OnTouchListener {
 
-    private var mTextColor = 0
     private var mSundayFirst = false
     private var mShowWeekNumbers = false
     private var mDayCode = ""
Index: customnavigationdrawer2/src/main/res/drawable/avd_pathmorph_drawer_arrow_to_hamburger.xml
===================================================================
--- customnavigationdrawer2/src/main/res/drawable/avd_pathmorph_drawer_arrow_to_hamburger.xml	(revision bb4a732c06b2d4ae313f7cb7d6b22f16dee5bf89)
+++ customnavigationdrawer2/src/main/res/drawable/avd_pathmorph_drawer_arrow_to_hamburger.xml	(revision bb4a732c06b2d4ae313f7cb7d6b22f16dee5bf89)
@@ -1,27 +0,0 @@
-<animated-vector xmlns:android="http://schemas.android.com/apk/res/android"
-    xmlns:aapt="http://schemas.android.com/aapt"
-    android:drawable="@drawable/vd_pathmorph_drawer_arrow">
-
-    <target android:name="rotationGroup">
-        <aapt:attr name="android:animation">
-            <objectAnimator
-                android:duration="300"
-                android:interpolator="@android:interpolator/fast_out_slow_in"
-                android:propertyName="rotation"
-                android:valueFrom="180"
-                android:valueTo="360" />
-        </aapt:attr>
-    </target>
-
-    <target android:name="iconPath">
-        <aapt:attr name="android:animation">
-            <objectAnimator
-                android:duration="300"
-                android:interpolator="@android:interpolator/fast_out_slow_in"
-                android:propertyName="pathData"
-                android:valueFrom="@string/path_arrow"
-                android:valueTo="@string/path_drawer"
-                android:valueType="pathType" />
-        </aapt:attr>
-    </target>
-</animated-vector>
\ No newline at end of file
Index: customnavigationdrawer2/src/main/res/drawable/avd_pathmorph_drawer_hamburger_to_arrow.xml
===================================================================
--- customnavigationdrawer2/src/main/res/drawable/avd_pathmorph_drawer_hamburger_to_arrow.xml	(revision bb4a732c06b2d4ae313f7cb7d6b22f16dee5bf89)
+++ customnavigationdrawer2/src/main/res/drawable/avd_pathmorph_drawer_hamburger_to_arrow.xml	(revision bb4a732c06b2d4ae313f7cb7d6b22f16dee5bf89)
@@ -1,27 +0,0 @@
-<animated-vector xmlns:android="http://schemas.android.com/apk/res/android"
-    xmlns:aapt="http://schemas.android.com/aapt"
-    android:drawable="@drawable/ic_menu">
-
-    <target android:name="rotationGroup">
-        <aapt:attr name="android:animation">
-            <objectAnimator
-                android:duration="300"
-                android:interpolator="@android:interpolator/fast_out_slow_in"
-                android:propertyName="rotation"
-                android:valueFrom="0"
-                android:valueTo="180" />
-        </aapt:attr>
-    </target>
-
-    <target android:name="iconPath">
-        <aapt:attr name="android:animation">
-            <objectAnimator
-                android:duration="300"
-                android:interpolator="@android:interpolator/fast_out_slow_in"
-                android:propertyName="pathData"
-                android:valueFrom="@string/path_drawer"
-                android:valueTo="@string/path_arrow"
-                android:valueType="pathType" />
-        </aapt:attr>
-    </target>
-</animated-vector>
\ No newline at end of file
Index: customnavigationdrawer2/src/main/res/drawable/asl_pathmorph_drawer.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<animated-selector xmlns:android=\"http://schemas.android.com/apk/res/android\">\r\n\r\n    <item\r\n        android:id=\"@+id/arrow\"\r\n        android:drawable=\"@drawable/vd_pathmorph_drawer_arrow\"\r\n        android:state_checked=\"true\" />\r\n\r\n    <item\r\n        android:id=\"@+id/hamburger\"\r\n        android:drawable=\"@drawable/ic_menu\" />\r\n\r\n    <transition\r\n        android:drawable=\"@drawable/ic_menu\"\r\n        android:fromId=\"@id/hamburger\"\r\n        android:toId=\"@id/arrow\" />\r\n\r\n    <transition\r\n        android:drawable=\"@drawable/avd_pathmorph_drawer_arrow_to_hamburger\"\r\n        android:fromId=\"@id/arrow\"\r\n        android:toId=\"@id/hamburger\" />\r\n\r\n</animated-selector>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- customnavigationdrawer2/src/main/res/drawable/asl_pathmorph_drawer.xml	(revision bb4a732c06b2d4ae313f7cb7d6b22f16dee5bf89)
+++ customnavigationdrawer2/src/main/res/drawable/asl_pathmorph_drawer.xml	(date 1633666724926)
@@ -16,7 +16,7 @@
         android:toId="@id/arrow" />
 
     <transition
-        android:drawable="@drawable/avd_pathmorph_drawer_arrow_to_hamburger"
+        android:drawable="@drawable/ic_menu"
         android:fromId="@id/arrow"
         android:toId="@id/hamburger" />
 
Index: app/src/main/java/com/daily/events/calender/Fragment/Home/HomeFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.daily.events.calender.Fragment.Home\r\n\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport androidx.core.content.ContextCompat\r\nimport androidx.databinding.DataBindingUtil\r\nimport androidx.fragment.app.Fragment\r\nimport com.daily.events.calender.Activity.MainActivity\r\nimport com.daily.events.calender.Extensions.config\r\nimport com.daily.events.calender.Extensions.seconds\r\nimport com.daily.events.calender.Fragment.DayFragmentsHolder\r\nimport com.daily.events.calender.Fragment.MonthFragmentsHolder\r\nimport com.daily.events.calender.Fragment.WeekFragmentsHolder\r\nimport com.daily.events.calender.Fragment.YearFragmentsHolder\r\nimport com.daily.events.calender.R\r\nimport com.daily.events.calender.databinding.FragmentHomeBinding\r\nimport com.daily.events.calender.helpers.*\r\nimport com.daily.events.calender.helpers.Formatter\r\nimport org.joda.time.DateTime\r\nimport org.joda.time.DateTimeZone\r\nimport java.util.*\r\n\r\nprivate const val ARG_PARAM1 = \"param1\"\r\nprivate const val ARG_PARAM2 = \"param2\"\r\n\r\nclass HomeFragment : Fragment(), View.OnClickListener {\r\n\r\n\r\n    // TODO: Rename and change types of parameters\r\n    private var param1: String? = null\r\n    private var param2: String? = null\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        arguments?.let {\r\n            param1 = it.getString(ARG_PARAM1)\r\n            param2 = it.getString(ARG_PARAM2)\r\n        }\r\n    }\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        // Inflate the layout for this fragment\r\n        fragmentHomeBinding =\r\n            DataBindingUtil.inflate(inflater, R.layout.fragment_home, container, false)\r\n\r\n        fragmentHomeBinding?.yearIV?.setOnClickListener(this)\r\n        fragmentHomeBinding?.monthIV?.setOnClickListener(this)\r\n        fragmentHomeBinding?.weekIV?.setOnClickListener(this)\r\n        fragmentHomeBinding?.dayIV?.setOnClickListener(this)\r\n\r\n        if (requireActivity().config.storedView == YEARLY_VIEW) {\r\n            yearChanges()\r\n\r\n        } else if (requireActivity().config.storedView == MONTHLY_VIEW) {\r\n            monthChanges()\r\n        } else if (requireActivity().config.storedView == WEEKLY_VIEW) {\r\n            weekChanges()\r\n        } else {\r\n            dayChanges()\r\n        }\r\n        updateViewPager()\r\n\r\n        return fragmentHomeBinding?.root\r\n    }\r\n\r\n    fun updateViewPager(dayCode: String? = Formatter.getTodayCode()) {\r\n\r\n        val fragment = getFragmentsHolder()\r\n        MainActivity.mainBinding?.today?.setOnClickListener { fragment.goToToday() }\r\n        val bundle = Bundle()\r\n\r\n        if (requireActivity().config.storedView == MONTHLY_VIEW ||\r\n            requireActivity().config.storedView == MONTHLY_DAILY_VIEW\r\n        ) {\r\n            bundle.putString(DAY_CODE, dayCode)\r\n        } else if (requireActivity().config.storedView == WEEKLY_VIEW) {\r\n            bundle.putString(WEEK_START_DATE_TIME, getThisWeekDateTime())\r\n        } else if (requireActivity().config.storedView == DAILY_VIEW) {\r\n            bundle.putString(DAY_CODE, dayCode)\r\n            bundle.putString(WEEK_START_DATE_TIME, getThisWeekDateTime())\r\n        }\r\n\r\n        fragment.arguments = bundle\r\n        childFragmentManager.beginTransaction().replace(R.id.container1, fragment).commitNow()\r\n    }\r\n\r\n    private fun getThisWeekDateTime(): String {\r\n        val currentOffsetHours = TimeZone.getDefault().rawOffset / 1000 / 60 / 60\r\n\r\n        // not great, not terrible\r\n        val useHours = if (currentOffsetHours >= 10) 8 else 12\r\n        var thisweek =\r\n            DateTime().withZone(DateTimeZone.UTC).withDayOfWeek(1).withHourOfDay(useHours)\r\n                .minusDays(if (requireActivity().config.isSundayFirst) 1 else 0)\r\n        if (DateTime().minusDays(7).seconds() > thisweek.seconds()) {\r\n            thisweek = thisweek.plusDays(7)\r\n        }\r\n        return thisweek.toString()\r\n    }\r\n\r\n    private fun getFragmentsHolder() = when (requireActivity().config.storedView) {\r\n        DAILY_VIEW -> DayFragmentsHolder()\r\n        MONTHLY_VIEW -> MonthFragmentsHolder()\r\n        WEEKLY_VIEW -> WeekFragmentsHolder()\r\n        YEARLY_VIEW -> YearFragmentsHolder()\r\n//        EVENTS_LIST_VIEW -> EventListFragment()\r\n        else -> MonthFragmentsHolder()\r\n    }\r\n\r\n    companion object {\r\n        var fragmentHomeBinding: FragmentHomeBinding? = null\r\n\r\n        @JvmStatic\r\n        fun newInstance(param1: String, param2: String) =\r\n            HomeFragment().apply {\r\n                arguments = Bundle().apply {\r\n                    putString(ARG_PARAM1, param1)\r\n                    putString(ARG_PARAM2, param2)\r\n                }\r\n            }\r\n    }\r\n\r\n    fun yearChanges() {\r\n        activity?.let {\r\n            fragmentHomeBinding?.yearIV?.setColorFilter(\r\n                ContextCompat.getColor(\r\n                    it,\r\n                    R.color.theme_color\r\n                ), android.graphics.PorterDuff.Mode.SRC_IN\r\n            )\r\n            fragmentHomeBinding?.monthIV?.setColorFilter(\r\n                ContextCompat.getColor(\r\n                    it,\r\n                    R.color.grey\r\n                ), android.graphics.PorterDuff.Mode.SRC_IN\r\n            )\r\n            fragmentHomeBinding?.weekIV?.setColorFilter(\r\n                ContextCompat.getColor(\r\n                    it,\r\n                    R.color.grey\r\n                ), android.graphics.PorterDuff.Mode.SRC_IN\r\n            )\r\n            fragmentHomeBinding?.dayIV?.setColorFilter(\r\n                ContextCompat.getColor(\r\n                    it,\r\n                    R.color.grey\r\n                ), android.graphics.PorterDuff.Mode.SRC_IN\r\n            )\r\n\r\n        }\r\n    }\r\n\r\n    fun monthChanges() {\r\n        activity?.let {\r\n            fragmentHomeBinding?.yearIV?.setColorFilter(\r\n                ContextCompat.getColor(\r\n                    it,\r\n                    R.color.grey\r\n                ), android.graphics.PorterDuff.Mode.SRC_IN\r\n            )\r\n            fragmentHomeBinding?.monthIV?.setColorFilter(\r\n                ContextCompat.getColor(\r\n                    it,\r\n                    R.color.theme_color\r\n                ), android.graphics.PorterDuff.Mode.SRC_IN\r\n            )\r\n            fragmentHomeBinding?.weekIV?.setColorFilter(\r\n                ContextCompat.getColor(\r\n                    it,\r\n                    R.color.grey\r\n                ), android.graphics.PorterDuff.Mode.SRC_IN\r\n            )\r\n            fragmentHomeBinding?.dayIV?.setColorFilter(\r\n                ContextCompat.getColor(\r\n                    it,\r\n                    R.color.grey\r\n                ), android.graphics.PorterDuff.Mode.SRC_IN\r\n            )\r\n\r\n        }\r\n    }\r\n\r\n    fun weekChanges() {\r\n        activity?.let {\r\n            fragmentHomeBinding?.yearIV?.setColorFilter(\r\n                ContextCompat.getColor(\r\n                    it,\r\n                    R.color.grey\r\n                ), android.graphics.PorterDuff.Mode.SRC_IN\r\n            )\r\n            fragmentHomeBinding?.monthIV?.setColorFilter(\r\n                ContextCompat.getColor(\r\n                    it,\r\n                    R.color.grey\r\n                ), android.graphics.PorterDuff.Mode.SRC_IN\r\n            )\r\n            fragmentHomeBinding?.weekIV?.setColorFilter(\r\n                ContextCompat.getColor(\r\n                    it,\r\n                    R.color.theme_color\r\n                ), android.graphics.PorterDuff.Mode.SRC_IN\r\n            )\r\n            fragmentHomeBinding?.dayIV?.setColorFilter(\r\n                ContextCompat.getColor(\r\n                    it,\r\n                    R.color.grey\r\n                ), android.graphics.PorterDuff.Mode.SRC_IN\r\n            )\r\n            requireActivity().config.storedView = WEEKLY_VIEW\r\n            updateViewPager()\r\n        }\r\n    }\r\n\r\n    fun dayChanges() {\r\n        activity?.let {\r\n            fragmentHomeBinding?.yearIV?.setColorFilter(\r\n                ContextCompat.getColor(\r\n                    it,\r\n                    R.color.grey\r\n                ), android.graphics.PorterDuff.Mode.SRC_IN\r\n            )\r\n            fragmentHomeBinding?.monthIV?.setColorFilter(\r\n                ContextCompat.getColor(\r\n                    it,\r\n                    R.color.grey\r\n                ), android.graphics.PorterDuff.Mode.SRC_IN\r\n            )\r\n            fragmentHomeBinding?.weekIV?.setColorFilter(\r\n                ContextCompat.getColor(\r\n                    it,\r\n                    R.color.grey\r\n                ), android.graphics.PorterDuff.Mode.SRC_IN\r\n            )\r\n            fragmentHomeBinding?.dayIV?.setColorFilter(\r\n                ContextCompat.getColor(\r\n                    it,\r\n                    R.color.theme_color\r\n                ), android.graphics.PorterDuff.Mode.SRC_IN\r\n            )\r\n            requireActivity().config.storedView = DAILY_VIEW\r\n            updateViewPager()\r\n        }\r\n    }\r\n\r\n    override fun onClick(v: View?) {\r\n        when (v?.id) {\r\n            R.id.yearIV -> {\r\n                yearChanges()\r\n                requireActivity().config.storedView = YEARLY_VIEW\r\n                updateViewPager()\r\n            }\r\n            R.id.monthIV -> {\r\n                monthChanges()\r\n                requireActivity().config.storedView = MONTHLY_VIEW\r\n                updateViewPager()\r\n            }\r\n            R.id.weekIV -> {\r\n                weekChanges()\r\n                requireActivity().config.storedView = WEEKLY_VIEW\r\n                updateViewPager()\r\n            }\r\n            R.id.dayIV -> {\r\n                dayChanges()\r\n                requireActivity().config.storedView = DAILY_VIEW\r\n                updateViewPager()\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/daily/events/calender/Fragment/Home/HomeFragment.kt	(revision bb4a732c06b2d4ae313f7cb7d6b22f16dee5bf89)
+++ app/src/main/java/com/daily/events/calender/Fragment/Home/HomeFragment.kt	(date 1633665777388)
@@ -71,7 +71,11 @@
     fun updateViewPager(dayCode: String? = Formatter.getTodayCode()) {
 
         val fragment = getFragmentsHolder()
-        MainActivity.mainBinding?.today?.setOnClickListener { fragment.goToToday() }
+        MainActivity.mainBinding?.today?.setOnClickListener {
+            if (MainActivity.mainBinding!!.navigationDrawer.isDrawerOpen)
+                MainActivity.mainBinding!!.navigationDrawer.closeDrawer()
+            fragment.goToToday()
+        }
         val bundle = Bundle()
 
         if (requireActivity().config.storedView == MONTHLY_VIEW ||
