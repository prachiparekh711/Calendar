Index: app/src/main/res/layout/dialog_repeat_limit_type_picker.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<ScrollView xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:id=\"@+id/dialog_repeat_type_picker_holder\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"wrap_content\">\r\n\r\n    <RadioGroup\r\n        android:id=\"@+id/dialog_radio_view\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:padding=\"@dimen/activity_margin\">\r\n\r\n        <com.simplemobiletools.commons.views.MyCompatRadioButton\r\n            android:id=\"@+id/repeat_type_till_date\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:text=\"@string/repeat_till_date\" />\r\n\r\n        <com.simplemobiletools.commons.views.MyTextView\r\n            android:id=\"@+id/repeat_type_date\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_marginStart=\"@dimen/repeat_type_margin_start\"\r\n            android:layout_marginLeft=\"@dimen/repeat_type_margin_start\"\r\n            android:paddingTop=\"@dimen/medium_margin\"\r\n            android:paddingBottom=\"@dimen/normal_margin\"\r\n            tools:text=\"January 1 1970\" />\r\n\r\n        <com.simplemobiletools.commons.views.MyCompatRadioButton\r\n            android:id=\"@+id/repeat_type_x_times\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_marginTop=\"@dimen/small_margin\"\r\n            android:text=\"@string/stop_repeating_after_x\" />\r\n\r\n        <com.simplemobiletools.commons.views.MyEditText\r\n            android:id=\"@+id/repeat_type_count\"\r\n            android:layout_width=\"100dp\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_marginStart=\"@dimen/repeat_type_margin_start\"\r\n            android:layout_marginLeft=\"@dimen/repeat_type_margin_start\"\r\n            android:inputType=\"number\"\r\n            android:maxLength=\"5\"\r\n            android:textSize=\"@dimen/normal_text_size\" />\r\n\r\n        <com.simplemobiletools.commons.views.MyCompatRadioButton\r\n            android:id=\"@+id/repeat_type_forever\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_marginTop=\"@dimen/medium_margin\"\r\n            android:text=\"@string/repeat_forever\" />\r\n\r\n    </RadioGroup>\r\n</ScrollView>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/dialog_repeat_limit_type_picker.xml	(revision 1709be0c772bd853ba3d7f44f72d3d326dff9cc8)
+++ app/src/main/res/layout/dialog_repeat_limit_type_picker.xml	(date 1632465438798)
@@ -15,9 +15,13 @@
             android:id="@+id/repeat_type_till_date"
             android:layout_width="match_parent"
             android:layout_height="wrap_content"
+            android:fontFamily="@font/roboto"
+            android:layoutDirection="rtl"
+            android:textColor="@color/md_grey_black_dark"
+            android:textSize="@dimen/_12sdp"
             android:text="@string/repeat_till_date" />
 
-        <com.simplemobiletools.commons.views.MyTextView
+        <TextView
             android:id="@+id/repeat_type_date"
             android:layout_width="match_parent"
             android:layout_height="wrap_content"
@@ -25,6 +29,9 @@
             android:layout_marginLeft="@dimen/repeat_type_margin_start"
             android:paddingTop="@dimen/medium_margin"
             android:paddingBottom="@dimen/normal_margin"
+            android:fontFamily="@font/roboto"
+            android:textColor="@color/md_grey_black_dark"
+            android:textSize="@dimen/_10sdp"
             tools:text="January 1 1970" />
 
         <com.simplemobiletools.commons.views.MyCompatRadioButton
@@ -32,6 +39,10 @@
             android:layout_width="match_parent"
             android:layout_height="wrap_content"
             android:layout_marginTop="@dimen/small_margin"
+            android:fontFamily="@font/roboto"
+            android:layoutDirection="rtl"
+            android:textColor="@color/md_grey_black_dark"
+            android:textSize="@dimen/_12sdp"
             android:text="@string/stop_repeating_after_x" />
 
         <com.simplemobiletools.commons.views.MyEditText
@@ -42,6 +53,7 @@
             android:layout_marginLeft="@dimen/repeat_type_margin_start"
             android:inputType="number"
             android:maxLength="5"
+            android:backgroundTint="@color/theme_color"
             android:textSize="@dimen/normal_text_size" />
 
         <com.simplemobiletools.commons.views.MyCompatRadioButton
@@ -49,6 +61,10 @@
             android:layout_width="match_parent"
             android:layout_height="wrap_content"
             android:layout_marginTop="@dimen/medium_margin"
+            android:fontFamily="@font/roboto"
+            android:layoutDirection="rtl"
+            android:textColor="@color/md_grey_black_dark"
+            android:textSize="@dimen/_12sdp"
             android:text="@string/repeat_forever" />
 
     </RadioGroup>
Index: commons/src/main/kotlin/com/simplemobiletools/commons/views/MyCompatRadioButton.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.simplemobiletools.commons.views\r\n\r\nimport android.content.Context\r\nimport android.content.res.ColorStateList\r\nimport android.util.AttributeSet\r\nimport androidx.appcompat.widget.AppCompatRadioButton\r\nimport com.simplemobiletools.commons.R\r\n\r\nclass MyCompatRadioButton : AppCompatRadioButton {\r\n    constructor(context: Context) : super(context)\r\n\r\n    constructor(context: Context, attrs: AttributeSet) : super(context, attrs)\r\n\r\n    constructor(context: Context, attrs: AttributeSet, defStyle: Int) : super(\r\n        context,\r\n        attrs,\r\n        defStyle\r\n    )\r\n\r\n    fun setColors(textColor: Int, accentColor: Int, backgroundColor: Int) {\r\n        setTextColor(textColor)\r\n        val colorStateList = ColorStateList(\r\n            arrayOf(\r\n                intArrayOf(-android.R.attr.state_checked),\r\n                intArrayOf(android.R.attr.state_checked)\r\n            ),\r\n            intArrayOf(context.resources.getColor(R.color.radiobutton_disabled), accentColor)\r\n        )\r\n        supportButtonTintList = colorStateList\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- commons/src/main/kotlin/com/simplemobiletools/commons/views/MyCompatRadioButton.kt	(revision 1709be0c772bd853ba3d7f44f72d3d326dff9cc8)
+++ commons/src/main/kotlin/com/simplemobiletools/commons/views/MyCompatRadioButton.kt	(date 1632461254897)
@@ -18,13 +18,13 @@
     )
 
     fun setColors(textColor: Int, accentColor: Int, backgroundColor: Int) {
-        setTextColor(textColor)
+        setTextColor(context.resources.getColor(R.color.md_grey_black_dark))
         val colorStateList = ColorStateList(
             arrayOf(
                 intArrayOf(-android.R.attr.state_checked),
                 intArrayOf(android.R.attr.state_checked)
             ),
-            intArrayOf(context.resources.getColor(R.color.radiobutton_disabled), accentColor)
+            intArrayOf(context.resources.getColor(R.color.radiobutton_disabled), context.resources.getColor(R.color.theme_color))
         )
         supportButtonTintList = colorStateList
     }
Index: app/src/main/res/layout/activity_event.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<androidx.coordinatorlayout.widget.CoordinatorLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    android:background=\"@color/white\">\r\n\r\n    <ScrollView\r\n        android:id=\"@+id/event_scrollview\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\">\r\n\r\n        <LinearLayout\r\n            android:id=\"@+id/event_holder\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_margin=\"16dp\"\r\n            android:orientation=\"vertical\">\r\n\r\n\r\n            <RelativeLayout\r\n                android:id=\"@+id/topRL\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\">\r\n\r\n                <ImageView\r\n                    android:id=\"@+id/back\"\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_centerVertical=\"true\"\r\n                    android:src=\"@drawable/ic_back\" />\r\n\r\n                <TextView\r\n                    android:id=\"@+id/title\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_marginLeft=\"@dimen/_10sdp\"\r\n                    android:layout_toRightOf=\"@id/back\"\r\n                    android:fontFamily=\"@font/plusjakarta\"\r\n                    android:text=\"Add new event\"\r\n                    android:textColor=\"@color/black\"\r\n                    android:textSize=\"@dimen/_15sdp\" />\r\n            </RelativeLayout>\r\n\r\n            <TextView\r\n                android:id=\"@+id/event_title\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"@dimen/_35sdp\"\r\n                android:layout_below=\"@id/topRL\"\r\n                android:layout_marginTop=\"@dimen/_10sdp\"\r\n                android:background=\"@drawable/open_with_card\"\r\n                android:fontFamily=\"@font/plusjakarta\"\r\n                android:gravity=\"center_vertical\"\r\n                android:hint=\"@string/title\"\r\n                android:maxLength=\"180\"\r\n                android:maxLines=\"1\"\r\n                android:minEms=\"20\"\r\n                android:paddingLeft=\"@dimen/_10sdp\"\r\n                android:textColorHint=\"@color/hint_color\"\r\n                android:textCursorDrawable=\"@null\"\r\n                android:textSize=\"@dimen/day_text_size\" />\r\n\r\n            <TextView\r\n                android:id=\"@+id/tag\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_below=\"@id/event_title\"\r\n                android:layout_marginTop=\"@dimen/_10sdp\"\r\n                android:fontFamily=\"@font/roboto\"\r\n                android:text=\"@string/choose_tag\"\r\n                android:textColor=\"@color/black\"\r\n                android:textSize=\"@dimen/_15sdp\" />\r\n\r\n\r\n            <com.google.android.flexbox.FlexboxLayout\r\n                android:id=\"@+id/allEventTypeRL\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_below=\"@id/tag\"\r\n                android:layout_marginTop=\"@dimen/_5sdp\"\r\n                app:flexDirection=\"row\"\r\n                app:flexWrap=\"wrap\">\r\n\r\n\r\n            </com.google.android.flexbox.FlexboxLayout>\r\n\r\n            <View\r\n                android:id=\"@+id/event_description_divider\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"1px\"\r\n                android:layout_below=\"@+id/allEventTypeRL\"\r\n                android:layout_marginTop=\"@dimen/activity_margin\"\r\n                android:layout_marginBottom=\"@dimen/normal_margin\"\r\n                android:background=\"@color/divider_grey\"\r\n                android:importantForAccessibility=\"no\" />\r\n\r\n            <com.simplemobiletools.commons.views.MySwitchCompat\r\n                android:id=\"@+id/event_all_day\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_marginStart=\"@dimen/small_margin\"\r\n                android:layout_marginEnd=\"@dimen/normal_margin\"\r\n                android:paddingTop=\"@dimen/normal_margin\"\r\n                android:paddingBottom=\"@dimen/normal_margin\"\r\n                android:text=\"@string/all_day\"\r\n                android:textSize=\"@dimen/day_text_size\"\r\n                app:switchPadding=\"@dimen/small_margin\" />\r\n\r\n            <RelativeLayout\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\">\r\n\r\n                <TextView\r\n                    android:id=\"@+id/event_start_date\"\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:background=\"?attr/selectableItemBackground\"\r\n                    android:fontFamily=\"@font/roboto\"\r\n                    android:paddingTop=\"@dimen/activity_margin\"\r\n                    android:paddingEnd=\"@dimen/activity_margin\"\r\n                    android:paddingBottom=\"@dimen/activity_margin\"\r\n                    android:textColor=\"@color/grey\"\r\n                    android:textSize=\"@dimen/day_text_size\"\r\n                    tools:text=\"From\" />\r\n\r\n                <TextView\r\n                    android:id=\"@+id/event_start_time\"\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_alignParentEnd=\"true\"\r\n                    android:background=\"?attr/selectableItemBackground\"\r\n                    android:drawableRight=\"@drawable/ic_right_arrow\"\r\n                    android:drawablePadding=\"@dimen/_5sdp\"\r\n                    android:fontFamily=\"@font/roboto\"\r\n                    android:paddingVertical=\"@dimen/activity_margin\"\r\n                    android:textColor=\"@color/black\"\r\n                    android:textSize=\"@dimen/day_text_size\"\r\n                    tools:text=\"00:00\" />\r\n\r\n            </RelativeLayout>\r\n\r\n            <RelativeLayout\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\">\r\n\r\n                <TextView\r\n                    android:id=\"@+id/event_end_date\"\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:background=\"?attr/selectableItemBackground\"\r\n                    android:fontFamily=\"@font/roboto\"\r\n                    android:paddingTop=\"@dimen/activity_margin\"\r\n                    android:paddingEnd=\"@dimen/activity_margin\"\r\n                    android:paddingBottom=\"@dimen/activity_margin\"\r\n                    android:textColor=\"@color/grey\"\r\n                    android:textSize=\"@dimen/day_text_size\"\r\n                    tools:text=\"To\" />\r\n\r\n                <TextView\r\n                    android:id=\"@+id/event_end_time\"\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_alignParentEnd=\"true\"\r\n                    android:background=\"?attr/selectableItemBackground\"\r\n                    android:drawableRight=\"@drawable/ic_right_arrow\"\r\n                    android:drawablePadding=\"@dimen/_5sdp\"\r\n                    android:fontFamily=\"@font/roboto\"\r\n                    android:paddingVertical=\"@dimen/activity_margin\"\r\n                    android:textColor=\"@color/black\"\r\n                    android:textSize=\"@dimen/day_text_size\"\r\n                    tools:text=\"00:00\" />\r\n            </RelativeLayout>\r\n\r\n            <RelativeLayout\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\">\r\n\r\n                <TextView\r\n                    android:id=\"@+id/repeat\"\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:fontFamily=\"@font/roboto\"\r\n                    android:paddingTop=\"@dimen/activity_margin\"\r\n                    android:paddingEnd=\"@dimen/activity_margin\"\r\n                    android:paddingBottom=\"@dimen/activity_margin\"\r\n                    android:text=\"@string/repeat\"\r\n                    android:textColor=\"@color/grey\"\r\n                    android:textSize=\"@dimen/day_text_size\" />\r\n\r\n                <TextView\r\n                    android:id=\"@+id/event_repetition\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_marginStart=\"@dimen/small_margin\"\r\n                    android:layout_toRightOf=\"@id/repeat\"\r\n                    android:background=\"?attr/selectableItemBackground\"\r\n                    android:drawableRight=\"@drawable/ic_right_arrow\"\r\n                    android:drawablePadding=\"@dimen/_5sdp\"\r\n                    android:fontFamily=\"@font/roboto\"\r\n                    android:gravity=\"right\"\r\n                    android:paddingTop=\"@dimen/activity_margin\"\r\n                    android:paddingBottom=\"@dimen/activity_margin\"\r\n                    android:textColor=\"@color/black\"\r\n                    android:textSize=\"@dimen/day_text_size\"\r\n                    tools:text=\"@string/no_repetition\" />\r\n\r\n            </RelativeLayout>\r\n\r\n            <RelativeLayout\r\n                android:id=\"@+id/event_repetition_rule_holder\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_below=\"@+id/event_repetition\"\r\n                android:layout_alignStart=\"@+id/event_repetition\"\r\n                android:background=\"?attr/selectableItemBackground\"\r\n                android:visibility=\"gone\">\r\n\r\n                <com.simplemobiletools.commons.views.MyTextView\r\n                    android:id=\"@+id/event_repetition_rule_label\"\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:clickable=\"false\"\r\n                    android:fontFamily=\"@font/roboto\"\r\n                    android:paddingTop=\"@dimen/activity_margin\"\r\n                    android:paddingBottom=\"@dimen/activity_margin\"\r\n                    android:text=\"@string/repeat_on\"\r\n                    android:textColor=\"@color/grey\"\r\n                    android:textSize=\"@dimen/day_text_size\" />\r\n\r\n                <com.simplemobiletools.commons.views.MyTextView\r\n                    android:id=\"@+id/event_repetition_rule\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_alignParentEnd=\"true\"\r\n                    android:layout_toEndOf=\"@+id/event_repetition_rule_label\"\r\n                    android:clickable=\"false\"\r\n                    android:drawableRight=\"@drawable/ic_right_arrow\"\r\n                    android:drawablePadding=\"@dimen/_5sdp\"\r\n                    android:fontFamily=\"@font/roboto\"\r\n                    android:gravity=\"end\"\r\n                    android:padding=\"@dimen/activity_margin\"\r\n                    android:text=\"@string/every_day\"\r\n                    android:textColor=\"@color/black\"\r\n                    android:textSize=\"@dimen/day_text_size\" />\r\n            </RelativeLayout>\r\n\r\n            <RelativeLayout\r\n                android:id=\"@+id/event_repetition_limit_holder\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_below=\"@+id/event_repetition_rule_holder\"\r\n                android:layout_alignStart=\"@+id/event_repetition\"\r\n                android:background=\"?attr/selectableItemBackground\"\r\n                android:visibility=\"gone\">\r\n\r\n                <com.simplemobiletools.commons.views.MyTextView\r\n                    android:id=\"@+id/event_repetition_limit_label\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_toStartOf=\"@+id/event_repetition_limit\"\r\n                    android:clickable=\"false\"\r\n                    android:fontFamily=\"@font/roboto\"\r\n                    android:paddingTop=\"@dimen/activity_margin\"\r\n                    android:paddingBottom=\"@dimen/activity_margin\"\r\n                    android:text=\"@string/repeat_till\"\r\n                    android:textColor=\"@color/grey\"\r\n                    android:textSize=\"@dimen/day_text_size\" />\r\n\r\n                <com.simplemobiletools.commons.views.MyTextView\r\n                    android:id=\"@+id/event_repetition_limit\"\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_alignParentEnd=\"true\"\r\n                    android:clickable=\"false\"\r\n                    android:drawableRight=\"@drawable/ic_right_arrow\"\r\n                    android:drawablePadding=\"@dimen/_5sdp\"\r\n                    android:fontFamily=\"@font/roboto\"\r\n                    android:padding=\"@dimen/activity_margin\"\r\n                    android:text=\"@string/forever\"\r\n                    android:textColor=\"@color/black\"\r\n                    android:textSize=\"@dimen/day_text_size\" />\r\n            </RelativeLayout>\r\n\r\n            <View\r\n                android:id=\"@+id/divider1\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"1px\"\r\n                android:layout_below=\"@+id/event_repetition\"\r\n                android:layout_marginTop=\"@dimen/activity_margin\"\r\n                android:layout_marginBottom=\"@dimen/normal_margin\"\r\n                android:background=\"@color/divider_grey\"\r\n                android:importantForAccessibility=\"no\" />\r\n\r\n\r\n            <RelativeLayout\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\">\r\n\r\n                <TextView\r\n                    android:id=\"@+id/reminder\"\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:fontFamily=\"@font/roboto\"\r\n                    android:paddingTop=\"@dimen/activity_margin\"\r\n                    android:paddingEnd=\"@dimen/activity_margin\"\r\n                    android:paddingBottom=\"@dimen/activity_margin\"\r\n                    android:text=\"Reminder\"\r\n                    android:textColor=\"@color/grey\"\r\n                    android:textSize=\"@dimen/day_text_size\" />\r\n\r\n                <com.simplemobiletools.commons.views.MyTextView\r\n                    android:id=\"@+id/event_reminder_1\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_marginStart=\"@dimen/small_margin\"\r\n                    android:background=\"?attr/selectableItemBackground\"\r\n                    android:drawableRight=\"@drawable/ic_right_arrow\"\r\n                    android:drawablePadding=\"@dimen/_5sdp\"\r\n                    android:ellipsize=\"end\"\r\n                    android:fontFamily=\"@font/roboto\"\r\n                    android:gravity=\"right\"\r\n                    android:lines=\"1\"\r\n                    android:paddingTop=\"@dimen/activity_margin\"\r\n                    android:paddingEnd=\"@dimen/activity_margin\"\r\n                    android:paddingBottom=\"@dimen/activity_margin\"\r\n                    android:textColor=\"@color/black\"\r\n                    android:textSize=\"@dimen/day_text_size\"\r\n                    tools:text=\"@string/add_another_reminder\" />\r\n            </RelativeLayout>\r\n\r\n            <View\r\n                android:id=\"@+id/divider2\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"1px\"\r\n                android:layout_below=\"@+id/event_repetition\"\r\n                android:layout_marginTop=\"@dimen/activity_margin\"\r\n                android:layout_marginBottom=\"@dimen/normal_margin\"\r\n                android:background=\"@color/divider_grey\"\r\n                android:importantForAccessibility=\"no\" />\r\n\r\n            <RelativeLayout\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\">\r\n\r\n                <TextView\r\n                    android:id=\"@+id/account\"\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:fontFamily=\"@font/roboto\"\r\n                    android:paddingTop=\"@dimen/activity_margin\"\r\n                    android:paddingEnd=\"@dimen/activity_margin\"\r\n                    android:paddingBottom=\"@dimen/activity_margin\"\r\n                    android:text=\"Account\"\r\n                    android:textColor=\"@color/grey\"\r\n                    android:textSize=\"@dimen/day_text_size\" />\r\n\r\n                <RelativeLayout\r\n                    android:id=\"@+id/event_caldav_calendar_holder\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_toRightOf=\"@id/account\"\r\n                    android:background=\"?attr/selectableItemBackground\"\r\n                    android:visibility=\"visible\">\r\n\r\n                    <com.simplemobiletools.commons.views.MyTextView\r\n                        android:id=\"@+id/event_caldav_calendar_name\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_marginRight=\"@dimen/_30sdp\"\r\n                        android:ellipsize=\"end\"\r\n                        android:gravity=\"right\"\r\n                        android:maxLines=\"1\"\r\n                        android:paddingTop=\"@dimen/medium_margin\"\r\n                        android:paddingBottom=\"@dimen/tiny_margin\"\r\n                        android:textColor=\"@color/black\"\r\n                        android:textSize=\"@dimen/day_text_size\"\r\n                        tools:text=\"My calendar\" />\r\n\r\n                    <com.simplemobiletools.commons.views.MyTextView\r\n                        android:id=\"@+id/event_caldav_calendar_email\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_below=\"@+id/event_caldav_calendar_name\"\r\n                        android:layout_marginStart=\"@dimen/small_margin\"\r\n                        android:drawableRight=\"@drawable/ic_right_arrow\"\r\n                        android:drawablePadding=\"@dimen/_5sdp\"\r\n                        android:ellipsize=\"end\"\r\n                        android:fontFamily=\"@font/roboto\"\r\n                        android:gravity=\"right\"\r\n                        android:maxLines=\"1\"\r\n                        android:paddingEnd=\"@dimen/medium_margin\"\r\n                        android:paddingBottom=\"@dimen/medium_margin\"\r\n                        android:textColor=\"@color/black\"\r\n                        android:textSize=\"@dimen/meta_text_size\"\r\n                        tools:text=\"hello@simplemobiletools.com\" />\r\n\r\n\r\n                </RelativeLayout>\r\n\r\n            </RelativeLayout>\r\n\r\n            <RelativeLayout\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\">\r\n\r\n\r\n                <TextView\r\n                    android:id=\"@+id/timeZone\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_marginStart=\"@dimen/small_margin\"\r\n                    android:background=\"?attr/selectableItemBackground\"\r\n                    android:drawableRight=\"@drawable/ic_right_arrow\"\r\n                    android:drawablePadding=\"@dimen/_5sdp\"\r\n                    android:fontFamily=\"@font/roboto\"\r\n                    android:gravity=\"right\"\r\n                    android:paddingTop=\"@dimen/activity_margin\"\r\n                    android:paddingBottom=\"@dimen/activity_margin\"\r\n                    android:textColor=\"@color/black\"\r\n                    android:textSize=\"@dimen/day_text_size\"\r\n                    tools:text=\"Gmt 5:30\" />\r\n\r\n                <TextView\r\n                    android:id=\"@+id/event_time_zone\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"@dimen/_35sdp\"\r\n                    android:layout_marginTop=\"@dimen/activity_margin\"\r\n                    android:maxLength=\"180\"\r\n                    android:maxLines=\"1\"\r\n                    android:minEms=\"20\"\r\n                    android:text=\"Time zone\"\r\n                    android:textColor=\"@color/grey\"\r\n                    android:textCursorDrawable=\"@null\"\r\n                    android:textSize=\"@dimen/day_text_size\" />\r\n\r\n            </RelativeLayout>\r\n\r\n            <RelativeLayout\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:background=\"#F6F8FB\">\r\n\r\n                <com.simplemobiletools.commons.views.MyEditText\r\n                    android:id=\"@+id/event_location\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"@dimen/_35sdp\"\r\n                    android:layout_toStartOf=\"@+id/event_show_on_map\"\r\n                    android:background=\"@null\"\r\n                    android:hint=\"@string/location\"\r\n                    android:inputType=\"textCapWords\"\r\n                    android:maxLength=\"180\"\r\n                    android:maxLines=\"1\"\r\n                    android:minEms=\"20\"\r\n                    android:textCursorDrawable=\"@null\"\r\n                    android:textSize=\"@dimen/day_text_size\" />\r\n\r\n                <ImageView\r\n                    android:id=\"@+id/event_show_on_map\"\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_alignTop=\"@+id/event_location\"\r\n                    android:layout_alignBottom=\"@+id/event_location\"\r\n                    android:layout_alignParentEnd=\"true\"\r\n                    android:layout_marginEnd=\"@dimen/activity_margin\"\r\n                    android:src=\"@drawable/ic_place_vector\"\r\n                    app:tint=\"@color/theme_color\" />\r\n            </RelativeLayout>\r\n\r\n            <com.simplemobiletools.commons.views.MyEditText\r\n                android:id=\"@+id/event_description\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"@dimen/_35sdp\"\r\n                android:layout_marginTop=\"@dimen/activity_margin\"\r\n                android:autoLink=\"all\"\r\n                android:background=\"#F6F8FB\"\r\n                android:gravity=\"center_vertical\"\r\n                android:hint=\"@string/description\"\r\n                android:inputType=\"textCapSentences|textMultiLine\"\r\n                android:linksClickable=\"true\"\r\n                android:minEms=\"20\"\r\n                android:textCursorDrawable=\"@null\"\r\n                android:textSize=\"@dimen/day_text_size\" />\r\n        </LinearLayout>\r\n    </ScrollView>\r\n</androidx.coordinatorlayout.widget.CoordinatorLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/activity_event.xml	(revision 1709be0c772bd853ba3d7f44f72d3d326dff9cc8)
+++ app/src/main/res/layout/activity_event.xml	(date 1632467369483)
@@ -211,12 +211,9 @@
                 android:id="@+id/event_repetition_rule_holder"
                 android:layout_width="match_parent"
                 android:layout_height="wrap_content"
-                android:layout_below="@+id/event_repetition"
-                android:layout_alignStart="@+id/event_repetition"
-                android:background="?attr/selectableItemBackground"
                 android:visibility="gone">
 
-                <com.simplemobiletools.commons.views.MyTextView
+                <TextView
                     android:id="@+id/event_repetition_rule_label"
                     android:layout_width="wrap_content"
                     android:layout_height="wrap_content"
@@ -228,7 +225,7 @@
                     android:textColor="@color/grey"
                     android:textSize="@dimen/day_text_size" />
 
-                <com.simplemobiletools.commons.views.MyTextView
+                <TextView
                     android:id="@+id/event_repetition_rule"
                     android:layout_width="match_parent"
                     android:layout_height="wrap_content"
@@ -239,8 +236,9 @@
                     android:drawablePadding="@dimen/_5sdp"
                     android:fontFamily="@font/roboto"
                     android:gravity="end"
-                    android:padding="@dimen/activity_margin"
                     android:text="@string/every_day"
+                    android:paddingTop="@dimen/activity_margin"
+                    android:paddingBottom="@dimen/activity_margin"
                     android:textColor="@color/black"
                     android:textSize="@dimen/day_text_size" />
             </RelativeLayout>
@@ -249,12 +247,9 @@
                 android:id="@+id/event_repetition_limit_holder"
                 android:layout_width="match_parent"
                 android:layout_height="wrap_content"
-                android:layout_below="@+id/event_repetition_rule_holder"
-                android:layout_alignStart="@+id/event_repetition"
-                android:background="?attr/selectableItemBackground"
                 android:visibility="gone">
 
-                <com.simplemobiletools.commons.views.MyTextView
+                <TextView
                     android:id="@+id/event_repetition_limit_label"
                     android:layout_width="match_parent"
                     android:layout_height="wrap_content"
@@ -267,7 +262,7 @@
                     android:textColor="@color/grey"
                     android:textSize="@dimen/day_text_size" />
 
-                <com.simplemobiletools.commons.views.MyTextView
+                <TextView
                     android:id="@+id/event_repetition_limit"
                     android:layout_width="wrap_content"
                     android:layout_height="wrap_content"
@@ -276,7 +271,8 @@
                     android:drawableRight="@drawable/ic_right_arrow"
                     android:drawablePadding="@dimen/_5sdp"
                     android:fontFamily="@font/roboto"
-                    android:padding="@dimen/activity_margin"
+                    android:paddingTop="@dimen/activity_margin"
+                    android:paddingBottom="@dimen/activity_margin"
                     android:text="@string/forever"
                     android:textColor="@color/black"
                     android:textSize="@dimen/day_text_size" />
@@ -285,10 +281,9 @@
             <View
                 android:id="@+id/divider1"
                 android:layout_width="match_parent"
-                android:layout_height="1px"
+                android:layout_height="2px"
                 android:layout_below="@+id/event_repetition"
-                android:layout_marginTop="@dimen/activity_margin"
-                android:layout_marginBottom="@dimen/normal_margin"
+                android:layout_marginVertical="@dimen/_8sdp"
                 android:background="@color/divider_grey"
                 android:importantForAccessibility="no" />
 
@@ -309,12 +304,11 @@
                     android:textColor="@color/grey"
                     android:textSize="@dimen/day_text_size" />
 
-                <com.simplemobiletools.commons.views.MyTextView
+                <TextView
                     android:id="@+id/event_reminder_1"
                     android:layout_width="match_parent"
                     android:layout_height="wrap_content"
                     android:layout_marginStart="@dimen/small_margin"
-                    android:background="?attr/selectableItemBackground"
                     android:drawableRight="@drawable/ic_right_arrow"
                     android:drawablePadding="@dimen/_5sdp"
                     android:ellipsize="end"
@@ -322,13 +316,48 @@
                     android:gravity="right"
                     android:lines="1"
                     android:paddingTop="@dimen/activity_margin"
-                    android:paddingEnd="@dimen/activity_margin"
                     android:paddingBottom="@dimen/activity_margin"
                     android:textColor="@color/black"
                     android:textSize="@dimen/day_text_size"
                     tools:text="@string/add_another_reminder" />
             </RelativeLayout>
 
+            <TextView
+                android:id="@+id/event_reminder_2"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:ellipsize="end"
+                android:gravity="right"
+                android:lines="1"
+                android:textColor="@color/black"
+                android:drawableRight="@drawable/ic_right_arrow"
+                android:drawablePadding="@dimen/_5sdp"
+                android:paddingTop="16dp"
+                android:paddingBottom="@dimen/activity_margin"
+                android:text="@string/add_another_reminder"
+                android:textSize="@dimen/day_text_size"
+                android:visibility="gone"
+                android:fontFamily="@font/roboto"
+                tools:text="@string/add_another_reminder" />
+
+            <TextView
+                android:id="@+id/event_reminder_3"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:ellipsize="end"
+                android:gravity="right"
+                android:lines="1"
+                android:textColor="@color/black"
+                android:drawableRight="@drawable/ic_right_arrow"
+                android:drawablePadding="@dimen/_5sdp"
+                android:paddingTop="16dp"
+                android:paddingBottom="@dimen/activity_margin"
+                android:text="@string/add_another_reminder"
+                android:textSize="@dimen/day_text_size"
+                android:fontFamily="@font/roboto"
+                android:visibility="gone"
+                tools:text="@string/add_another_reminder" />
+
             <View
                 android:id="@+id/divider2"
                 android:layout_width="match_parent"
@@ -441,7 +470,7 @@
                 android:layout_height="wrap_content"
                 android:background="#F6F8FB">
 
-                <com.simplemobiletools.commons.views.MyEditText
+                <EditText
                     android:id="@+id/event_location"
                     android:layout_width="match_parent"
                     android:layout_height="@dimen/_35sdp"
@@ -467,7 +496,14 @@
                     app:tint="@color/theme_color" />
             </RelativeLayout>
 
-            <com.simplemobiletools.commons.views.MyEditText
+            <LinearLayout
+                android:id="@+id/event_attendees_holder"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:layout_marginTop="@dimen/medium_margin"
+                android:orientation="vertical" />
+
+            <EditText
                 android:id="@+id/event_description"
                 android:layout_width="match_parent"
                 android:layout_height="@dimen/_35sdp"
Index: commons/src/main/res/values/colors.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<resources>\r\n    <color name=\"color_primary\">#4285F4</color>\r\n    <color name=\"color_primary_dark\">#4285F4</color>\r\n    <color name=\"color_accent\">@color/color_primary</color>\r\n\r\n    <color name=\"pressed_item_foreground\">#08000000</color>\r\n    <color name=\"activated_item_foreground\">#44888888</color>\r\n    <color name=\"divider_grey\">#88808080</color>\r\n    <color name=\"gradient_grey_start\">#CC000000</color>\r\n    <color name=\"dark_grey\">#FF333333</color>\r\n\r\n    <color name=\"theme_color\">#4285F4</color>\r\n    <color name=\"light_theme_color\">#4D4285F4</color>\r\n    <color name=\"hint_white\">#99FFFFFF</color>\r\n    <color name=\"hint_black\">#66000000</color>\r\n\r\n    <!-- Color Customization -->\r\n    <color name=\"theme_light_text_color\">@color/md_grey_600</color>\r\n    <color name=\"theme_light_background_color\">@color/md_grey_white</color>\r\n    <color name=\"theme_dark_text_color\">@color/md_grey_200</color>\r\n    <color name=\"theme_dark_background_color\">@color/md_grey_800</color>\r\n    <color name=\"default_text_color\">@color/theme_dark_text_color</color>\r\n    <color name=\"default_background_color\">@color/theme_dark_background_color</color>\r\n    <color name=\"theme_solarized_background_color\">@color/md_indigo_900_dark</color>\r\n    <color name=\"theme_solarized_text_color\">@color/md_amber_700</color>\r\n    <color name=\"theme_solarized_primary_color\">@color/md_indigo_900</color>\r\n    <color name=\"theme_dark_red_primary_color\">@color/md_red_700</color>\r\n\r\n    <!-- SwitchCompat -->\r\n    <color name=\"thumb_deactivated\">#FFECECEC</color>\r\n    <color name=\"track_deactivated\">#FFB2B2B2</color>\r\n\r\n    <!-- Radiobutton -->\r\n    <color name=\"radiobutton_disabled\">#FF757575</color>\r\n\r\n    <!-- Primary colors -->\r\n    <color name=\"md_amber\">#FFC107</color>\r\n    <color name=\"md_blue\">#2196F3</color>\r\n    <color name=\"md_blue_grey\">#607D8B</color>\r\n    <color name=\"md_brown\">#795548</color>\r\n    <color name=\"md_cyan\">#00BCD4</color>\r\n    <color name=\"md_deep_orange\">#FF5722</color>\r\n    <color name=\"md_deep_purple\">#673AB7</color>\r\n    <color name=\"md_green\">#4CAF50</color>\r\n    <color name=\"md_grey\">#9E9E9E</color>\r\n    <color name=\"md_indigo\">#3F51B5</color>\r\n    <color name=\"md_light_blue\">#03A9F4</color>\r\n    <color name=\"md_light_green\">#8BC34A</color>\r\n    <color name=\"md_lime\">#CDDC39</color>\r\n    <color name=\"md_orange\">#FF9800</color>\r\n    <color name=\"md_pink\">#E91E63</color>\r\n    <color name=\"md_purple\">#9C27B0</color>\r\n    <color name=\"md_red\">#F44336</color>\r\n    <color name=\"md_teal\">#009688</color>\r\n    <color name=\"md_yellow\">#FFEB3B</color>\r\n\r\n    <color name=\"md_amber_100\">#FFECB3</color>\r\n    <color name=\"md_amber_200\">#FFE082</color>\r\n    <color name=\"md_amber_300\">#FFD54F</color>\r\n    <color name=\"md_amber_400\">#FFCA28</color>\r\n    <color name=\"md_amber_500\">#FFC107</color>\r\n    <color name=\"md_amber_600\">#FFB300</color>\r\n    <color name=\"md_amber_700\">#FFA000</color>\r\n    <color name=\"md_amber_800\">#FF8F00</color>\r\n    <color name=\"md_amber_900\">#FF6F00</color>\r\n\r\n    <color name=\"md_amber_100_dark\">#FFE28A</color>\r\n    <color name=\"md_amber_200_dark\">#FFD659</color>\r\n    <color name=\"md_amber_300_dark\">#FFCC26</color>\r\n    <color name=\"md_amber_400_dark\">#FFC100</color>\r\n    <color name=\"md_amber_500_dark\">#DEA700</color>\r\n    <color name=\"md_amber_600_dark\">#D79700</color>\r\n    <color name=\"md_amber_700_dark\">#D78700</color>\r\n    <color name=\"md_amber_800_dark\">#D77800</color>\r\n    <color name=\"md_amber_900_dark\">#D75D00</color>\r\n\r\n    <color name=\"md_blue_100\">#BBDEFB</color>\r\n    <color name=\"md_blue_200\">#90CAF9</color>\r\n    <color name=\"md_blue_300\">#64B5F6</color>\r\n    <color name=\"md_blue_400\">#42A5F5</color>\r\n    <color name=\"md_blue_500\">#2196F3</color>\r\n    <color name=\"md_blue_600\">#1E88E5</color>\r\n    <color name=\"md_blue_700\">#1976D2</color>\r\n    <color name=\"md_blue_800\">#1565C0</color>\r\n    <color name=\"md_blue_900\">#0D47A1</color>\r\n\r\n    <color name=\"md_blue_100_dark\">#94CCF9</color>\r\n    <color name=\"md_blue_200_dark\">#69B8F7</color>\r\n    <color name=\"md_blue_300_dark\">#3DA2F4</color>\r\n    <color name=\"md_blue_400_dark\">#1A92F3</color>\r\n    <color name=\"md_blue_500_dark\">#0B82E0</color>\r\n    <color name=\"md_blue_600_dark\">#1673C4</color>\r\n    <color name=\"md_blue_700_dark\">#1462AE</color>\r\n    <color name=\"md_blue_800_dark\">#11529B</color>\r\n    <color name=\"md_blue_900_dark\">#09367B</color>\r\n\r\n    <color name=\"md_blue_grey_100\">#CFD8DC</color>\r\n    <color name=\"md_blue_grey_200\">#B0BBC5</color>\r\n    <color name=\"md_blue_grey_300\">#90A4AE</color>\r\n    <color name=\"md_blue_grey_400\">#78909C</color>\r\n    <color name=\"md_blue_grey_500\">#607D8B</color>\r\n    <color name=\"md_blue_grey_600\">#546E7A</color>\r\n    <color name=\"md_blue_grey_700\">#455A64</color>\r\n    <color name=\"md_blue_grey_800\">#37474F</color>\r\n    <color name=\"md_blue_grey_900\">#263238</color>\r\n\r\n    <color name=\"md_blue_grey_100_dark\">#B8C5CB</color>\r\n    <color name=\"md_blue_grey_200_dark\">#99A7B4</color>\r\n    <color name=\"md_blue_grey_300_dark\">#78919D</color>\r\n    <color name=\"md_blue_grey_400_dark\">#647C88</color>\r\n    <color name=\"md_blue_grey_500_dark\">#4F6873</color>\r\n    <color name=\"md_blue_grey_600_dark\">#445962</color>\r\n    <color name=\"md_blue_grey_700_dark\">#34454C</color>\r\n    <color name=\"md_blue_grey_800_dark\">#263237</color>\r\n    <color name=\"md_blue_grey_900_dark\">#151C1F</color>\r\n\r\n    <color name=\"md_brown_100\">#D7CCC8</color>\r\n    <color name=\"md_brown_200\">#BCAAA4</color>\r\n    <color name=\"md_brown_300\">#A1887F</color>\r\n    <color name=\"md_brown_400\">#8D6E63</color>\r\n    <color name=\"md_brown_500\">#795548</color>\r\n    <color name=\"md_brown_600\">#6D4C41</color>\r\n    <color name=\"md_brown_700\">#5D4037</color>\r\n    <color name=\"md_brown_800\">#4E342E</color>\r\n    <color name=\"md_brown_900\">#3E2723</color>\r\n\r\n    <color name=\"md_brown_100_dark\">#C6B7B1</color>\r\n    <color name=\"md_brown_200_dark\">#AB958D</color>\r\n    <color name=\"md_brown_300_dark\">#8F7369</color>\r\n    <color name=\"md_brown_400_dark\">#755B52</color>\r\n    <color name=\"md_brown_500_dark\">#5F4339</color>\r\n    <color name=\"md_brown_600_dark\">#533A31</color>\r\n    <color name=\"md_brown_700_dark\">#432E28</color>\r\n    <color name=\"md_brown_800_dark\">#34231F</color>\r\n    <color name=\"md_brown_900_dark\">#241714</color>\r\n\r\n    <color name=\"md_cyan_100\">#B2EBF2</color>\r\n    <color name=\"md_cyan_200\">#80DEEA</color>\r\n    <color name=\"md_cyan_300\">#4DD0E1</color>\r\n    <color name=\"md_cyan_400\">#26C6DA</color>\r\n    <color name=\"md_cyan_500\">#00BCD4</color>\r\n    <color name=\"md_cyan_600\">#00ACC1</color>\r\n    <color name=\"md_cyan_700\">#0097A7</color>\r\n    <color name=\"md_cyan_800\">#00838F</color>\r\n    <color name=\"md_cyan_900\">#006064</color>\r\n\r\n    <color name=\"md_cyan_100_dark\">#90E3ED</color>\r\n    <color name=\"md_cyan_200_dark\">#5DD5E5</color>\r\n    <color name=\"md_cyan_300_dark\">#2AC7DB</color>\r\n    <color name=\"md_cyan_400_dark\">#1FA7B8</color>\r\n    <color name=\"md_cyan_500_dark\">#0098AB</color>\r\n    <color name=\"md_cyan_600_dark\">#008898</color>\r\n    <color name=\"md_cyan_700_dark\">#00727E</color>\r\n    <color name=\"md_cyan_800_dark\">#005E66</color>\r\n    <color name=\"md_cyan_900_dark\">#00393B</color>\r\n\r\n    <color name=\"md_deep_orange_100\">#FFCCBC</color>\r\n    <color name=\"md_deep_orange_200\">#FFAB91</color>\r\n    <color name=\"md_deep_orange_300\">#FF8A65</color>\r\n    <color name=\"md_deep_orange_400\">#FF7043</color>\r\n    <color name=\"md_deep_orange_500\">#FF5722</color>\r\n    <color name=\"md_deep_orange_600\">#F4511E</color>\r\n    <color name=\"md_deep_orange_700\">#E64A19</color>\r\n    <color name=\"md_deep_orange_800\">#D84315</color>\r\n    <color name=\"md_deep_orange_900\">#BF360C</color>\r\n\r\n    <color name=\"md_deep_orange_100_dark\">#FFAD93</color>\r\n    <color name=\"md_deep_orange_200_dark\">#FF8C68</color>\r\n    <color name=\"md_deep_orange_300_dark\">#FF6B3C</color>\r\n    <color name=\"md_deep_orange_400_dark\">#FF511A</color>\r\n    <color name=\"md_deep_orange_500_dark\">#F93C00</color>\r\n    <color name=\"md_deep_orange_600_dark\">#DF3D0A</color>\r\n    <color name=\"md_deep_orange_700_dark\">#C13E14</color>\r\n    <color name=\"md_deep_orange_800_dark\">#B33710</color>\r\n    <color name=\"md_deep_orange_900_dark\">#992B09</color>\r\n\r\n    <color name=\"md_deep_purple_100\">#D1C4E9</color>\r\n    <color name=\"md_deep_purple_200\">#B39DDB</color>\r\n    <color name=\"md_deep_purple_300\">#9575CD</color>\r\n    <color name=\"md_deep_purple_400\">#7E57C2</color>\r\n    <color name=\"md_deep_purple_500\">#673AB7</color>\r\n    <color name=\"md_deep_purple_600\">#5E35B1</color>\r\n    <color name=\"md_deep_purple_700\">#512DA8</color>\r\n    <color name=\"md_deep_purple_800\">#4527A0</color>\r\n    <color name=\"md_deep_purple_900\">#311B92</color>\r\n\r\n    <color name=\"md_deep_purple_100_dark\">#BAA6DE</color>\r\n    <color name=\"md_deep_purple_200_dark\">#9C7FD0</color>\r\n    <color name=\"md_deep_purple_300_dark\">#7E56C2</color>\r\n    <color name=\"md_deep_purple_400_dark\">#693FB0</color>\r\n    <color name=\"md_deep_purple_500_dark\">#563098</color>\r\n    <color name=\"md_deep_purple_600_dark\">#4E2B92</color>\r\n    <color name=\"md_deep_purple_700_dark\">#412488</color>\r\n    <color name=\"md_deep_purple_800_dark\">#371F7F</color>\r\n    <color name=\"md_deep_purple_900_dark\">#251470</color>\r\n\r\n    <color name=\"md_green_100\">#C8E6C9</color>\r\n    <color name=\"md_green_200\">#A5D6A7</color>\r\n    <color name=\"md_green_300\">#81C784</color>\r\n    <color name=\"md_green_400\">#66BB6A</color>\r\n    <color name=\"md_green_500\">#4CAF50</color>\r\n    <color name=\"md_green_600\">#43A047</color>\r\n    <color name=\"md_green_700\">#388E3C</color>\r\n    <color name=\"md_green_800\">#2E7D32</color>\r\n    <color name=\"md_green_900\">#1B5E20</color>\r\n\r\n    <color name=\"md_green_100_dark\">#ACDAAE</color>\r\n    <color name=\"md_green_200_dark\">#89CA8D</color>\r\n    <color name=\"md_green_300_dark\">#65BB69</color>\r\n    <color name=\"md_green_400_dark\">#4CAC51</color>\r\n    <color name=\"md_green_500_dark\">#409343</color>\r\n    <color name=\"md_green_600_dark\">#37833A</color>\r\n    <color name=\"md_green_700_dark\">#2C7130</color>\r\n    <color name=\"md_green_800_dark\">#235F26</color>\r\n    <color name=\"md_green_900_dark\">#113E15</color>\r\n\r\n    <color name=\"md_grey_white\">#FFFFFF</color>\r\n    <color name=\"md_grey_200\">#EEEEEE</color>\r\n    <color name=\"md_grey_300\">#E0E0E0</color>\r\n    <color name=\"md_grey_400\">#BDBDBD</color>\r\n    <color name=\"md_grey_500\">#9E9E9E</color>\r\n    <color name=\"md_grey_600\">#757575</color>\r\n    <color name=\"md_grey_700\">#616161</color>\r\n    <color name=\"md_grey_800\">#424242</color>\r\n    <color name=\"md_grey_black\">#000000</color>\r\n\r\n    <color name=\"md_grey_white_dark\">#DFDFDF</color>\r\n    <color name=\"md_grey_200_dark\">#DADADA</color>\r\n    <color name=\"md_grey_300_dark\">#CCCCCC</color>\r\n    <color name=\"md_grey_400_dark\">#A9A9A9</color>\r\n    <color name=\"md_grey_500_dark\">#8A8A8A</color>\r\n    <color name=\"md_grey_600_dark\">#606060</color>\r\n    <color name=\"md_grey_700_dark\">#4C4C4C</color>\r\n    <color name=\"md_grey_800_dark\">#2D2D2D</color>\r\n    <color name=\"md_grey_black_dark\">#000000</color>\r\n\r\n    <color name=\"md_indigo_100\">#C5CAE9</color>\r\n    <color name=\"md_indigo_200\">#9FA8DA</color>\r\n    <color name=\"md_indigo_300\">#7986CB</color>\r\n    <color name=\"md_indigo_400\">#5C6BC0</color>\r\n    <color name=\"md_indigo_500\">#3F51B5</color>\r\n    <color name=\"md_indigo_600\">#3949AB</color>\r\n    <color name=\"md_indigo_700\">#303F9F</color>\r\n    <color name=\"md_indigo_800\">#283593</color>\r\n    <color name=\"md_indigo_900\">#1A237E</color>\r\n\r\n    <color name=\"md_indigo_100_dark\">#A8AFDE</color>\r\n    <color name=\"md_indigo_200_dark\">#828ECF</color>\r\n    <color name=\"md_indigo_300_dark\">#5B6CC0</color>\r\n    <color name=\"md_indigo_400_dark\">#4354B0</color>\r\n    <color name=\"md_indigo_500_dark\">#344497</color>\r\n    <color name=\"md_indigo_600_dark\">#2E3C8C</color>\r\n    <color name=\"md_indigo_700_dark\">#263380</color>\r\n    <color name=\"md_indigo_800_dark\">#1F2973</color>\r\n    <color name=\"md_indigo_900_dark\">#12195C</color>\r\n\r\n    <color name=\"md_light_blue_100\">#B3E5FC</color>\r\n    <color name=\"md_light_blue_200\">#81D4fA</color>\r\n    <color name=\"md_light_blue_300\">#4fC3F7</color>\r\n    <color name=\"md_light_blue_400\">#29B6FC</color>\r\n    <color name=\"md_light_blue_500\">#03A9F4</color>\r\n    <color name=\"md_light_blue_600\">#039BE5</color>\r\n    <color name=\"md_light_blue_700\">#0288D1</color>\r\n    <color name=\"md_light_blue_800\">#0277BD</color>\r\n    <color name=\"md_light_blue_900\">#01579B</color>\r\n\r\n    <color name=\"md_light_blue_100_dark\">#8BD8FB</color>\r\n    <color name=\"md_light_blue_200_dark\">#59C7F9</color>\r\n    <color name=\"md_light_blue_300_dark\">#27B6F6</color>\r\n    <color name=\"md_light_blue_400_dark\">#02A7F9</color>\r\n    <color name=\"md_light_blue_500_dark\">#028DCC</color>\r\n    <color name=\"md_light_blue_600_dark\">#0280BD</color>\r\n    <color name=\"md_light_blue_700_dark\">#016EA9</color>\r\n    <color name=\"md_light_blue_800_dark\">#015E95</color>\r\n    <color name=\"md_light_blue_900_dark\">#004072</color>\r\n\r\n    <color name=\"md_light_green_100\">#DCEDC8</color>\r\n    <color name=\"md_light_green_200\">#C5E1A5</color>\r\n    <color name=\"md_light_green_300\">#AED581</color>\r\n    <color name=\"md_light_green_400\">#9CCC65</color>\r\n    <color name=\"md_light_green_500\">#8BC34A</color>\r\n    <color name=\"md_light_green_600\">#7CB342</color>\r\n    <color name=\"md_light_green_700\">#689F38</color>\r\n    <color name=\"md_light_green_800\">#558B2F</color>\r\n    <color name=\"md_light_green_900\">#33691E</color>\r\n\r\n    <color name=\"md_light_green_100_dark\">#C9E3A9</color>\r\n    <color name=\"md_light_green_200_dark\">#B2D787</color>\r\n    <color name=\"md_light_green_300_dark\">#9BCB62</color>\r\n    <color name=\"md_light_green_400_dark\">#89C246</color>\r\n    <color name=\"md_light_green_500_dark\">#76AC38</color>\r\n    <color name=\"md_light_green_600_dark\">#679537</color>\r\n    <color name=\"md_light_green_700_dark\">#54812D</color>\r\n    <color name=\"md_light_green_800_dark\">#426C24</color>\r\n    <color name=\"md_light_green_900_dark\">#234915</color>\r\n\r\n    <color name=\"md_lime_100\">#F0F4C3</color>\r\n    <color name=\"md_lime_200\">#E6EE9C</color>\r\n    <color name=\"md_lime_300\">#DCE775</color>\r\n    <color name=\"md_lime_400\">#D4E157</color>\r\n    <color name=\"md_lime_500\">#CDDC39</color>\r\n    <color name=\"md_lime_600\">#C0CA33</color>\r\n    <color name=\"md_lime_700\">#A4B42B</color>\r\n    <color name=\"md_lime_800\">#9E9D24</color>\r\n    <color name=\"md_lime_900\">#827717</color>\r\n\r\n    <color name=\"md_lime_100_dark\">#E8EEA0</color>\r\n    <color name=\"md_lime_200_dark\">#DEE879</color>\r\n    <color name=\"md_lime_300_dark\">#D3E152</color>\r\n    <color name=\"md_lime_400_dark\">#CBDB34</color>\r\n    <color name=\"md_lime_500_dark\">#BAC923</color>\r\n    <color name=\"md_lime_600_dark\">#A2AA2A</color>\r\n    <color name=\"md_lime_700_dark\">#869323</color>\r\n    <color name=\"md_lime_800_dark\">#7D7D1C</color>\r\n    <color name=\"md_lime_900_dark\">#5F5710</color>\r\n\r\n    <color name=\"md_orange_100\">#FFE0B2</color>\r\n    <color name=\"md_orange_200\">#FFCC80</color>\r\n    <color name=\"md_orange_300\">#FFB74D</color>\r\n    <color name=\"md_orange_400\">#FFA726</color>\r\n    <color name=\"md_orange_500\">#FF9800</color>\r\n    <color name=\"md_orange_600\">#FB8C00</color>\r\n    <color name=\"md_orange_700\">#F57C00</color>\r\n    <color name=\"md_orange_800\">#EF6C00</color>\r\n    <color name=\"md_orange_900\">#E65100</color>\r\n\r\n    <color name=\"md_orange_100_dark\">#FFD089</color>\r\n    <color name=\"md_orange_200_dark\">#FFBC57</color>\r\n    <color name=\"md_orange_300_dark\">#FFA724</color>\r\n    <color name=\"md_orange_400_dark\">#FD9600</color>\r\n    <color name=\"md_orange_500_dark\">#D78000</color>\r\n    <color name=\"md_orange_600_dark\">#D37600</color>\r\n    <color name=\"md_orange_700_dark\">#CD6800</color>\r\n    <color name=\"md_orange_800_dark\">#C65A00</color>\r\n    <color name=\"md_orange_900_dark\">#BD4200</color>\r\n\r\n    <color name=\"md_pink_100\">#F8BBD0</color>\r\n    <color name=\"md_pink_200\">#F48FB1</color>\r\n    <color name=\"md_pink_300\">#F06292</color>\r\n    <color name=\"md_pink_400\">#EC407A</color>\r\n    <color name=\"md_pink_500\">#E91E63</color>\r\n    <color name=\"md_pink_600\">#D81B60</color>\r\n    <color name=\"md_pink_700\">#C2185B</color>\r\n    <color name=\"md_pink_800\">#AD1457</color>\r\n    <color name=\"md_pink_900\">#880E4F</color>\r\n\r\n    <color name=\"md_pink_100_dark\">#F596B7</color>\r\n    <color name=\"md_pink_200_dark\">#F16998</color>\r\n    <color name=\"md_pink_300_dark\">#ED3C78</color>\r\n    <color name=\"md_pink_400_dark\">#E91A60</color>\r\n    <color name=\"md_pink_500_dark\">#CB1352</color>\r\n    <color name=\"md_pink_600_dark\">#B4154F</color>\r\n    <color name=\"md_pink_700_dark\">#9E134A</color>\r\n    <color name=\"md_pink_800_dark\">#880F44</color>\r\n    <color name=\"md_pink_900_dark\">#630A3A</color>\r\n\r\n    <color name=\"md_purple_100\">#E1BEE7</color>\r\n    <color name=\"md_purple_200\">#CE93D8</color>\r\n    <color name=\"md_purple_300\">#BA68C8</color>\r\n    <color name=\"md_purple_400\">#AB47BC</color>\r\n    <color name=\"md_purple_500\">#9C27B0</color>\r\n    <color name=\"md_purple_600\">#8E24AA</color>\r\n    <color name=\"md_purple_700\">#7B1FA2</color>\r\n    <color name=\"md_purple_800\">#6A1B9A</color>\r\n    <color name=\"md_purple_900\">#4A148C</color>\r\n\r\n    <color name=\"md_purple_100_dark\">#D3A0DC</color>\r\n    <color name=\"md_purple_200_dark\">#C175CD</color>\r\n    <color name=\"md_purple_300_dark\">#AC4ABD</color>\r\n    <color name=\"md_purple_400_dark\">#913AA0</color>\r\n    <color name=\"md_purple_500_dark\">#7F1F8F</color>\r\n    <color name=\"md_purple_600_dark\">#711C88</color>\r\n    <color name=\"md_purple_700_dark\">#611880</color>\r\n    <color name=\"md_purple_800_dark\">#521477</color>\r\n    <color name=\"md_purple_900_dark\">#370E68</color>\r\n\r\n    <color name=\"md_red_100\">#FFCDD2</color>\r\n    <color name=\"md_red_200\">#EF9A9A</color>\r\n    <color name=\"md_red_300\">#E57373</color>\r\n    <color name=\"md_red_400\">#EF5350</color>\r\n    <color name=\"md_red_500\">#F44336</color>\r\n    <color name=\"md_red_600\">#E53935</color>\r\n    <color name=\"md_red_700\">#D32F2F</color>\r\n    <color name=\"md_red_800\">#C62828</color>\r\n    <color name=\"md_red_900\">#B71C1C</color>\r\n\r\n    <color name=\"md_red_100_dark\">#FFA4AE</color>\r\n    <color name=\"md_red_200_dark\">#EA7777</color>\r\n    <color name=\"md_red_300_dark\">#DF5050</color>\r\n    <color name=\"md_red_400_dark\">#EC2E2A</color>\r\n    <color name=\"md_red_500_dark\">#F21F0F</color>\r\n    <color name=\"md_red_600_dark\">#D61F1A</color>\r\n    <color name=\"md_red_700_dark\">#B32525</color>\r\n    <color name=\"md_red_800_dark\">#A42020</color>\r\n    <color name=\"md_red_900_dark\">#941616</color>\r\n\r\n    <color name=\"md_teal_100\">#B2DFDB</color>\r\n    <color name=\"md_teal_200\">#80CBC4</color>\r\n    <color name=\"md_teal_300\">#4DB6AC</color>\r\n    <color name=\"md_teal_400\">#26A69A</color>\r\n    <color name=\"md_teal_500\">#009688</color>\r\n    <color name=\"md_teal_600\">#00897B</color>\r\n    <color name=\"md_teal_700\">#00796B</color>\r\n    <color name=\"md_teal_800\">#00695C</color>\r\n    <color name=\"md_teal_900\">#004D40</color>\r\n\r\n    <color name=\"md_teal_100_dark\">#95D3CE</color>\r\n    <color name=\"md_teal_200_dark\">#63BFB7</color>\r\n    <color name=\"md_teal_300_dark\">#3F9B92</color>\r\n    <color name=\"md_teal_400_dark\">#1E857C</color>\r\n    <color name=\"md_teal_500_dark\">#006D63</color>\r\n    <color name=\"md_teal_600_dark\">#006056</color>\r\n    <color name=\"md_teal_700_dark\">#005047</color>\r\n    <color name=\"md_teal_800_dark\">#004038</color>\r\n    <color name=\"md_teal_900_dark\">#00241E</color>\r\n\r\n    <color name=\"md_yellow_100\">#FFF9C4</color>\r\n    <color name=\"md_yellow_200\">#FFF590</color>\r\n    <color name=\"md_yellow_300\">#FFF176</color>\r\n    <color name=\"md_yellow_400\">#FFEE58</color>\r\n    <color name=\"md_yellow_500\">#FFEB3B</color>\r\n    <color name=\"md_yellow_600\">#FDD835</color>\r\n    <color name=\"md_yellow_700\">#FBC02D</color>\r\n    <color name=\"md_yellow_800\">#F9A825</color>\r\n    <color name=\"md_yellow_900\">#F57F17</color>\r\n\r\n    <color name=\"md_yellow_100_dark\">#FFF59B</color>\r\n    <color name=\"md_yellow_200_dark\">#FFF267</color>\r\n    <color name=\"md_yellow_300_dark\">#FFED4D</color>\r\n    <color name=\"md_yellow_400_dark\">#FFEA2F</color>\r\n    <color name=\"md_yellow_500_dark\">#FFE712</color>\r\n    <color name=\"md_yellow_600_dark\">#FDD10B</color>\r\n    <color name=\"md_yellow_700_dark\">#FBB504</color>\r\n    <color name=\"md_yellow_800_dark\">#EF9606</color>\r\n    <color name=\"md_yellow_900_dark\">#DA6B09</color>\r\n\r\n</resources>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- commons/src/main/res/values/colors.xml	(revision 1709be0c772bd853ba3d7f44f72d3d326dff9cc8)
+++ commons/src/main/res/values/colors.xml	(date 1632467213040)
@@ -33,6 +33,7 @@
 
     <!-- Radiobutton -->
     <color name="radiobutton_disabled">#FF757575</color>
+    <color name="grey">#FF757575</color>
 
     <!-- Primary colors -->
     <color name="md_amber">#FFC107</color>
Index: app/src/main/java/com/daily/events/calender/Activity/EventActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.daily.events.calender.Activity\r\n\r\nimport android.app.Activity\r\nimport android.app.DatePickerDialog\r\nimport android.app.TimePickerDialog\r\nimport android.content.Intent\r\nimport android.content.res.ColorStateList\r\nimport android.graphics.Color\r\nimport android.graphics.drawable.BitmapDrawable\r\nimport android.graphics.drawable.Drawable\r\nimport android.graphics.drawable.LayerDrawable\r\nimport android.net.Uri\r\nimport android.os.Bundle\r\nimport android.provider.CalendarContract.Attendees\r\nimport android.provider.ContactsContract.CommonDataKinds\r\nimport android.provider.ContactsContract.CommonDataKinds.StructuredName\r\nimport android.provider.ContactsContract.Data\r\nimport android.text.TextUtils\r\nimport android.text.method.LinkMovementMethod\r\nimport android.view.*\r\nimport android.view.inputmethod.EditorInfo\r\nimport android.widget.*\r\nimport androidx.core.app.NotificationManagerCompat\r\nimport com.daily.events.calender.Adapter.AutoCompleteTextViewAdapter\r\nimport com.daily.events.calender.Extensions.*\r\nimport com.daily.events.calender.Model.*\r\nimport com.daily.events.calender.R\r\nimport com.daily.events.calender.dialogs.*\r\nimport com.daily.events.calender.helpers.*\r\nimport com.daily.events.calender.helpers.Formatter\r\nimport com.daily.events.calender.models.*\r\nimport com.google.gson.Gson\r\nimport com.google.gson.reflect.TypeToken\r\nimport com.loper7.date_time_picker.DateTimeConfig\r\nimport com.simplemobiletools.commons.dialogs.ConfirmationAdvancedDialog\r\nimport com.simplemobiletools.commons.dialogs.ConfirmationDialog\r\nimport com.simplemobiletools.commons.dialogs.RadioGroupDialog\r\nimport com.simplemobiletools.commons.extensions.*\r\nimport com.simplemobiletools.commons.helpers.*\r\nimport com.simplemobiletools.commons.models.RadioItem\r\nimport com.simplemobiletools.commons.views.MyAutoCompleteTextView\r\nimport kotlinx.android.synthetic.main.activity_event.*\r\nimport kotlinx.android.synthetic.main.activity_event.view.*\r\nimport kotlinx.android.synthetic.main.item_attendee.view.*\r\nimport kotlinx.android.synthetic.main.radio_button_with_color.view.*\r\nimport kotlinx.android.synthetic.main.tag_holder_layout.view.*\r\nimport org.joda.time.DateTime\r\nimport org.joda.time.DateTimeZone\r\nimport java.text.SimpleDateFormat\r\nimport java.util.*\r\nimport java.util.regex.Pattern\r\nimport kotlin.collections.ArrayList\r\n\r\nclass EventActivity : SimpleActivity() {\r\n    private val LAT_LON_PATTERN =\r\n        \"^[-+]?([1-8]?\\\\d(\\\\.\\\\d+)?|90(\\\\.0+)?)([,;])\\\\s*[-+]?(180(\\\\.0+)?|((1[0-7]\\\\d)|([1-9]?\\\\d))(\\\\.\\\\d+)?)\\$\"\r\n    private val EVENT = \"EVENT\"\r\n    private val START_TS = \"START_TS\"\r\n    private val END_TS = \"END_TS\"\r\n    private val REMINDER_1_MINUTES = \"REMINDER_1_MINUTES\"\r\n    private val REMINDER_2_MINUTES = \"REMINDER_2_MINUTES\"\r\n    private val REMINDER_3_MINUTES = \"REMINDER_3_MINUTES\"\r\n    private val REMINDER_1_TYPE = \"REMINDER_1_TYPE\"\r\n    private val REMINDER_2_TYPE = \"REMINDER_2_TYPE\"\r\n    private val REMINDER_3_TYPE = \"REMINDER_3_TYPE\"\r\n    private val REPEAT_INTERVAL = \"REPEAT_INTERVAL\"\r\n    private val REPEAT_LIMIT = \"REPEAT_LIMIT\"\r\n    private val REPEAT_RULE = \"REPEAT_RULE\"\r\n    private val ATTENDEES = \"ATTENDEES\"\r\n    private val AVAILABILITY = \"AVAILABILITY\"\r\n    private val EVENT_TYPE_ID = \"EVENT_TYPE_ID\"\r\n    private val EVENT_CALENDAR_ID = \"EVENT_CALENDAR_ID\"\r\n    private val SELECT_TIME_ZONE_INTENT = 1\r\n\r\n    private var mIsAllDayEvent = false\r\n    private var mReminder1Minutes = REMINDER_OFF\r\n    private var mReminder2Minutes = REMINDER_OFF\r\n    private var mReminder3Minutes = REMINDER_OFF\r\n    private var mReminder1Type = REMINDER_NOTIFICATION\r\n    private var mReminder2Type = REMINDER_NOTIFICATION\r\n    private var mReminder3Type = REMINDER_NOTIFICATION\r\n    private var mRepeatInterval = 0\r\n    private var mRepeatLimit = 0L\r\n    private var mRepeatRule = 0\r\n    private var mEventTypeId = REGULAR_EVENT_TYPE_ID\r\n    private var mDialogTheme = 0\r\n    private var mEventOccurrenceTS = 0L\r\n    private var mLastSavePromptTS = 0L\r\n    private var mEventCalendarId = STORED_LOCALLY_ONLY\r\n    private var mWasActivityInitialized = false\r\n    private var mWasContactsPermissionChecked = false\r\n    private var mWasCalendarChanged = false\r\n    private var mAttendees = ArrayList<Attendee>()\r\n    private var mAttendeeAutoCompleteViews = ArrayList<MyAutoCompleteTextView>()\r\n    private var mAvailableContacts = ArrayList<Attendee>()\r\n    private var mSelectedContacts = ArrayList<Attendee>()\r\n    private var mAvailability = Attendees.AVAILABILITY_BUSY\r\n    private var mStoredEventTypes = ArrayList<EventType>()\r\n    private var mOriginalTimeZone = DateTimeZone.getDefault().id\r\n    private var mOriginalStartTS = 0L\r\n    private var mOriginalEndTS = 0L\r\n\r\n    private lateinit var mEventStartDateTime: DateTime\r\n    private lateinit var mEventEndDateTime: DateTime\r\n    private lateinit var mEvent: Event\r\n\r\n    private val NEW_EVENT_TYPE_ID = -2L\r\n    private var eventTypes = java.util.ArrayList<EventType>()\r\n\r\n    var displayList: MutableList<Int>? = mutableListOf()\r\n    var pickerLayout = 0\r\n    var model = 0\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_event)\r\n\r\n        if (checkAppSideloading()) {\r\n            return\r\n        }\r\n\r\n        supportActionBar?.hide()\r\n//        supportActionBar?.setHomeAsUpIndicator(R.drawable.ic_cross_vector)\r\n        val intent = intent ?: return\r\n        mDialogTheme = getDialogTheme()\r\n        mWasContactsPermissionChecked = hasPermission(PERMISSION_READ_CONTACTS)\r\n\r\n        val eventId = intent.getLongExtra(EVENT_ID, 0L)\r\n        ensureBackgroundThread {\r\n\r\n            mStoredEventTypes = eventTypesDB.getEventTypes().toMutableList() as ArrayList<EventType>\r\n            val event = eventsDB.getEventWithId(eventId)\r\n            if (eventId != 0L && event == null) {\r\n                finish()\r\n                return@ensureBackgroundThread\r\n            }\r\n\r\n            val localEventType =\r\n                mStoredEventTypes.firstOrNull { it.id == config.lastUsedLocalEventTypeId }\r\n            runOnUiThread {\r\n                if (!isDestroyed && !isFinishing) {\r\n                    gotEvent(savedInstanceState, localEventType, event)\r\n                }\r\n            }\r\n        }\r\n\r\n//        ****************  Get Event type ***************\r\n\r\n        eventsHelper.getEventTypes(this, false) {\r\n            eventTypes = it\r\n            runOnUiThread {\r\n                eventTypes.filter { it.caldavCalendarId == 0 }.forEach {\r\n                    addRadioButton(it)\r\n                }\r\n                val newEventType = EventType(\r\n                    NEW_EVENT_TYPE_ID,\r\n                    getString(R.string.add_new_type),\r\n                    Color.TRANSPARENT,\r\n                    0\r\n                )\r\n                addRadioButton(newEventType)\r\n//                updateTextColors(allEventTypeRL)\r\n            }\r\n        }\r\n\r\n        back.setOnClickListener { onBackPressed() }\r\n\r\n        displayList?.add(DateTimeConfig.DAY)\r\n        displayList?.add(DateTimeConfig.MONTH)\r\n        displayList?.add(DateTimeConfig.YEAR)\r\n        displayList?.add(DateTimeConfig.HOUR)\r\n        displayList?.add(DateTimeConfig.MIN)\r\n\r\n        pickerLayout = R.layout.layout_date_picker_globalization1\r\n        model = R.drawable.bottom_back\r\n    }\r\n\r\n    private fun addRadioButton(eventType: EventType) {\r\n        val view = layoutInflater.inflate(R.layout.tag_holder_layout, null)\r\n        view.eventTV.text = eventType.getDisplayTitle()\r\n        view.eventTV.setTextColor(resources.getColor(R.color.grey))\r\n\r\n        if (eventType.color != Color.TRANSPARENT) {\r\n            view.eventTV.setTextColor(eventType.color)\r\n            view.eventTV.backgroundTintList = ColorStateList.valueOf(eventType.color)\r\n        } else {\r\n            view.eventTV.setTextColor(resources.getColor(R.color.theme_color))\r\n        }\r\n        view.eventTV.id = eventType.id!!.toInt()\r\n\r\n//        view.setOnClickListener { viewClicked(eventType) }\r\n        allEventTypeRL.addView(\r\n            view,\r\n            RelativeLayout.LayoutParams(\r\n                ViewGroup.LayoutParams.WRAP_CONTENT,\r\n                ViewGroup.LayoutParams.WRAP_CONTENT\r\n            )\r\n        )\r\n    }\r\n\r\n\r\n    private fun gotEvent(savedInstanceState: Bundle?, localEventType: EventType?, event: Event?) {\r\n        if (localEventType == null || localEventType.caldavCalendarId != 0) {\r\n            config.lastUsedLocalEventTypeId = REGULAR_EVENT_TYPE_ID\r\n        }\r\n\r\n        mEventTypeId =\r\n            if (config.defaultEventTypeId == -1L) config.lastUsedLocalEventTypeId else config.defaultEventTypeId\r\n\r\n        if (event != null) {\r\n            mEvent = event\r\n            mEventOccurrenceTS = intent.getLongExtra(EVENT_OCCURRENCE_TS, 0L)\r\n            if (savedInstanceState == null) {\r\n                setupEditEvent()\r\n            }\r\n\r\n            if (intent.getBooleanExtra(IS_DUPLICATE_INTENT, false)) {\r\n                mEvent.id = null\r\n                updateActionBarTitle(getString(R.string.new_event))\r\n            } else {\r\n                cancelNotification(mEvent.id!!)\r\n            }\r\n        } else {\r\n            mEvent = Event(null)\r\n            config.apply {\r\n                mReminder1Minutes =\r\n                    if (usePreviousEventReminders && lastEventReminderMinutes1 >= -1) lastEventReminderMinutes1 else defaultReminder1\r\n                mReminder2Minutes =\r\n                    if (usePreviousEventReminders && lastEventReminderMinutes2 >= -1) lastEventReminderMinutes2 else defaultReminder2\r\n                mReminder3Minutes =\r\n                    if (usePreviousEventReminders && lastEventReminderMinutes3 >= -1) lastEventReminderMinutes3 else defaultReminder3\r\n            }\r\n\r\n            if (savedInstanceState == null) {\r\n                setupNewEvent()\r\n            }\r\n        }\r\n\r\n        if (savedInstanceState == null) {\r\n            updateTexts()\r\n            updateEventType()\r\n            updateCalDAVCalendar()\r\n        }\r\n\r\n        event_show_on_map.setOnClickListener { showOnMap() }\r\n        event_start_time.setOnClickListener {\r\n            hideKeyboard()\r\n            CardDatePickerDialog.builder(this)\r\n                .setTitle(\"From\")\r\n                .setDisplayType(displayList)\r\n                .setPickerLayout(pickerLayout)\r\n                .setWrapSelectorWheel(false)\r\n                .showDateLabel(false)\r\n                .showBackNow(false)\r\n                .showFocusDateInfo(true)\r\n                .setBackGroundModel(model)\r\n                .setOnChoose(\"Ok\") {\r\n                    val date = Date(it)\r\n                    val format = SimpleDateFormat(\"E, dd MMM hh:mm a\")\r\n                    event_start_time.text = format.format(date)\r\n                }\r\n                .setOnCancel(\"Cancel\") {\r\n                }.build().show()\r\n\r\n        }\r\n\r\n        event_end_time.setOnClickListener {\r\n            hideKeyboard()\r\n            CardDatePickerDialog.builder(this)\r\n                .setTitle(\"To\")\r\n                .setDisplayType(displayList)\r\n                .setPickerLayout(pickerLayout)\r\n                .setWrapSelectorWheel(false)\r\n                .showDateLabel(false)\r\n                .showBackNow(false)\r\n                .showFocusDateInfo(true)\r\n                .setBackGroundModel(model)\r\n                .setOnChoose(\"Ok\") {\r\n                    val date = Date(it)\r\n                    val format = SimpleDateFormat(\"E, dd MMM hh:mm a\")\r\n                    event_end_time.text = format.format(date)\r\n                }\r\n                .setOnCancel(\"Cancel\") {\r\n                }.build().show()\r\n\r\n        }\r\n        event_start_date.setOnClickListener { if (mIsAllDayEvent) setupStartDate() }\r\n        event_end_date.setOnClickListener { if (mIsAllDayEvent) setupEndDate() }\r\n\r\n//        event_end_date.setOnClickListener { setupEndDate() }\r\n//        event_end_time.setOnClickListener { setupEndTime() }\r\n        event_time_zone.setOnClickListener { setupTimeZone() }\r\n\r\n        event_all_day.setOnCheckedChangeListener { compoundButton, isChecked ->\r\n            toggleAllDay(\r\n                isChecked\r\n            )\r\n            updateEndDateText()\r\n            updateStartDateText()\r\n        }\r\n        event_repetition.setOnClickListener {\r\n            showEventRepeatIntervalDialog(mRepeatInterval) {\r\n                setRepeatInterval(it)\r\n            }\r\n        }\r\n        event_repetition_rule_holder.setOnClickListener { showRepetitionRuleDialog() }\r\n        event_repetition_limit_holder.setOnClickListener { showRepetitionTypePicker() }\r\n\r\n        event_reminder_1.setOnClickListener {\r\n            handleNotificationAvailability {\r\n                if (config.wasAlarmWarningShown) {\r\n                    showReminder1Dialog()\r\n                } else {\r\n                    ConfirmationDialog(\r\n                        this,\r\n                        messageId = R.string.reminder_warning,\r\n                        positive = R.string.ok,\r\n                        negative = 0\r\n                    ) {\r\n                        config.wasAlarmWarningShown = true\r\n                        showReminder1Dialog()\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        event_reminder_2.setOnClickListener { showReminder2Dialog() }\r\n        event_reminder_3.setOnClickListener { showReminder3Dialog() }\r\n\r\n        event_reminder_1_type.setOnClickListener {\r\n            showReminderTypePicker(mReminder1Type) {\r\n                mReminder1Type = it\r\n                updateReminderTypeImage(\r\n                    event_reminder_1_type,\r\n                    Reminder(mReminder1Minutes, mReminder1Type)\r\n                )\r\n            }\r\n        }\r\n\r\n        event_reminder_2_type.setOnClickListener {\r\n            showReminderTypePicker(mReminder2Type) {\r\n                mReminder2Type = it\r\n                updateReminderTypeImage(\r\n                    event_reminder_2_type,\r\n                    Reminder(mReminder2Minutes, mReminder2Type)\r\n                )\r\n            }\r\n        }\r\n\r\n        event_reminder_3_type.setOnClickListener {\r\n            showReminderTypePicker(mReminder3Type) {\r\n                mReminder3Type = it\r\n                updateReminderTypeImage(\r\n                    event_reminder_3_type,\r\n                    Reminder(mReminder3Minutes, mReminder3Type)\r\n                )\r\n            }\r\n        }\r\n\r\n        event_availability.setOnClickListener {\r\n            showAvailabilityPicker(mAvailability) {\r\n                mAvailability = it\r\n                updateAvailabilityText()\r\n                updateAvailabilityImage()\r\n            }\r\n        }\r\n\r\n        event_type_holder.setOnClickListener { showEventTypeDialog() }\r\n        event_all_day.apply {\r\n            isChecked = mEvent.flags and FLAG_ALL_DAY != 0\r\n            jumpDrawablesToCurrentState()\r\n        }\r\n\r\n        updateTextColors(event_scrollview)\r\n        updateIconColors()\r\n        event_time_zone_image.beVisibleIf(config.allowChangingTimeZones)\r\n        event_time_zone.beVisibleIf(config.allowChangingTimeZones)\r\n        mWasActivityInitialized = true\r\n    }\r\n\r\n//    override fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n//        menuInflater.inflate(R.menu.menu_event, menu)\r\n//        if (mWasActivityInitialized) {\r\n//            menu.findItem(R.id.delete).isVisible = mEvent.id != null\r\n//            menu.findItem(R.id.share).isVisible = mEvent.id != null\r\n//            menu.findItem(R.id.duplicate).isVisible = mEvent.id != null\r\n//        }\r\n//\r\n//        updateMenuItemColors(menu)\r\n//        return true\r\n//    }\r\n//\r\n//    override fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n//        when (item.itemId) {\r\n//            R.id.save -> saveCurrentEvent()\r\n//            R.id.delete -> deleteEvent()\r\n//            R.id.duplicate -> duplicateEvent()\r\n//            R.id.share -> shareEvent()\r\n//            else -> return super.onOptionsItemSelected(item)\r\n//        }\r\n//        return true\r\n//    }\r\n\r\n    private fun getStartEndTimes(): Pair<Long, Long> {\r\n        val offset = if (!config.allowChangingTimeZones || mEvent.getTimeZoneString()\r\n                .equals(mOriginalTimeZone, true)\r\n        ) {\r\n            0\r\n        } else {\r\n            val original =\r\n                if (mOriginalTimeZone.isEmpty()) DateTimeZone.getDefault().id else mOriginalTimeZone\r\n            val millis = System.currentTimeMillis()\r\n            (DateTimeZone.forID(mEvent.getTimeZoneString()).getOffset(millis) - DateTimeZone.forID(\r\n                original\r\n            ).getOffset(millis)) / 1000L\r\n        }\r\n\r\n        val newStartTS =\r\n            mEventStartDateTime.withSecondOfMinute(0).withMillisOfSecond(0).seconds() - offset\r\n        val newEndTS =\r\n            mEventEndDateTime.withSecondOfMinute(0).withMillisOfSecond(0).seconds() - offset\r\n        return Pair(newStartTS, newEndTS)\r\n    }\r\n\r\n    private fun getReminders(): ArrayList<Reminder> {\r\n        var reminders = arrayListOf(\r\n            Reminder(mReminder1Minutes, mReminder1Type),\r\n            Reminder(mReminder2Minutes, mReminder2Type),\r\n            Reminder(mReminder3Minutes, mReminder3Type)\r\n        )\r\n        reminders =\r\n            reminders.filter { it.minutes != REMINDER_OFF }.sortedBy { it.minutes }\r\n                .toMutableList() as ArrayList<Reminder>\r\n        return reminders\r\n    }\r\n\r\n    private fun isEventChanged(): Boolean {\r\n        var newStartTS: Long\r\n        var newEndTS: Long\r\n        getStartEndTimes().apply {\r\n            newStartTS = first\r\n            newEndTS = second\r\n        }\r\n\r\n        val hasTimeChanged = if (mOriginalStartTS == 0L) {\r\n            mEvent.startTS != newStartTS || mEvent.endTS != newEndTS\r\n        } else {\r\n            mOriginalStartTS != newStartTS || mOriginalEndTS != newEndTS\r\n        }\r\n\r\n        val reminders = getReminders()\r\n        if (event_title.text.toString() != mEvent.title ||\r\n            event_location.text.toString() != mEvent.location ||\r\n            event_description.text.toString() != mEvent.description ||\r\n            event_time_zone.text != mEvent.getTimeZoneString() ||\r\n            reminders != mEvent.getReminders() ||\r\n            mRepeatInterval != mEvent.repeatInterval ||\r\n            mRepeatRule != mEvent.repeatRule ||\r\n            mEventTypeId != mEvent.eventType ||\r\n            mWasCalendarChanged ||\r\n            hasTimeChanged\r\n        ) {\r\n            return true\r\n        }\r\n\r\n        return false\r\n    }\r\n\r\n    override fun onBackPressed() {\r\n        if (System.currentTimeMillis() - mLastSavePromptTS > SAVE_DISCARD_PROMPT_INTERVAL && isEventChanged()) {\r\n            mLastSavePromptTS = System.currentTimeMillis()\r\n            ConfirmationAdvancedDialog(\r\n                this,\r\n                \"\",\r\n                R.string.save_before_closing,\r\n                R.string.save,\r\n                R.string.discard\r\n            ) {\r\n                if (it) {\r\n                    saveCurrentEvent()\r\n                } else {\r\n                    super.onBackPressed()\r\n                }\r\n            }\r\n        } else {\r\n            super.onBackPressed()\r\n        }\r\n    }\r\n\r\n    override fun onSaveInstanceState(outState: Bundle) {\r\n        super.onSaveInstanceState(outState)\r\n\r\n        if (!mWasActivityInitialized) {\r\n            return\r\n        }\r\n\r\n        outState.apply {\r\n            putSerializable(EVENT, mEvent)\r\n            putLong(START_TS, mEventStartDateTime.seconds())\r\n            putLong(END_TS, mEventEndDateTime.seconds())\r\n            putString(TIME_ZONE, mEvent.timeZone)\r\n\r\n            putInt(REMINDER_1_MINUTES, mReminder1Minutes)\r\n            putInt(REMINDER_2_MINUTES, mReminder2Minutes)\r\n            putInt(REMINDER_3_MINUTES, mReminder3Minutes)\r\n\r\n            putInt(REMINDER_1_TYPE, mReminder1Type)\r\n            putInt(REMINDER_2_TYPE, mReminder2Type)\r\n            putInt(REMINDER_3_TYPE, mReminder3Type)\r\n\r\n            putInt(REPEAT_INTERVAL, mRepeatInterval)\r\n            putInt(REPEAT_RULE, mRepeatRule)\r\n            putLong(REPEAT_LIMIT, mRepeatLimit)\r\n\r\n            putString(ATTENDEES, getAllAttendees(false))\r\n\r\n            putInt(AVAILABILITY, mAvailability)\r\n\r\n            putLong(EVENT_TYPE_ID, mEventTypeId)\r\n            putInt(EVENT_CALENDAR_ID, mEventCalendarId)\r\n        }\r\n    }\r\n\r\n    override fun onRestoreInstanceState(savedInstanceState: Bundle) {\r\n        super.onRestoreInstanceState(savedInstanceState)\r\n        if (!savedInstanceState.containsKey(START_TS)) {\r\n            finish()\r\n            return\r\n        }\r\n\r\n        savedInstanceState.apply {\r\n            mEvent = getSerializable(EVENT) as Event\r\n            mEventStartDateTime = Formatter.getDateTimeFromTS(getLong(START_TS))\r\n            mEventEndDateTime = Formatter.getDateTimeFromTS(getLong(END_TS))\r\n            mEvent.timeZone = getString(TIME_ZONE) ?: TimeZone.getDefault().id\r\n\r\n            mReminder1Minutes = getInt(REMINDER_1_MINUTES)\r\n            mReminder2Minutes = getInt(REMINDER_2_MINUTES)\r\n            mReminder3Minutes = getInt(REMINDER_3_MINUTES)\r\n\r\n            mReminder1Type = getInt(REMINDER_1_TYPE)\r\n            mReminder2Type = getInt(REMINDER_2_TYPE)\r\n            mReminder3Type = getInt(REMINDER_3_TYPE)\r\n\r\n            mAvailability = getInt(AVAILABILITY)\r\n\r\n            mRepeatInterval = getInt(REPEAT_INTERVAL)\r\n            mRepeatRule = getInt(REPEAT_RULE)\r\n            mRepeatLimit = getLong(REPEAT_LIMIT)\r\n\r\n            val token = object : TypeToken<List<Attendee>>() {}.type\r\n            mAttendees =\r\n                Gson().fromJson<ArrayList<Attendee>>(getString(ATTENDEES), token) ?: ArrayList()\r\n\r\n            mEventTypeId = getLong(EVENT_TYPE_ID)\r\n            mEventCalendarId = getInt(EVENT_CALENDAR_ID)\r\n        }\r\n\r\n        checkRepeatTexts(mRepeatInterval)\r\n        checkRepeatRule()\r\n        updateTexts()\r\n        updateEventType()\r\n        updateCalDAVCalendar()\r\n        checkAttendees()\r\n    }\r\n\r\n    override fun onActivityResult(requestCode: Int, resultCode: Int, resultData: Intent?) {\r\n        if (requestCode == SELECT_TIME_ZONE_INTENT && resultCode == Activity.RESULT_OK && resultData?.hasExtra(\r\n                TIME_ZONE\r\n            ) == true\r\n        ) {\r\n            val timeZone = resultData.getSerializableExtra(TIME_ZONE) as MyTimeZone\r\n            mEvent.timeZone = timeZone.zoneName\r\n            updateTimeZoneText()\r\n        }\r\n        super.onActivityResult(requestCode, resultCode, resultData)\r\n    }\r\n\r\n    private fun updateTexts() {\r\n        updateRepetitionText()\r\n        checkReminderTexts()\r\n        updateStartTexts()\r\n        updateEndTexts()\r\n        updateTimeZoneText()\r\n        updateCalDAVVisibility()\r\n        updateAvailabilityText()\r\n        updateAvailabilityImage()\r\n    }\r\n\r\n    private fun setupEditEvent() {\r\n        val realStart = if (mEventOccurrenceTS == 0L) mEvent.startTS else mEventOccurrenceTS\r\n        val duration = mEvent.endTS - mEvent.startTS\r\n        mOriginalStartTS = realStart\r\n        mOriginalEndTS = realStart + duration\r\n\r\n        window.setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN)\r\n        updateActionBarTitle(getString(R.string.edit_event))\r\n        mOriginalTimeZone = mEvent.timeZone\r\n        if (config.allowChangingTimeZones) {\r\n            try {\r\n                mEventStartDateTime = Formatter.getDateTimeFromTS(realStart)\r\n                    .withZone(DateTimeZone.forID(mOriginalTimeZone))\r\n                mEventEndDateTime = Formatter.getDateTimeFromTS(realStart + duration)\r\n                    .withZone(DateTimeZone.forID(mOriginalTimeZone))\r\n            } catch (e: Exception) {\r\n                showErrorToast(e)\r\n                mEventStartDateTime = Formatter.getDateTimeFromTS(realStart)\r\n                mEventEndDateTime = Formatter.getDateTimeFromTS(realStart + duration)\r\n            }\r\n        } else {\r\n            mEventStartDateTime = Formatter.getDateTimeFromTS(realStart)\r\n            mEventEndDateTime = Formatter.getDateTimeFromTS(realStart + duration)\r\n        }\r\n\r\n        event_title.text = mEvent.title\r\n        event_location.text = mEvent.location\r\n        event_description.setText(mEvent.description)\r\n\r\n        mReminder1Minutes = mEvent.reminder1Minutes\r\n        mReminder2Minutes = mEvent.reminder2Minutes\r\n        mReminder3Minutes = mEvent.reminder3Minutes\r\n        mReminder1Type = mEvent.reminder1Type\r\n        mReminder2Type = mEvent.reminder2Type\r\n        mReminder3Type = mEvent.reminder3Type\r\n        mRepeatInterval = mEvent.repeatInterval\r\n        mRepeatLimit = mEvent.repeatLimit\r\n        mRepeatRule = mEvent.repeatRule\r\n        mEventTypeId = mEvent.eventType\r\n        mEventCalendarId = mEvent.getCalDAVCalendarId()\r\n        mAvailability = mEvent.availability\r\n\r\n        val token = object : TypeToken<List<Attendee>>() {}.type\r\n        mAttendees = Gson().fromJson<ArrayList<Attendee>>(mEvent.attendees, token) ?: ArrayList()\r\n\r\n        checkRepeatTexts(mRepeatInterval)\r\n        checkAttendees()\r\n    }\r\n\r\n    private fun setupNewEvent() {\r\n        window.setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE)\r\n        event_title.requestFocus()\r\n        updateActionBarTitle(getString(R.string.new_event))\r\n        if (config.defaultEventTypeId != -1L) {\r\n            config.lastUsedCaldavCalendarId =\r\n                mStoredEventTypes.firstOrNull { it.id == config.defaultEventTypeId }?.caldavCalendarId\r\n                    ?: 0\r\n        }\r\n\r\n        val isLastCaldavCalendarOK = config.caldavSync && config.getSyncedCalendarIdsAsList()\r\n            .contains(config.lastUsedCaldavCalendarId)\r\n        mEventCalendarId =\r\n            if (isLastCaldavCalendarOK) config.lastUsedCaldavCalendarId else STORED_LOCALLY_ONLY\r\n\r\n        if (intent.action == Intent.ACTION_EDIT || intent.action == Intent.ACTION_INSERT) {\r\n            val startTS = intent.getLongExtra(\"beginTime\", System.currentTimeMillis()) / 1000L\r\n            mEventStartDateTime = Formatter.getDateTimeFromTS(startTS)\r\n\r\n            val endTS = intent.getLongExtra(\"endTime\", System.currentTimeMillis()) / 1000L\r\n            mEventEndDateTime = Formatter.getDateTimeFromTS(endTS)\r\n\r\n            if (intent.getBooleanExtra(\"allDay\", false)) {\r\n                mEvent.flags = mEvent.flags or FLAG_ALL_DAY\r\n                event_all_day.isChecked = true\r\n                toggleAllDay(true)\r\n            }\r\n\r\n            event_title.text = intent.getStringExtra(\"title\")\r\n            event_location.text = intent.getStringExtra(\"eventLocation\")\r\n            event_description.setText(intent.getStringExtra(\"description\"))\r\n            if (event_description.value.isNotEmpty()) {\r\n                event_description.movementMethod = LinkMovementMethod.getInstance()\r\n            }\r\n        } else {\r\n            val startTS = intent.getLongExtra(NEW_EVENT_START_TS, 0L)\r\n            val dateTime = Formatter.getDateTimeFromTS(startTS)\r\n            mEventStartDateTime = dateTime\r\n\r\n            val addMinutes = if (intent.getBooleanExtra(NEW_EVENT_SET_HOUR_DURATION, false)) {\r\n                // if an event is created at 23:00 on the weekly view, make it end on 23:59 by default to avoid spanning across multiple days\r\n                if (mEventStartDateTime.hourOfDay == 23) {\r\n                    59\r\n                } else {\r\n                    60\r\n                }\r\n            } else {\r\n                config.defaultDuration\r\n            }\r\n            mEventEndDateTime = mEventStartDateTime.plusMinutes(addMinutes)\r\n        }\r\n        addDefValuesToNewEvent()\r\n        checkAttendees()\r\n    }\r\n\r\n    private fun addDefValuesToNewEvent() {\r\n        var newStartTS: Long\r\n        var newEndTS: Long\r\n        getStartEndTimes().apply {\r\n            newStartTS = first\r\n            newEndTS = second\r\n        }\r\n\r\n        mEvent.apply {\r\n            startTS = newStartTS\r\n            endTS = newEndTS\r\n            reminder1Minutes = mReminder1Minutes\r\n            reminder1Type = mReminder1Type\r\n            reminder2Minutes = mReminder2Minutes\r\n            reminder2Type = mReminder2Type\r\n            reminder3Minutes = mReminder3Minutes\r\n            reminder3Type = mReminder3Type\r\n            eventType = mEventTypeId\r\n        }\r\n    }\r\n\r\n    private fun checkAttendees() {\r\n        ensureBackgroundThread {\r\n            fillAvailableContacts()\r\n            updateAttendees()\r\n        }\r\n    }\r\n\r\n    private fun handleNotificationAvailability(callback: () -> Unit) {\r\n        if (NotificationManagerCompat.from(applicationContext).areNotificationsEnabled()) {\r\n            callback()\r\n        } else {\r\n            ConfirmationDialog(\r\n                this,\r\n                messageId = R.string.notifications_disabled,\r\n                positive = R.string.ok,\r\n                negative = 0\r\n            ) {\r\n                callback()\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun showReminder1Dialog() {\r\n        showPickSecondsDialogHelper(mReminder1Minutes, showDuringDayOption = mIsAllDayEvent) {\r\n            mReminder1Minutes = if (it == -1 || it == 0) it else it / 60\r\n            checkReminderTexts()\r\n        }\r\n    }\r\n\r\n    private fun showReminder2Dialog() {\r\n        showPickSecondsDialogHelper(mReminder2Minutes, showDuringDayOption = mIsAllDayEvent) {\r\n            mReminder2Minutes = if (it == -1 || it == 0) it else it / 60\r\n            checkReminderTexts()\r\n        }\r\n    }\r\n\r\n    private fun showReminder3Dialog() {\r\n        showPickSecondsDialogHelper(mReminder3Minutes, showDuringDayOption = mIsAllDayEvent) {\r\n            mReminder3Minutes = if (it == -1 || it == 0) it else it / 60\r\n            checkReminderTexts()\r\n        }\r\n    }\r\n\r\n    private fun setRepeatInterval(interval: Int) {\r\n        mRepeatInterval = interval\r\n        updateRepetitionText()\r\n        checkRepeatTexts(interval)\r\n\r\n        when {\r\n            mRepeatInterval.isXWeeklyRepetition() -> setRepeatRule(\r\n                Math.pow(\r\n                    2.0,\r\n                    (mEventStartDateTime.dayOfWeek - 1).toDouble()\r\n                ).toInt()\r\n            )\r\n            mRepeatInterval.isXMonthlyRepetition() -> setRepeatRule(REPEAT_SAME_DAY)\r\n            mRepeatInterval.isXYearlyRepetition() -> setRepeatRule(REPEAT_SAME_DAY)\r\n        }\r\n    }\r\n\r\n    private fun checkRepeatTexts(limit: Int) {\r\n        event_repetition_limit_holder.beGoneIf(limit == 0)\r\n        checkRepetitionLimitText()\r\n\r\n        event_repetition_rule_holder.beVisibleIf(mRepeatInterval.isXWeeklyRepetition() || mRepeatInterval.isXMonthlyRepetition() || mRepeatInterval.isXYearlyRepetition())\r\n        checkRepetitionRuleText()\r\n    }\r\n\r\n    private fun showRepetitionTypePicker() {\r\n        hideKeyboard()\r\n        RepeatLimitTypePickerDialog(this, mRepeatLimit, mEventStartDateTime.seconds()) {\r\n            setRepeatLimit(it)\r\n        }\r\n    }\r\n\r\n    private fun setRepeatLimit(limit: Long) {\r\n        mRepeatLimit = limit\r\n        checkRepetitionLimitText()\r\n    }\r\n\r\n    private fun checkRepetitionLimitText() {\r\n        event_repetition_limit.text = when {\r\n            mRepeatLimit == 0L -> {\r\n                event_repetition_limit_label.text = getString(R.string.repeat)\r\n                resources.getString(R.string.forever)\r\n            }\r\n            mRepeatLimit > 0 -> {\r\n                event_repetition_limit_label.text = getString(R.string.repeat_till)\r\n                val repeatLimitDateTime = Formatter.getDateTimeFromTS(mRepeatLimit)\r\n                Formatter.getFullDate(applicationContext, repeatLimitDateTime)\r\n            }\r\n            else -> {\r\n                event_repetition_limit_label.text = getString(R.string.repeat)\r\n                \"${-mRepeatLimit} ${getString(R.string.times)}\"\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun showRepetitionRuleDialog() {\r\n        hideKeyboard()\r\n        when {\r\n            mRepeatInterval.isXWeeklyRepetition() -> RepeatRuleWeeklyDialog(this, mRepeatRule) {\r\n                setRepeatRule(it)\r\n            }\r\n            mRepeatInterval.isXMonthlyRepetition() -> {\r\n                val items = getAvailableMonthlyRepetitionRules()\r\n                RadioGroupDialog(this, items, mRepeatRule) {\r\n                    setRepeatRule(it as Int)\r\n                }\r\n            }\r\n            mRepeatInterval.isXYearlyRepetition() -> {\r\n                val items = getAvailableYearlyRepetitionRules()\r\n                RadioGroupDialog(this, items, mRepeatRule) {\r\n                    setRepeatRule(it as Int)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun getAvailableMonthlyRepetitionRules(): ArrayList<RadioItem> {\r\n        val items = arrayListOf(\r\n            RadioItem(\r\n                REPEAT_SAME_DAY,\r\n                getString(R.string.repeat_on_the_same_day_monthly)\r\n            )\r\n        )\r\n\r\n        items.add(\r\n            RadioItem(\r\n                REPEAT_ORDER_WEEKDAY,\r\n                getRepeatXthDayString(true, REPEAT_ORDER_WEEKDAY)\r\n            )\r\n        )\r\n        if (isLastWeekDayOfMonth()) {\r\n            items.add(\r\n                RadioItem(\r\n                    REPEAT_ORDER_WEEKDAY_USE_LAST,\r\n                    getRepeatXthDayString(true, REPEAT_ORDER_WEEKDAY_USE_LAST)\r\n                )\r\n            )\r\n        }\r\n\r\n        if (isLastDayOfTheMonth()) {\r\n            items.add(\r\n                RadioItem(\r\n                    REPEAT_LAST_DAY,\r\n                    getString(R.string.repeat_on_the_last_day_monthly)\r\n                )\r\n            )\r\n        }\r\n        return items\r\n    }\r\n\r\n    private fun getAvailableYearlyRepetitionRules(): ArrayList<RadioItem> {\r\n        val items = arrayListOf(\r\n            RadioItem(\r\n                REPEAT_SAME_DAY,\r\n                getString(R.string.repeat_on_the_same_day_yearly)\r\n            )\r\n        )\r\n\r\n        items.add(\r\n            RadioItem(\r\n                REPEAT_ORDER_WEEKDAY,\r\n                getRepeatXthDayInMonthString(true, REPEAT_ORDER_WEEKDAY)\r\n            )\r\n        )\r\n        if (isLastWeekDayOfMonth()) {\r\n            items.add(\r\n                RadioItem(\r\n                    REPEAT_ORDER_WEEKDAY_USE_LAST,\r\n                    getRepeatXthDayInMonthString(true, REPEAT_ORDER_WEEKDAY_USE_LAST)\r\n                )\r\n            )\r\n        }\r\n\r\n        return items\r\n    }\r\n\r\n    private fun isLastDayOfTheMonth() =\r\n        mEventStartDateTime.dayOfMonth == mEventStartDateTime.dayOfMonth()\r\n            .withMaximumValue().dayOfMonth\r\n\r\n    private fun isLastWeekDayOfMonth() =\r\n        mEventStartDateTime.monthOfYear != mEventStartDateTime.plusDays(7).monthOfYear\r\n\r\n    private fun getRepeatXthDayString(includeBase: Boolean, repeatRule: Int): String {\r\n        val dayOfWeek = mEventStartDateTime.dayOfWeek\r\n        val base = getBaseString(dayOfWeek)\r\n        val order = getOrderString(repeatRule)\r\n        val dayString = getDayString(dayOfWeek)\r\n        return if (includeBase) {\r\n            \"$base $order $dayString\"\r\n        } else {\r\n            val everyString =\r\n                getString(if (isMaleGender(mEventStartDateTime.dayOfWeek)) R.string.every_m else R.string.every_f)\r\n            \"$everyString $order $dayString\"\r\n        }\r\n    }\r\n\r\n    private fun getBaseString(day: Int): String {\r\n        return getString(\r\n            if (isMaleGender(day)) {\r\n                R.string.repeat_every_m\r\n            } else {\r\n                R.string.repeat_every_f\r\n            }\r\n        )\r\n    }\r\n\r\n    private fun isMaleGender(day: Int) = day == 1 || day == 2 || day == 4 || day == 5\r\n\r\n    private fun getOrderString(repeatRule: Int): String {\r\n        val dayOfMonth = mEventStartDateTime.dayOfMonth\r\n        var order = (dayOfMonth - 1) / 7 + 1\r\n        if (isLastWeekDayOfMonth() && repeatRule == REPEAT_ORDER_WEEKDAY_USE_LAST) {\r\n            order = -1\r\n        }\r\n\r\n        val isMale = isMaleGender(mEventStartDateTime.dayOfWeek)\r\n        return getString(\r\n            when (order) {\r\n                1 -> if (isMale) R.string.first_m else R.string.first_f\r\n                2 -> if (isMale) R.string.second_m else R.string.second_f\r\n                3 -> if (isMale) R.string.third_m else R.string.third_f\r\n                4 -> if (isMale) R.string.fourth_m else R.string.fourth_f\r\n                5 -> if (isMale) R.string.fifth_m else R.string.fifth_f\r\n                else -> if (isMale) R.string.last_m else R.string.last_f\r\n            }\r\n        )\r\n    }\r\n\r\n    private fun getDayString(day: Int): String {\r\n        return getString(\r\n            when (day) {\r\n                1 -> R.string.monday_alt\r\n                2 -> R.string.tuesday_alt\r\n                3 -> R.string.wednesday_alt\r\n                4 -> R.string.thursday_alt\r\n                5 -> R.string.friday_alt\r\n                6 -> R.string.saturday_alt\r\n                else -> R.string.sunday_alt\r\n            }\r\n        )\r\n    }\r\n\r\n    private fun getRepeatXthDayInMonthString(includeBase: Boolean, repeatRule: Int): String {\r\n        val weekDayString = getRepeatXthDayString(includeBase, repeatRule)\r\n        val monthString =\r\n            resources.getStringArray(R.array.in_months)[mEventStartDateTime.monthOfYear - 1]\r\n        return \"$weekDayString $monthString\"\r\n    }\r\n\r\n    private fun setRepeatRule(rule: Int) {\r\n        mRepeatRule = rule\r\n        checkRepetitionRuleText()\r\n        if (rule == 0) {\r\n            setRepeatInterval(0)\r\n        }\r\n    }\r\n\r\n    private fun checkRepetitionRuleText() {\r\n        when {\r\n            mRepeatInterval.isXWeeklyRepetition() -> {\r\n                event_repetition_rule.text =\r\n                    if (mRepeatRule == EVERY_DAY_BIT) getString(R.string.every_day) else getSelectedDaysString(\r\n                        mRepeatRule\r\n                    )\r\n            }\r\n            mRepeatInterval.isXMonthlyRepetition() -> {\r\n                val repeatString =\r\n                    if (mRepeatRule == REPEAT_ORDER_WEEKDAY_USE_LAST || mRepeatRule == REPEAT_ORDER_WEEKDAY)\r\n                        R.string.repeat else R.string.repeat_on\r\n\r\n                event_repetition_rule_label.text = getString(repeatString)\r\n                event_repetition_rule.text = getMonthlyRepetitionRuleText()\r\n            }\r\n            mRepeatInterval.isXYearlyRepetition() -> {\r\n                val repeatString =\r\n                    if (mRepeatRule == REPEAT_ORDER_WEEKDAY_USE_LAST || mRepeatRule == REPEAT_ORDER_WEEKDAY)\r\n                        R.string.repeat else R.string.repeat_on\r\n\r\n                event_repetition_rule_label.text = getString(repeatString)\r\n                event_repetition_rule.text = getYearlyRepetitionRuleText()\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun getMonthlyRepetitionRuleText() = when (mRepeatRule) {\r\n        REPEAT_SAME_DAY -> getString(R.string.the_same_day)\r\n        REPEAT_LAST_DAY -> getString(R.string.the_last_day)\r\n        else -> getRepeatXthDayString(false, mRepeatRule)\r\n    }\r\n\r\n    private fun getYearlyRepetitionRuleText() = when (mRepeatRule) {\r\n        REPEAT_SAME_DAY -> getString(R.string.the_same_day)\r\n        else -> getRepeatXthDayInMonthString(false, mRepeatRule)\r\n    }\r\n\r\n    private fun showEventTypeDialog() {\r\n        hideKeyboard()\r\n        SelectEventTypeDialog(this, mEventTypeId, false, true, false, true) {\r\n            mEventTypeId = it.id!!\r\n            updateEventType()\r\n        }\r\n    }\r\n\r\n    private fun checkReminderTexts() {\r\n        updateReminder1Text()\r\n        updateReminder2Text()\r\n        updateReminder3Text()\r\n        updateReminderTypeImages()\r\n    }\r\n\r\n    private fun updateReminder1Text() {\r\n        event_reminder_1.text = getFormattedMinutes(mReminder1Minutes)\r\n    }\r\n\r\n    private fun updateReminder2Text() {\r\n        event_reminder_2.apply {\r\n            beGoneIf(event_reminder_2.isGone() && mReminder1Minutes == REMINDER_OFF)\r\n            if (mReminder2Minutes == REMINDER_OFF) {\r\n                text = resources.getString(R.string.add_another_reminder)\r\n                alpha = 0.4f\r\n            } else {\r\n                text = getFormattedMinutes(mReminder2Minutes)\r\n                alpha = 1f\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun updateReminder3Text() {\r\n        event_reminder_3.apply {\r\n            beGoneIf(event_reminder_3.isGone() && (mReminder2Minutes == REMINDER_OFF || mReminder1Minutes == REMINDER_OFF))\r\n            if (mReminder3Minutes == REMINDER_OFF) {\r\n                text = resources.getString(R.string.add_another_reminder)\r\n                alpha = 0.4f\r\n            } else {\r\n                text = getFormattedMinutes(mReminder3Minutes)\r\n                alpha = 1f\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun showReminderTypePicker(currentValue: Int, callback: (Int) -> Unit) {\r\n        val items = arrayListOf(\r\n            RadioItem(REMINDER_NOTIFICATION, getString(R.string.notification)),\r\n            RadioItem(REMINDER_EMAIL, getString(R.string.email))\r\n        )\r\n        RadioGroupDialog(this, items, currentValue) {\r\n            callback(it as Int)\r\n        }\r\n    }\r\n\r\n    private fun showAvailabilityPicker(currentValue: Int, callback: (Int) -> Unit) {\r\n        val items = arrayListOf(\r\n            RadioItem(Attendees.AVAILABILITY_BUSY, getString(R.string.status_busy)),\r\n            RadioItem(Attendees.AVAILABILITY_FREE, getString(R.string.status_free))\r\n        )\r\n        RadioGroupDialog(this, items, currentValue) {\r\n            callback(it as Int)\r\n        }\r\n    }\r\n\r\n    private fun updateReminderTypeImages() {\r\n        updateReminderTypeImage(event_reminder_1_type, Reminder(mReminder1Minutes, mReminder1Type))\r\n        updateReminderTypeImage(event_reminder_2_type, Reminder(mReminder2Minutes, mReminder2Type))\r\n        updateReminderTypeImage(event_reminder_3_type, Reminder(mReminder3Minutes, mReminder3Type))\r\n    }\r\n\r\n    private fun updateCalDAVVisibility() {\r\n        val isSyncedEvent = mEventCalendarId != STORED_LOCALLY_ONLY\r\n        event_attendees_holder.beVisibleIf(isSyncedEvent)\r\n        event_attendees_divider.beVisibleIf(isSyncedEvent)\r\n        event_availability_divider.beVisibleIf(isSyncedEvent)\r\n        event_availability_image.beVisibleIf(isSyncedEvent)\r\n        event_availability.beVisibleIf(isSyncedEvent)\r\n    }\r\n\r\n    private fun updateReminderTypeImage(view: ImageView, reminder: Reminder) {\r\n        view.beVisibleIf(reminder.minutes != REMINDER_OFF && mEventCalendarId != STORED_LOCALLY_ONLY)\r\n        val drawable =\r\n            if (reminder.type == REMINDER_NOTIFICATION) R.drawable.ic_bell_vector else R.drawable.ic_email_vector\r\n        val icon = resources.getColoredDrawableWithColor(drawable, config.textColor)\r\n        view.setImageDrawable(icon)\r\n    }\r\n\r\n    private fun updateAvailabilityImage() {\r\n        val drawable =\r\n            if (mAvailability == Attendees.AVAILABILITY_FREE) R.drawable.ic_event else R.drawable.ic_event_occupied\r\n        val icon = resources.getColoredDrawableWithColor(drawable, config.textColor)\r\n        event_availability_image.setImageDrawable(icon)\r\n    }\r\n\r\n    private fun updateAvailabilityText() {\r\n        event_availability.text =\r\n            if (mAvailability == Attendees.AVAILABILITY_FREE) getString(R.string.status_free) else getString(\r\n                R.string.status_busy\r\n            )\r\n    }\r\n\r\n    private fun updateRepetitionText() {\r\n        event_repetition.text = getRepetitionText(mRepeatInterval)\r\n    }\r\n\r\n    private fun updateEventType() {\r\n        ensureBackgroundThread {\r\n            val eventType = eventTypesDB.getEventTypeWithId(mEventTypeId)\r\n            if (eventType != null) {\r\n                runOnUiThread {\r\n                    event_type.text = eventType.title\r\n                    event_type_color.setFillWithStroke(\r\n                        eventType.color,\r\n                        config.backgroundColor,\r\n                        getCornerRadius()\r\n                    )\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun updateCalDAVCalendar() {\r\n        if (config.caldavSync) {\r\n            event_caldav_calendar_image.beVisible()\r\n            event_caldav_calendar_holder.beVisible()\r\n            event_caldav_calendar_divider.beVisible()\r\n\r\n            val calendars = calDAVHelper.getCalDAVCalendars(\"\", true).filter {\r\n                it.canWrite() && config.getSyncedCalendarIdsAsList().contains(it.id)\r\n            }\r\n            updateCurrentCalendarInfo(\r\n                if (mEventCalendarId == STORED_LOCALLY_ONLY) null else getCalendarWithId(\r\n                    calendars,\r\n                    getCalendarId()\r\n                )\r\n            )\r\n\r\n            event_caldav_calendar_holder.setOnClickListener {\r\n                hideKeyboard()\r\n                SelectEventCalendarDialog(this, calendars, mEventCalendarId) {\r\n                    if (mEventCalendarId != STORED_LOCALLY_ONLY && it == STORED_LOCALLY_ONLY) {\r\n                        mEventTypeId = config.lastUsedLocalEventTypeId\r\n                        updateEventType()\r\n                    }\r\n                    mWasCalendarChanged = true\r\n                    mEventCalendarId = it\r\n                    config.lastUsedCaldavCalendarId = it\r\n                    updateCurrentCalendarInfo(getCalendarWithId(calendars, it))\r\n                    updateReminderTypeImages()\r\n                    updateCalDAVVisibility()\r\n                    updateAvailabilityText()\r\n                    updateAvailabilityImage()\r\n                }\r\n            }\r\n        } else {\r\n            updateCurrentCalendarInfo(null)\r\n        }\r\n    }\r\n\r\n    private fun getCalendarId() =\r\n        if (mEvent.source == SOURCE_SIMPLE_CALENDAR) config.lastUsedCaldavCalendarId else mEvent.getCalDAVCalendarId()\r\n\r\n    private fun getCalendarWithId(calendars: List<CalDAVCalendar>, calendarId: Int) =\r\n        calendars.firstOrNull { it.id == calendarId }\r\n\r\n    private fun updateCurrentCalendarInfo(currentCalendar: CalDAVCalendar?) {\r\n        event_type_image.beVisibleIf(currentCalendar == null)\r\n        event_type_holder.beVisibleIf(currentCalendar == null)\r\n        event_caldav_calendar_divider.beVisibleIf(currentCalendar == null)\r\n        event_caldav_calendar_email.beGoneIf(currentCalendar == null)\r\n        event_caldav_calendar_color.beGoneIf(currentCalendar == null)\r\n\r\n        if (currentCalendar == null) {\r\n            mEventCalendarId = STORED_LOCALLY_ONLY\r\n            val mediumMargin = resources.getDimension(R.dimen.medium_margin).toInt()\r\n            event_caldav_calendar_name.apply {\r\n                text = getString(R.string.store_locally_only)\r\n                setPadding(paddingLeft, paddingTop, paddingRight, mediumMargin)\r\n            }\r\n\r\n            event_caldav_calendar_holder.apply {\r\n                setPadding(paddingLeft, mediumMargin, paddingRight, mediumMargin)\r\n            }\r\n        } else {\r\n            event_caldav_calendar_email.text = currentCalendar.accountName\r\n\r\n            ensureBackgroundThread {\r\n                val calendarColor =\r\n                    eventsHelper.getEventTypeWithCalDAVCalendarId(currentCalendar.id)?.color\r\n                        ?: currentCalendar.color\r\n\r\n                runOnUiThread {\r\n                    event_caldav_calendar_color.setFillWithStroke(\r\n                        calendarColor,\r\n                        config.backgroundColor,\r\n                        getCornerRadius()\r\n                    )\r\n                    event_caldav_calendar_name.apply {\r\n                        text = currentCalendar.displayName\r\n                        setPadding(\r\n                            paddingLeft,\r\n                            paddingTop,\r\n                            paddingRight,\r\n                            resources.getDimension(R.dimen.tiny_margin).toInt()\r\n                        )\r\n                    }\r\n\r\n                    event_caldav_calendar_holder.apply {\r\n                        setPadding(paddingLeft, 0, paddingRight, 0)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun resetTime() {\r\n        if (mEventEndDateTime.isBefore(mEventStartDateTime) &&\r\n            mEventStartDateTime.dayOfMonth() == mEventEndDateTime.dayOfMonth() &&\r\n            mEventStartDateTime.monthOfYear() == mEventEndDateTime.monthOfYear()\r\n        ) {\r\n\r\n            mEventEndDateTime =\r\n                mEventEndDateTime.withTime(\r\n                    mEventStartDateTime.hourOfDay,\r\n                    mEventStartDateTime.minuteOfHour,\r\n                    mEventStartDateTime.secondOfMinute,\r\n                    0\r\n                )\r\n            updateEndTimeText()\r\n            checkStartEndValidity()\r\n        }\r\n    }\r\n\r\n    private fun toggleAllDay(isChecked: Boolean) {\r\n        mIsAllDayEvent = isChecked\r\n        hideKeyboard()\r\n        event_start_time.beGoneIf(isChecked)\r\n        event_end_time.beGoneIf(isChecked)\r\n        resetTime()\r\n    }\r\n\r\n    private fun shareEvent() {\r\n        shareEvents(arrayListOf(mEvent.id!!))\r\n    }\r\n\r\n    private fun deleteEvent() {\r\n        if (mEvent.id == null) {\r\n            return\r\n        }\r\n\r\n        DeleteEventDialog(this, arrayListOf(mEvent.id!!), mEvent.repeatInterval > 0) {\r\n            ensureBackgroundThread {\r\n                when (it) {\r\n                    DELETE_SELECTED_OCCURRENCE -> eventsHelper.addEventRepetitionException(\r\n                        mEvent.id!!,\r\n                        mEventOccurrenceTS,\r\n                        true\r\n                    )\r\n                    DELETE_FUTURE_OCCURRENCES -> eventsHelper.addEventRepeatLimit(\r\n                        mEvent.id!!,\r\n                        mEventOccurrenceTS\r\n                    )\r\n                    DELETE_ALL_OCCURRENCES -> eventsHelper.deleteEvent(mEvent.id!!, true)\r\n                }\r\n\r\n                runOnUiThread {\r\n                    finish()\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun duplicateEvent() {\r\n        // the activity has the singleTask launchMode to avoid some glitches, so finish it before relaunching\r\n        finish()\r\n        Intent(this, EventActivity::class.java).apply {\r\n            putExtra(EVENT_ID, mEvent.id)\r\n            putExtra(EVENT_OCCURRENCE_TS, mEventOccurrenceTS)\r\n            putExtra(IS_DUPLICATE_INTENT, true)\r\n            startActivity(this)\r\n        }\r\n    }\r\n\r\n    private fun saveCurrentEvent() {\r\n        if (config.wasAlarmWarningShown || (mReminder1Minutes == REMINDER_OFF && mReminder2Minutes == REMINDER_OFF && mReminder3Minutes == REMINDER_OFF)) {\r\n            ensureBackgroundThread {\r\n                saveEvent()\r\n            }\r\n        } else {\r\n            ConfirmationDialog(\r\n                this,\r\n                messageId = R.string.reminder_warning,\r\n                positive = R.string.ok,\r\n                negative = 0\r\n            ) {\r\n                config.wasAlarmWarningShown = true\r\n                ensureBackgroundThread {\r\n                    saveEvent()\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun saveEvent() {\r\n        val newTitle = event_title.value\r\n        if (newTitle.isEmpty()) {\r\n            toast(R.string.title_empty)\r\n            runOnUiThread {\r\n                event_title.requestFocus()\r\n            }\r\n            return\r\n        }\r\n\r\n        var newStartTS: Long\r\n        var newEndTS: Long\r\n        getStartEndTimes().apply {\r\n            newStartTS = first\r\n            newEndTS = second\r\n        }\r\n\r\n        if (newStartTS > newEndTS) {\r\n            toast(R.string.end_before_start)\r\n            return\r\n        }\r\n\r\n        val wasRepeatable = mEvent.repeatInterval > 0\r\n        val oldSource = mEvent.source\r\n        val newImportId = if (mEvent.id != null) {\r\n            mEvent.importId\r\n        } else {\r\n            UUID.randomUUID().toString().replace(\"-\", \"\") + System.currentTimeMillis().toString()\r\n        }\r\n\r\n        val newEventType =\r\n            if (!config.caldavSync || config.lastUsedCaldavCalendarId == 0 || mEventCalendarId == STORED_LOCALLY_ONLY) {\r\n                mEventTypeId\r\n            } else {\r\n                calDAVHelper.getCalDAVCalendars(\"\", true).firstOrNull { it.id == mEventCalendarId }\r\n                    ?.apply {\r\n                        if (!canWrite()) {\r\n                            runOnUiThread {\r\n                                toast(R.string.insufficient_permissions)\r\n                            }\r\n                            return\r\n                        }\r\n                    }\r\n\r\n                eventsHelper.getEventTypeWithCalDAVCalendarId(mEventCalendarId)?.id\r\n                    ?: config.lastUsedLocalEventTypeId\r\n            }\r\n\r\n        val newSource = if (!config.caldavSync || mEventCalendarId == STORED_LOCALLY_ONLY) {\r\n            config.lastUsedLocalEventTypeId = newEventType\r\n            SOURCE_SIMPLE_CALENDAR\r\n        } else {\r\n            \"$CALDAV-$mEventCalendarId\"\r\n        }\r\n\r\n        val reminders = getReminders()\r\n        if (!event_all_day.isChecked) {\r\n            if (reminders.getOrNull(2)?.minutes ?: 0 < -1) {\r\n                reminders.removeAt(2)\r\n            }\r\n\r\n            if (reminders.getOrNull(1)?.minutes ?: 0 < -1) {\r\n                reminders.removeAt(1)\r\n            }\r\n\r\n            if (reminders.getOrNull(0)?.minutes ?: 0 < -1) {\r\n                reminders.removeAt(0)\r\n            }\r\n        }\r\n\r\n        val reminder1 = reminders.getOrNull(0) ?: Reminder(REMINDER_OFF, REMINDER_NOTIFICATION)\r\n        val reminder2 = reminders.getOrNull(1) ?: Reminder(REMINDER_OFF, REMINDER_NOTIFICATION)\r\n        val reminder3 = reminders.getOrNull(2) ?: Reminder(REMINDER_OFF, REMINDER_NOTIFICATION)\r\n\r\n        mReminder1Type =\r\n            if (mEventCalendarId == STORED_LOCALLY_ONLY) REMINDER_NOTIFICATION else reminder1.type\r\n        mReminder2Type =\r\n            if (mEventCalendarId == STORED_LOCALLY_ONLY) REMINDER_NOTIFICATION else reminder2.type\r\n        mReminder3Type =\r\n            if (mEventCalendarId == STORED_LOCALLY_ONLY) REMINDER_NOTIFICATION else reminder3.type\r\n\r\n        config.apply {\r\n            if (usePreviousEventReminders) {\r\n                lastEventReminderMinutes1 = reminder1.minutes\r\n                lastEventReminderMinutes2 = reminder2.minutes\r\n                lastEventReminderMinutes3 = reminder3.minutes\r\n            }\r\n        }\r\n\r\n        mEvent.apply {\r\n            startTS = newStartTS\r\n            endTS = newEndTS\r\n            title = newTitle\r\n            description = event_description.value\r\n            reminder1Minutes = reminder1.minutes\r\n            reminder2Minutes = reminder2.minutes\r\n            reminder3Minutes = reminder3.minutes\r\n            reminder1Type = mReminder1Type\r\n            reminder2Type = mReminder2Type\r\n            reminder3Type = mReminder3Type\r\n            repeatInterval = mRepeatInterval\r\n            importId = newImportId\r\n            timeZone = if (mEvent.timeZone.isEmpty()) TimeZone.getDefault().id else timeZone\r\n            flags = mEvent.flags.addBitIf(event_all_day.isChecked, FLAG_ALL_DAY)\r\n            repeatLimit = if (repeatInterval == 0) 0 else mRepeatLimit\r\n            repeatRule = mRepeatRule\r\n            attendees = if (mEventCalendarId == STORED_LOCALLY_ONLY) \"\" else getAllAttendees(true)\r\n            eventType = newEventType\r\n            lastUpdated = System.currentTimeMillis()\r\n            source = newSource\r\n            location = event_location.value\r\n            availability = mAvailability\r\n        }\r\n\r\n        // recreate the event if it was moved in a different CalDAV calendar\r\n        if (mEvent.id != null && oldSource != newSource) {\r\n            eventsHelper.deleteEvent(mEvent.id!!, true)\r\n            mEvent.id = null\r\n        }\r\n        storeEvent(wasRepeatable)\r\n    }\r\n\r\n    private fun storeEvent(wasRepeatable: Boolean) {\r\n        if (mEvent.id == null || mEvent.id == null) {\r\n            eventsHelper.insertEvent(mEvent, true, true) {\r\n                if (DateTime.now().isAfter(mEventStartDateTime.millis)) {\r\n                    if (mEvent.repeatInterval == 0 && mEvent.getReminders()\r\n                            .any { it.type == REMINDER_NOTIFICATION }\r\n                    ) {\r\n                        notifyEvent(mEvent)\r\n                    }\r\n                }\r\n                finish()\r\n            }\r\n        } else {\r\n            if (mRepeatInterval > 0 && wasRepeatable) {\r\n                runOnUiThread {\r\n                    showEditRepeatingEventDialog()\r\n                }\r\n            } else {\r\n                eventsHelper.updateEvent(mEvent, true, true) {\r\n                    finish()\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun showEditRepeatingEventDialog() {\r\n        EditRepeatingEventDialog(this) {\r\n            when (it) {\r\n                0 -> {\r\n                    ensureBackgroundThread {\r\n                        eventsHelper.addEventRepetitionException(\r\n                            mEvent.id!!,\r\n                            mEventOccurrenceTS,\r\n                            true\r\n                        )\r\n                        mEvent.apply {\r\n                            parentId = id!!.toLong()\r\n                            id = null\r\n                            repeatRule = 0\r\n                            repeatInterval = 0\r\n                            repeatLimit = 0\r\n                        }\r\n\r\n                        eventsHelper.insertEvent(mEvent, true, true) {\r\n                            finish()\r\n                        }\r\n                    }\r\n                }\r\n                1 -> {\r\n                    ensureBackgroundThread {\r\n                        eventsHelper.addEventRepeatLimit(mEvent.id!!, mEventOccurrenceTS)\r\n                        mEvent.apply {\r\n                            id = null\r\n                        }\r\n                        eventsHelper.insertEvent(mEvent, true, true) {\r\n                            finish()\r\n                        }\r\n                    }\r\n                }\r\n\r\n                2 -> {\r\n                    ensureBackgroundThread {\r\n                        eventsHelper.addEventRepeatLimit(mEvent.id!!, mEventOccurrenceTS)\r\n                        eventsHelper.updateEvent(mEvent, true, true) {\r\n                            finish()\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun updateStartTexts() {\r\n        updateStartDateText()\r\n        updateStartTimeText()\r\n    }\r\n\r\n    private fun updateStartDateText() {\r\n        if (mIsAllDayEvent) {\r\n            val date = Date()\r\n            val format = SimpleDateFormat(\"MMMM dd (E)\")\r\n            event_start_date.text = format.format(date)\r\n            event_start_date.setTextColor(resources.getColor(R.color.black))\r\n        } else {\r\n            event_start_date.text = \"From\"\r\n            event_start_date.setTextColor(resources.getColor(R.color.grey))\r\n        }\r\n        checkStartEndValidity()\r\n    }\r\n\r\n    private fun updateStartTimeText() {\r\n        val date = Date()\r\n        val format = SimpleDateFormat(\"E, dd MMM hh:mm a\")\r\n        event_start_time.text = format.format(date)\r\n        checkStartEndValidity()\r\n    }\r\n\r\n    private fun updateEndTexts() {\r\n        updateEndDateText()\r\n        updateEndTimeText()\r\n    }\r\n\r\n    private fun updateEndDateText() {\r\n        if (mIsAllDayEvent) {\r\n            val date = Date()\r\n            val format = SimpleDateFormat(\"MMMM dd (E)\")\r\n            event_end_date.text = format.format(date)\r\n            event_end_date.setTextColor(resources.getColor(R.color.black))\r\n        } else {\r\n            event_end_date.text = \"To\"\r\n            event_end_date.setTextColor(resources.getColor(R.color.grey))\r\n        }\r\n        checkStartEndValidity()\r\n    }\r\n\r\n    private fun updateEndTimeText() {\r\n        val date = Date()\r\n        val format = SimpleDateFormat(\"E, dd MMM hh:mm a\")\r\n        event_end_time.text = format.format(date)\r\n        checkStartEndValidity()\r\n    }\r\n\r\n    private fun updateTimeZoneText() {\r\n        event_time_zone.text = mEvent.getTimeZoneString()\r\n    }\r\n\r\n    private fun checkStartEndValidity() {\r\n        val textColor =\r\n            if (mEventStartDateTime.isAfter(mEventEndDateTime)) resources.getColor(R.color.red_text) else resources.getColor(\r\n                R.color.black\r\n            )\r\n        event_end_time.setTextColor(textColor)\r\n    }\r\n\r\n    private fun showOnMap() {\r\n        if (event_location.value.isEmpty()) {\r\n            toast(R.string.please_fill_location)\r\n            return\r\n        }\r\n\r\n        val pattern = Pattern.compile(LAT_LON_PATTERN)\r\n        val locationValue = event_location.value\r\n        val uri = if (pattern.matcher(locationValue).find()) {\r\n            val delimiter = if (locationValue.contains(';')) \";\" else \",\"\r\n            val parts = locationValue.split(delimiter)\r\n            val latitude = parts.first()\r\n            val longitude = parts.last()\r\n            Uri.parse(\"geo:$latitude,$longitude\")\r\n        } else {\r\n            val location = Uri.encode(locationValue)\r\n            Uri.parse(\"geo:0,0?q=$location\")\r\n        }\r\n\r\n        val intent = Intent(Intent.ACTION_VIEW, uri)\r\n        launchActivityIntent(intent)\r\n    }\r\n\r\n    private fun setupStartDate() {\r\n        hideKeyboard()\r\n        config.backgroundColor.getContrastColor()\r\n        val datepicker = DatePickerDialog(\r\n            this,\r\n            mDialogTheme,\r\n            startDateSetListener,\r\n            mEventStartDateTime.year,\r\n            mEventStartDateTime.monthOfYear - 1,\r\n            mEventStartDateTime.dayOfMonth\r\n        )\r\n\r\n        datepicker.datePicker.firstDayOfWeek =\r\n            if (config.isSundayFirst) Calendar.SUNDAY else Calendar.MONDAY\r\n        datepicker.show()\r\n    }\r\n\r\n    private fun setupStartTime() {\r\n        hideKeyboard()\r\n        TimePickerDialog(\r\n            this,\r\n            mDialogTheme,\r\n            startTimeSetListener,\r\n            mEventStartDateTime.hourOfDay,\r\n            mEventStartDateTime.minuteOfHour,\r\n            config.use24HourFormat\r\n        ).show()\r\n    }\r\n\r\n    private fun setupEndDate() {\r\n        hideKeyboard()\r\n        val datepicker = DatePickerDialog(\r\n            this,\r\n            mDialogTheme,\r\n            endDateSetListener,\r\n            mEventEndDateTime.year,\r\n            mEventEndDateTime.monthOfYear - 1,\r\n            mEventEndDateTime.dayOfMonth\r\n        )\r\n\r\n        datepicker.datePicker.firstDayOfWeek =\r\n            if (config.isSundayFirst) Calendar.SUNDAY else Calendar.MONDAY\r\n        datepicker.show()\r\n    }\r\n\r\n    private fun setupEndTime() {\r\n        hideKeyboard()\r\n        TimePickerDialog(\r\n            this,\r\n            mDialogTheme,\r\n            endTimeSetListener,\r\n            mEventEndDateTime.hourOfDay,\r\n            mEventEndDateTime.minuteOfHour,\r\n            config.use24HourFormat\r\n        ).show()\r\n    }\r\n\r\n    private val startDateSetListener =\r\n        DatePickerDialog.OnDateSetListener { view, year, monthOfYear, dayOfMonth ->\r\n            dateSet(year, monthOfYear, dayOfMonth, true)\r\n        }\r\n\r\n    private val startTimeSetListener =\r\n        TimePickerDialog.OnTimeSetListener { view, hourOfDay, minute ->\r\n            timeSet(hourOfDay, minute, true)\r\n        }\r\n\r\n    private val endDateSetListener =\r\n        DatePickerDialog.OnDateSetListener { view, year, monthOfYear, dayOfMonth ->\r\n            dateSet(\r\n                year,\r\n                monthOfYear,\r\n                dayOfMonth,\r\n                false\r\n            )\r\n        }\r\n\r\n    private val endTimeSetListener = TimePickerDialog.OnTimeSetListener { view, hourOfDay, minute ->\r\n        timeSet(\r\n            hourOfDay,\r\n            minute,\r\n            false\r\n        )\r\n    }\r\n\r\n    private fun dateSet(year: Int, month: Int, day: Int, isStart: Boolean) {\r\n        if (isStart) {\r\n            val diff = mEventEndDateTime.seconds() - mEventStartDateTime.seconds()\r\n\r\n            mEventStartDateTime = mEventStartDateTime.withDate(year, month + 1, day)\r\n            updateStartDateText()\r\n            checkRepeatRule()\r\n\r\n            mEventEndDateTime = mEventStartDateTime.plusSeconds(diff.toInt())\r\n            updateEndTexts()\r\n        } else {\r\n            mEventEndDateTime = mEventEndDateTime.withDate(year, month + 1, day)\r\n            updateEndDateText()\r\n        }\r\n    }\r\n\r\n    private fun timeSet(hours: Int, minutes: Int, isStart: Boolean) {\r\n        try {\r\n            if (isStart) {\r\n                val diff = mEventEndDateTime.seconds() - mEventStartDateTime.seconds()\r\n\r\n                mEventStartDateTime =\r\n                    mEventStartDateTime.withHourOfDay(hours).withMinuteOfHour(minutes)\r\n                updateStartTimeText()\r\n\r\n                mEventEndDateTime = mEventStartDateTime.plusSeconds(diff.toInt())\r\n                updateEndTexts()\r\n            } else {\r\n                mEventEndDateTime = mEventEndDateTime.withHourOfDay(hours).withMinuteOfHour(minutes)\r\n                updateEndTimeText()\r\n            }\r\n        } catch (e: Exception) {\r\n            timeSet(hours + 1, minutes, isStart)\r\n            return\r\n        }\r\n    }\r\n\r\n    private fun setupTimeZone() {\r\n        Intent(this, SelectTimeZoneActivity::class.java).apply {\r\n            putExtra(CURRENT_TIME_ZONE, mEvent.getTimeZoneString())\r\n            startActivityForResult(this, SELECT_TIME_ZONE_INTENT)\r\n        }\r\n    }\r\n\r\n    private fun checkRepeatRule() {\r\n        if (mRepeatInterval.isXWeeklyRepetition()) {\r\n            val day = mRepeatRule\r\n            if (day == MONDAY_BIT || day == TUESDAY_BIT || day == WEDNESDAY_BIT || day == THURSDAY_BIT || day == FRIDAY_BIT || day == SATURDAY_BIT || day == SUNDAY_BIT) {\r\n                setRepeatRule(Math.pow(2.0, (mEventStartDateTime.dayOfWeek - 1).toDouble()).toInt())\r\n            }\r\n        } else if (mRepeatInterval.isXMonthlyRepetition() || mRepeatInterval.isXYearlyRepetition()) {\r\n            if (mRepeatRule == REPEAT_LAST_DAY && !isLastDayOfTheMonth()) {\r\n                mRepeatRule = REPEAT_SAME_DAY\r\n            }\r\n            checkRepetitionRuleText()\r\n        }\r\n    }\r\n\r\n    private fun fillAvailableContacts() {\r\n        mAvailableContacts = getEmails()\r\n\r\n        val names = getNames()\r\n        mAvailableContacts.forEach {\r\n            val contactId = it.contactId\r\n            val contact = names.firstOrNull { it.contactId == contactId }\r\n            val name = contact?.name\r\n            if (name != null) {\r\n                it.name = name\r\n            }\r\n\r\n            val photoUri = contact?.photoUri\r\n            if (photoUri != null) {\r\n                it.photoUri = photoUri\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun updateAttendees() {\r\n        val currentCalendar =\r\n            calDAVHelper.getCalDAVCalendars(\"\", true).firstOrNull { it.id == mEventCalendarId }\r\n        mAttendees.forEach {\r\n            it.isMe = it.email == currentCalendar?.accountName\r\n        }\r\n\r\n        mAttendees.sortWith(compareBy<Attendee>\r\n        { it.isMe }.thenBy\r\n        { it.status == Attendees.ATTENDEE_STATUS_ACCEPTED }.thenBy\r\n        { it.status == Attendees.ATTENDEE_STATUS_DECLINED }.thenBy\r\n        { it.status == Attendees.ATTENDEE_STATUS_TENTATIVE }.thenBy\r\n        { it.status })\r\n        mAttendees.reverse()\r\n\r\n        runOnUiThread {\r\n            mAttendees.forEach {\r\n                val attendee = it\r\n                val deviceContact =\r\n                    mAvailableContacts.firstOrNull { it.email.isNotEmpty() && it.email == attendee.email && it.photoUri.isNotEmpty() }\r\n                if (deviceContact != null) {\r\n                    attendee.photoUri = deviceContact.photoUri\r\n                }\r\n                addAttendee(attendee)\r\n            }\r\n            addAttendee()\r\n\r\n\r\n        }\r\n    }\r\n\r\n    private fun addAttendee(attendee: Attendee? = null) {\r\n        val attendeeHolder = layoutInflater.inflate(\r\n            R.layout.item_attendee,\r\n            event_attendees_holder,\r\n            false\r\n        ) as RelativeLayout\r\n        val autoCompleteView = attendeeHolder.event_attendee\r\n        val selectedAttendeeHolder = attendeeHolder.event_contact_attendee\r\n        val selectedAttendeeDismiss = attendeeHolder.event_contact_dismiss\r\n\r\n        mAttendeeAutoCompleteViews.add(autoCompleteView)\r\n        autoCompleteView.onTextChangeListener {\r\n            if (mWasContactsPermissionChecked) {\r\n                checkNewAttendeeField()\r\n            } else {\r\n                handlePermission(PERMISSION_READ_CONTACTS) {\r\n                    checkNewAttendeeField()\r\n                    mWasContactsPermissionChecked = true\r\n                }\r\n            }\r\n        }\r\n\r\n        event_attendees_holder.addView(attendeeHolder)\r\n\r\n        val textColor = config.textColor\r\n        autoCompleteView.setColors(textColor, getAdjustedPrimaryColor(), config.backgroundColor)\r\n        selectedAttendeeHolder.event_contact_name.setColors(\r\n            textColor,\r\n            getAdjustedPrimaryColor(),\r\n            config.backgroundColor\r\n        )\r\n        selectedAttendeeHolder.event_contact_me_status.setColors(\r\n            textColor,\r\n            getAdjustedPrimaryColor(),\r\n            config.backgroundColor\r\n        )\r\n        selectedAttendeeDismiss.applyColorFilter(textColor)\r\n\r\n        selectedAttendeeDismiss.setOnClickListener {\r\n            attendeeHolder.beGone()\r\n            mSelectedContacts =\r\n                mSelectedContacts.filter { it.toString() != selectedAttendeeDismiss.tag }\r\n                    .toMutableList() as ArrayList<Attendee>\r\n        }\r\n\r\n        val adapter = AutoCompleteTextViewAdapter(this, mAvailableContacts)\r\n        autoCompleteView.setAdapter(adapter)\r\n        autoCompleteView.imeOptions = EditorInfo.IME_ACTION_NEXT\r\n        autoCompleteView.setOnItemClickListener { parent, view, position, id ->\r\n            val currAttendees = (autoCompleteView.adapter as AutoCompleteTextViewAdapter).resultList\r\n            val selectedAttendee = currAttendees[position]\r\n            addSelectedAttendee(selectedAttendee, autoCompleteView, selectedAttendeeHolder)\r\n        }\r\n\r\n        if (attendee != null) {\r\n            addSelectedAttendee(attendee, autoCompleteView, selectedAttendeeHolder)\r\n        }\r\n    }\r\n\r\n    private fun addSelectedAttendee(\r\n        attendee: Attendee,\r\n        autoCompleteView: MyAutoCompleteTextView,\r\n        selectedAttendeeHolder: RelativeLayout\r\n    ) {\r\n        mSelectedContacts.add(attendee)\r\n\r\n        autoCompleteView.beGone()\r\n        autoCompleteView.focusSearch(View.FOCUS_DOWN)?.requestFocus()\r\n\r\n        selectedAttendeeHolder.apply {\r\n            beVisible()\r\n\r\n            val attendeeStatusBackground =\r\n                resources.getDrawable(R.drawable.attendee_status_circular_background)\r\n            (attendeeStatusBackground as LayerDrawable).findDrawableByLayerId(R.id.attendee_status_circular_background)\r\n                .applyColorFilter(config.backgroundColor)\r\n            event_contact_status_image.apply {\r\n                background = attendeeStatusBackground\r\n                setImageDrawable(getAttendeeStatusImage(attendee))\r\n                beVisibleIf(attendee.showStatusImage())\r\n            }\r\n\r\n            event_contact_name.text =\r\n                if (attendee.isMe) getString(R.string.my_status) else attendee.getPublicName()\r\n            if (attendee.isMe) {\r\n                (event_contact_name.layoutParams as RelativeLayout.LayoutParams).addRule(\r\n                    RelativeLayout.START_OF,\r\n                    event_contact_me_status.id\r\n                )\r\n            }\r\n\r\n            val placeholder = BitmapDrawable(\r\n                resources,\r\n                SimpleContactsHelper(context).getContactLetterIcon(event_contact_name.value)\r\n            )\r\n            event_contact_image.apply {\r\n                attendee.updateImage(applicationContext, this, placeholder)\r\n                beVisible()\r\n            }\r\n\r\n            event_contact_dismiss.apply {\r\n                tag = attendee.toString()\r\n                beGoneIf(attendee.isMe)\r\n            }\r\n\r\n            if (attendee.isMe) {\r\n                updateAttendeeMe(this, attendee)\r\n            }\r\n\r\n            event_contact_me_status.apply {\r\n                beVisibleIf(attendee.isMe)\r\n            }\r\n\r\n            if (attendee.isMe) {\r\n                event_contact_attendee.setOnClickListener {\r\n                    val items = arrayListOf(\r\n                        RadioItem(Attendees.ATTENDEE_STATUS_ACCEPTED, getString(R.string.going)),\r\n                        RadioItem(\r\n                            Attendees.ATTENDEE_STATUS_DECLINED,\r\n                            getString(R.string.not_going)\r\n                        ),\r\n                        RadioItem(\r\n                            Attendees.ATTENDEE_STATUS_TENTATIVE,\r\n                            getString(R.string.maybe_going)\r\n                        )\r\n                    )\r\n\r\n                    RadioGroupDialog(this@EventActivity, items, attendee.status) {\r\n                        attendee.status = it as Int\r\n                        updateAttendeeMe(this, attendee)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun getAttendeeStatusImage(attendee: Attendee): Drawable {\r\n        return resources.getDrawable(\r\n            when (attendee.status) {\r\n                Attendees.ATTENDEE_STATUS_ACCEPTED -> R.drawable.ic_event\r\n                Attendees.ATTENDEE_STATUS_DECLINED -> R.drawable.ic_event\r\n                else -> R.drawable.ic_event\r\n            }\r\n        )\r\n    }\r\n\r\n    private fun updateAttendeeMe(holder: RelativeLayout, attendee: Attendee) {\r\n        holder.apply {\r\n            event_contact_me_status.text = getString(\r\n                when (attendee.status) {\r\n                    Attendees.ATTENDEE_STATUS_ACCEPTED -> R.string.going\r\n                    Attendees.ATTENDEE_STATUS_DECLINED -> R.string.not_going\r\n                    Attendees.ATTENDEE_STATUS_TENTATIVE -> R.string.maybe_going\r\n                    else -> R.string.invited\r\n                }\r\n            )\r\n\r\n            event_contact_status_image.apply {\r\n                beVisibleIf(attendee.showStatusImage())\r\n                setImageDrawable(getAttendeeStatusImage(attendee))\r\n            }\r\n\r\n            mAttendees.firstOrNull { it.isMe }?.status = attendee.status\r\n        }\r\n    }\r\n\r\n    private fun checkNewAttendeeField() {\r\n        if (mAttendeeAutoCompleteViews.none { it.isVisible() && it.value.isEmpty() }) {\r\n            addAttendee()\r\n        }\r\n    }\r\n\r\n    private fun getAllAttendees(isSavingEvent: Boolean): String {\r\n        var attendees = ArrayList<Attendee>()\r\n        mSelectedContacts.forEach {\r\n            attendees.add(it)\r\n        }\r\n\r\n        val customEmails = mAttendeeAutoCompleteViews.filter { it.isVisible() }.map { it.value }\r\n            .filter { it.isNotEmpty() }.toMutableList() as ArrayList<String>\r\n        customEmails.mapTo(attendees) {\r\n            Attendee(\r\n                0,\r\n                \"\",\r\n                it,\r\n                Attendees.ATTENDEE_STATUS_INVITED,\r\n                \"\",\r\n                false,\r\n                Attendees.RELATIONSHIP_NONE\r\n            )\r\n        }\r\n        attendees = attendees.distinctBy { it.email }.toMutableList() as ArrayList<Attendee>\r\n\r\n        if (mEvent.id == null && isSavingEvent && attendees.isNotEmpty()) {\r\n            val currentCalendar =\r\n                calDAVHelper.getCalDAVCalendars(\"\", true).firstOrNull { it.id == mEventCalendarId }\r\n            mAvailableContacts.firstOrNull { it.email == currentCalendar?.accountName }?.apply {\r\n                attendees =\r\n                    attendees.filter { it.email != currentCalendar?.accountName }\r\n                        .toMutableList() as ArrayList<Attendee>\r\n                status = Attendees.ATTENDEE_STATUS_ACCEPTED\r\n                relationship = Attendees.RELATIONSHIP_ORGANIZER\r\n                attendees.add(this)\r\n            }\r\n        }\r\n\r\n        return Gson().toJson(attendees)\r\n    }\r\n\r\n    private fun getNames(): List<Attendee> {\r\n        val contacts = ArrayList<Attendee>()\r\n        val uri = Data.CONTENT_URI\r\n        val projection = arrayOf(\r\n            Data.CONTACT_ID,\r\n            StructuredName.PREFIX,\r\n            StructuredName.GIVEN_NAME,\r\n            StructuredName.MIDDLE_NAME,\r\n            StructuredName.FAMILY_NAME,\r\n            StructuredName.SUFFIX,\r\n            StructuredName.PHOTO_THUMBNAIL_URI\r\n        )\r\n\r\n        val selection = \"${Data.MIMETYPE} = ?\"\r\n        val selectionArgs = arrayOf(StructuredName.CONTENT_ITEM_TYPE)\r\n\r\n        queryCursor(uri, projection, selection, selectionArgs) { cursor ->\r\n            val id = cursor.getIntValue(Data.CONTACT_ID)\r\n            val prefix = cursor.getStringValue(StructuredName.PREFIX) ?: \"\"\r\n            val firstName = cursor.getStringValue(StructuredName.GIVEN_NAME) ?: \"\"\r\n            val middleName = cursor.getStringValue(StructuredName.MIDDLE_NAME) ?: \"\"\r\n            val surname = cursor.getStringValue(StructuredName.FAMILY_NAME) ?: \"\"\r\n            val suffix = cursor.getStringValue(StructuredName.SUFFIX) ?: \"\"\r\n            val photoUri = cursor.getStringValue(StructuredName.PHOTO_THUMBNAIL_URI) ?: \"\"\r\n\r\n            val names = arrayListOf(prefix, firstName, middleName, surname, suffix).filter {\r\n                it.trim().isNotEmpty()\r\n            }\r\n            val fullName = TextUtils.join(\" \", names).trim()\r\n            if (fullName.isNotEmpty() || photoUri.isNotEmpty()) {\r\n                val contact = Attendee(\r\n                    id,\r\n                    fullName,\r\n                    \"\",\r\n                    Attendees.ATTENDEE_STATUS_NONE,\r\n                    photoUri,\r\n                    false,\r\n                    Attendees.RELATIONSHIP_NONE\r\n                )\r\n                contacts.add(contact)\r\n            }\r\n        }\r\n        return contacts\r\n    }\r\n\r\n    private fun getEmails(): ArrayList<Attendee> {\r\n        val contacts = ArrayList<Attendee>()\r\n        val uri = CommonDataKinds.Email.CONTENT_URI\r\n        val projection = arrayOf(\r\n            Data.CONTACT_ID,\r\n            CommonDataKinds.Email.DATA\r\n        )\r\n\r\n        queryCursor(uri, projection) { cursor ->\r\n            val id = cursor.getIntValue(Data.CONTACT_ID)\r\n            val email = cursor.getStringValue(CommonDataKinds.Email.DATA) ?: return@queryCursor\r\n            val contact = Attendee(\r\n                id,\r\n                \"\",\r\n                email,\r\n                Attendees.ATTENDEE_STATUS_NONE,\r\n                \"\",\r\n                false,\r\n                Attendees.RELATIONSHIP_NONE\r\n            )\r\n            contacts.add(contact)\r\n        }\r\n\r\n        return contacts\r\n    }\r\n\r\n    private fun updateIconColors() {\r\n        event_show_on_map.applyColorFilter(getAdjustedPrimaryColor())\r\n        val textColor = config.textColor\r\n        arrayOf(\r\n            event_reminder_image,\r\n            event_type_image,\r\n            event_caldav_calendar_image,\r\n            event_reminder_1_type,\r\n            event_reminder_2_type,\r\n            event_reminder_3_type,\r\n            event_availability_image\r\n        ).forEach {\r\n            it.applyColorFilter(textColor)\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/daily/events/calender/Activity/EventActivity.kt	(revision 1709be0c772bd853ba3d7f44f72d3d326dff9cc8)
+++ app/src/main/java/com/daily/events/calender/Activity/EventActivity.kt	(date 1632463002418)
@@ -327,45 +327,45 @@
         event_reminder_2.setOnClickListener { showReminder2Dialog() }
         event_reminder_3.setOnClickListener { showReminder3Dialog() }
 
-        event_reminder_1_type.setOnClickListener {
-            showReminderTypePicker(mReminder1Type) {
-                mReminder1Type = it
-                updateReminderTypeImage(
-                    event_reminder_1_type,
-                    Reminder(mReminder1Minutes, mReminder1Type)
-                )
-            }
-        }
+//        event_reminder_1_type.setOnClickListener {
+//            showReminderTypePicker(mReminder1Type) {
+//                mReminder1Type = it
+//                updateReminderTypeImage(
+//                    event_reminder_1_type,
+//                    Reminder(mReminder1Minutes, mReminder1Type)
+//                )
+//            }
+//        }
 
-        event_reminder_2_type.setOnClickListener {
-            showReminderTypePicker(mReminder2Type) {
-                mReminder2Type = it
-                updateReminderTypeImage(
-                    event_reminder_2_type,
-                    Reminder(mReminder2Minutes, mReminder2Type)
-                )
-            }
-        }
+//        event_reminder_2_type.setOnClickListener {
+//            showReminderTypePicker(mReminder2Type) {
+//                mReminder2Type = it
+//                updateReminderTypeImage(
+//                    event_reminder_2_type,
+//                    Reminder(mReminder2Minutes, mReminder2Type)
+//                )
+//            }
+//        }
 
-        event_reminder_3_type.setOnClickListener {
-            showReminderTypePicker(mReminder3Type) {
-                mReminder3Type = it
-                updateReminderTypeImage(
-                    event_reminder_3_type,
-                    Reminder(mReminder3Minutes, mReminder3Type)
-                )
-            }
-        }
+//        event_reminder_3_type.setOnClickListener {
+//            showReminderTypePicker(mReminder3Type) {
+//                mReminder3Type = it
+//                updateReminderTypeImage(
+//                    event_reminder_3_type,
+//                    Reminder(mReminder3Minutes, mReminder3Type)
+//                )
+//            }
+//        }
 
-        event_availability.setOnClickListener {
-            showAvailabilityPicker(mAvailability) {
-                mAvailability = it
-                updateAvailabilityText()
-                updateAvailabilityImage()
-            }
-        }
+//        event_availability.setOnClickListener {
+//            showAvailabilityPicker(mAvailability) {
+//                mAvailability = it
+//                updateAvailabilityText()
+//                updateAvailabilityImage()
+//            }
+//        }
 
-        event_type_holder.setOnClickListener { showEventTypeDialog() }
+//        event_type_holder.setOnClickListener { showEventTypeDialog() }
         event_all_day.apply {
             isChecked = mEvent.flags and FLAG_ALL_DAY != 0
             jumpDrawablesToCurrentState()
@@ -373,7 +373,7 @@
 
         updateTextColors(event_scrollview)
         updateIconColors()
-        event_time_zone_image.beVisibleIf(config.allowChangingTimeZones)
+//        event_time_zone_image.beVisibleIf(config.allowChangingTimeZones)
         event_time_zone.beVisibleIf(config.allowChangingTimeZones)
         mWasActivityInitialized = true
     }
@@ -612,8 +612,8 @@
             mEventEndDateTime = Formatter.getDateTimeFromTS(realStart + duration)
         }
 
-        event_title.text = mEvent.title
-        event_location.text = mEvent.location
+        event_title.setText(mEvent.title)
+        event_location.setText(mEvent.location)
         event_description.setText(mEvent.description)
 
         mReminder1Minutes = mEvent.reminder1Minutes
@@ -664,8 +664,8 @@
                 toggleAllDay(true)
             }
 
-            event_title.text = intent.getStringExtra("title")
-            event_location.text = intent.getStringExtra("eventLocation")
+            event_title.setText(intent.getStringExtra("title"))
+            event_location.setText(intent.getStringExtra("eventLocation"))
             event_description.setText(intent.getStringExtra("description"))
             if (event_description.value.isNotEmpty()) {
                 event_description.movementMethod = LinkMovementMethod.getInstance()
@@ -796,18 +796,22 @@
         event_repetition_limit.text = when {
             mRepeatLimit == 0L -> {
                 event_repetition_limit_label.text = getString(R.string.repeat)
+                event_repetition_limit_label.setTextColor(resources.getColor(R.color.grey))
                 resources.getString(R.string.forever)
             }
             mRepeatLimit > 0 -> {
                 event_repetition_limit_label.text = getString(R.string.repeat_till)
+                event_repetition_limit_label.setTextColor(resources.getColor(R.color.grey))
                 val repeatLimitDateTime = Formatter.getDateTimeFromTS(mRepeatLimit)
                 Formatter.getFullDate(applicationContext, repeatLimitDateTime)
             }
             else -> {
                 event_repetition_limit_label.text = getString(R.string.repeat)
+                event_repetition_limit_label.setTextColor(resources.getColor(R.color.grey))
                 "${-mRepeatLimit} ${getString(R.string.times)}"
             }
         }
+        event_repetition_limit.setTextColor(resources.getColor(R.color.black))
     }
 
     private fun showRepetitionRuleDialog() {
@@ -987,6 +991,7 @@
                         R.string.repeat else R.string.repeat_on
 
                 event_repetition_rule_label.text = getString(repeatString)
+                event_repetition_rule_label.setTextColor(resources.getColor(R.color.grey))
                 event_repetition_rule.text = getMonthlyRepetitionRuleText()
             }
             mRepeatInterval.isXYearlyRepetition() -> {
@@ -995,6 +1000,7 @@
                         R.string.repeat else R.string.repeat_on
 
                 event_repetition_rule_label.text = getString(repeatString)
+                event_repetition_rule_label.setTextColor(resources.getColor(R.color.grey))
                 event_repetition_rule.text = getYearlyRepetitionRuleText()
             }
         }
@@ -1028,6 +1034,7 @@
 
     private fun updateReminder1Text() {
         event_reminder_1.text = getFormattedMinutes(mReminder1Minutes)
+        event_reminder_1.setTextColor(resources.getColor(R.color.black))
     }
 
     private fun updateReminder2Text() {
@@ -1035,11 +1042,10 @@
             beGoneIf(event_reminder_2.isGone() && mReminder1Minutes == REMINDER_OFF)
             if (mReminder2Minutes == REMINDER_OFF) {
                 text = resources.getString(R.string.add_another_reminder)
-                alpha = 0.4f
             } else {
                 text = getFormattedMinutes(mReminder2Minutes)
-                alpha = 1f
             }
+            setTextColor(resources.getColor(R.color.black))
         }
     }
 
@@ -1048,11 +1054,10 @@
             beGoneIf(event_reminder_3.isGone() && (mReminder2Minutes == REMINDER_OFF || mReminder1Minutes == REMINDER_OFF))
             if (mReminder3Minutes == REMINDER_OFF) {
                 text = resources.getString(R.string.add_another_reminder)
-                alpha = 0.4f
             } else {
                 text = getFormattedMinutes(mReminder3Minutes)
-                alpha = 1f
             }
+            setTextColor(resources.getColor(R.color.black))
         }
     }
 
@@ -1077,18 +1082,18 @@
     }
 
     private fun updateReminderTypeImages() {
-        updateReminderTypeImage(event_reminder_1_type, Reminder(mReminder1Minutes, mReminder1Type))
-        updateReminderTypeImage(event_reminder_2_type, Reminder(mReminder2Minutes, mReminder2Type))
-        updateReminderTypeImage(event_reminder_3_type, Reminder(mReminder3Minutes, mReminder3Type))
+//        updateReminderTypeImage(event_reminder_1_type, Reminder(mReminder1Minutes, mReminder1Type))
+//        updateReminderTypeImage(event_reminder_2_type, Reminder(mReminder2Minutes, mReminder2Type))
+//        updateReminderTypeImage(event_reminder_3_type, Reminder(mReminder3Minutes, mReminder3Type))
     }
 
     private fun updateCalDAVVisibility() {
         val isSyncedEvent = mEventCalendarId != STORED_LOCALLY_ONLY
         event_attendees_holder.beVisibleIf(isSyncedEvent)
-        event_attendees_divider.beVisibleIf(isSyncedEvent)
-        event_availability_divider.beVisibleIf(isSyncedEvent)
-        event_availability_image.beVisibleIf(isSyncedEvent)
-        event_availability.beVisibleIf(isSyncedEvent)
+//        event_attendees_divider.beVisibleIf(isSyncedEvent)
+//        event_availability_divider.beVisibleIf(isSyncedEvent)
+//        event_availability_image.beVisibleIf(isSyncedEvent)
+//        event_availability.beVisibleIf(isSyncedEvent)
     }
 
     private fun updateReminderTypeImage(view: ImageView, reminder: Reminder) {
@@ -1103,14 +1108,14 @@
         val drawable =
             if (mAvailability == Attendees.AVAILABILITY_FREE) R.drawable.ic_event else R.drawable.ic_event_occupied
         val icon = resources.getColoredDrawableWithColor(drawable, config.textColor)
-        event_availability_image.setImageDrawable(icon)
+//        event_availability_image.setImageDrawable(icon)
     }
 
     private fun updateAvailabilityText() {
-        event_availability.text =
-            if (mAvailability == Attendees.AVAILABILITY_FREE) getString(R.string.status_free) else getString(
-                R.string.status_busy
-            )
+//        event_availability.text =
+//            if (mAvailability == Attendees.AVAILABILITY_FREE) getString(R.string.status_free) else getString(
+//                R.string.status_busy
+//            )
     }
 
     private fun updateRepetitionText() {
@@ -1122,12 +1127,12 @@
             val eventType = eventTypesDB.getEventTypeWithId(mEventTypeId)
             if (eventType != null) {
                 runOnUiThread {
-                    event_type.text = eventType.title
-                    event_type_color.setFillWithStroke(
-                        eventType.color,
-                        config.backgroundColor,
-                        getCornerRadius()
-                    )
+//                    event_type.text = eventType.title
+//                    event_type_color.setFillWithStroke(
+//                        eventType.color,
+//                        config.backgroundColor,
+//                        getCornerRadius()
+//                    )
                 }
             }
         }
@@ -1135,9 +1140,9 @@
 
     private fun updateCalDAVCalendar() {
         if (config.caldavSync) {
-            event_caldav_calendar_image.beVisible()
+//            event_caldav_calendar_image.beVisible()
             event_caldav_calendar_holder.beVisible()
-            event_caldav_calendar_divider.beVisible()
+//            event_caldav_calendar_divider.beVisible()
 
             val calendars = calDAVHelper.getCalDAVCalendars("", true).filter {
                 it.canWrite() && config.getSyncedCalendarIdsAsList().contains(it.id)
@@ -1178,11 +1183,11 @@
         calendars.firstOrNull { it.id == calendarId }
 
     private fun updateCurrentCalendarInfo(currentCalendar: CalDAVCalendar?) {
-        event_type_image.beVisibleIf(currentCalendar == null)
-        event_type_holder.beVisibleIf(currentCalendar == null)
-        event_caldav_calendar_divider.beVisibleIf(currentCalendar == null)
+//        event_type_image.beVisibleIf(currentCalendar == null)
+//        event_type_holder.beVisibleIf(currentCalendar == null)
+//        event_caldav_calendar_divider.beVisibleIf(currentCalendar == null)
         event_caldav_calendar_email.beGoneIf(currentCalendar == null)
-        event_caldav_calendar_color.beGoneIf(currentCalendar == null)
+//        event_caldav_calendar_color.beGoneIf(currentCalendar == null)
 
         if (currentCalendar == null) {
             mEventCalendarId = STORED_LOCALLY_ONLY
@@ -1204,11 +1209,11 @@
                         ?: currentCalendar.color
 
                 runOnUiThread {
-                    event_caldav_calendar_color.setFillWithStroke(
-                        calendarColor,
-                        config.backgroundColor,
-                        getCornerRadius()
-                    )
+//                    event_caldav_calendar_color.setFillWithStroke(
+//                        calendarColor,
+//                        config.backgroundColor,
+//                        getCornerRadius()
+//                    )
                     event_caldav_calendar_name.apply {
                         text = currentCalendar.displayName
                         setPadding(
@@ -2069,17 +2074,17 @@
 
     private fun updateIconColors() {
         event_show_on_map.applyColorFilter(getAdjustedPrimaryColor())
-        val textColor = config.textColor
-        arrayOf(
-            event_reminder_image,
-            event_type_image,
-            event_caldav_calendar_image,
-            event_reminder_1_type,
-            event_reminder_2_type,
-            event_reminder_3_type,
-            event_availability_image
-        ).forEach {
-            it.applyColorFilter(textColor)
-        }
+//        val textColor = config.textColor
+//        arrayOf(
+//            event_reminder_image,
+//            event_type_image,
+//            event_caldav_calendar_image,
+//            event_reminder_1_type,
+//            event_reminder_2_type,
+//            event_reminder_3_type,
+//            event_availability_image
+//        ).forEach {
+//            it.applyColorFilter(textColor)
+//        }
     }
 }
Index: commons/src/main/kotlin/com/simplemobiletools/commons/dialogs/RadioGroupDialog.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.simplemobiletools.commons.dialogs\r\n\r\nimport android.app.Activity\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.RadioButton\r\nimport android.widget.RadioGroup\r\nimport androidx.appcompat.app.AlertDialog\r\nimport com.simplemobiletools.commons.R\r\nimport com.simplemobiletools.commons.extensions.onGlobalLayout\r\nimport com.simplemobiletools.commons.extensions.setupDialogStuff\r\nimport com.simplemobiletools.commons.models.RadioItem\r\nimport kotlinx.android.synthetic.main.dialog_radio_group.view.*\r\nimport java.util.*\r\n\r\nclass RadioGroupDialog(\r\n    val activity: Activity,\r\n    val items: ArrayList<RadioItem>,\r\n    val checkedItemId: Int = -1,\r\n    val titleId: Int = 0,\r\n    showOKButton: Boolean = false,\r\n    val cancelCallback: (() -> Unit)? = null,\r\n    val callback: (newValue: Any) -> Unit\r\n) {\r\n    private val dialog: AlertDialog\r\n    private var wasInit = false\r\n    private var selectedItemId = -1\r\n\r\n    init {\r\n        val view = activity.layoutInflater.inflate(R.layout.dialog_radio_group, null)\r\n        view.dialog_radio_group.apply {\r\n            for (i in 0 until items.size) {\r\n                val radioButton = (activity.layoutInflater.inflate(\r\n                    R.layout.radio_button,\r\n                    null\r\n                ) as RadioButton).apply {\r\n                    text = items[i].title\r\n                    isChecked = items[i].id == checkedItemId\r\n                    id = i\r\n                    setOnClickListener { itemSelected(i) }\r\n                }\r\n\r\n                if (items[i].id == checkedItemId) {\r\n                    selectedItemId = i\r\n                }\r\n\r\n                addView(\r\n                    radioButton,\r\n                    RadioGroup.LayoutParams(\r\n                        ViewGroup.LayoutParams.MATCH_PARENT,\r\n                        ViewGroup.LayoutParams.WRAP_CONTENT\r\n                    )\r\n                )\r\n            }\r\n        }\r\n\r\n        val builder = AlertDialog.Builder(activity)\r\n            .setOnCancelListener { cancelCallback?.invoke() }\r\n\r\n        if (selectedItemId != -1 && showOKButton) {\r\n            builder.setPositiveButton(R.string.ok) { dialog, which -> itemSelected(selectedItemId) }\r\n        }\r\n\r\n        dialog = builder.create().apply {\r\n            activity.setupDialogStuff(view, this, titleId)\r\n        }\r\n\r\n        if (selectedItemId != -1) {\r\n            view.dialog_radio_holder.apply {\r\n                onGlobalLayout {\r\n                    scrollY =\r\n                        view.dialog_radio_group.findViewById<View>(selectedItemId).bottom - height\r\n                }\r\n            }\r\n        }\r\n\r\n        wasInit = true\r\n    }\r\n\r\n    private fun itemSelected(checkedId: Int) {\r\n        if (wasInit) {\r\n            callback(items[checkedId].value)\r\n            dialog.dismiss()\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- commons/src/main/kotlin/com/simplemobiletools/commons/dialogs/RadioGroupDialog.kt	(revision 1709be0c772bd853ba3d7f44f72d3d326dff9cc8)
+++ commons/src/main/kotlin/com/simplemobiletools/commons/dialogs/RadioGroupDialog.kt	(date 1632457768130)
@@ -36,6 +36,11 @@
                 ) as RadioButton).apply {
                     text = items[i].title
                     isChecked = items[i].id == checkedItemId
+                    if(isChecked){
+                        setButtonTintList(activity.getResources().getColorStateList(R.color.theme_color));
+                    }else{
+                        setButtonTintList(activity.getResources().getColorStateList(R.color.md_grey));
+                    }
                     id = i
                     setOnClickListener { itemSelected(i) }
                 }
@@ -78,7 +83,9 @@
     }
 
     private fun itemSelected(checkedId: Int) {
+
         if (wasInit) {
+
             callback(items[checkedId].value)
             dialog.dismiss()
         }
Index: commons/src/main/res/layout/radio_button.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<RadioButton xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    android:id=\"@+id/dialog_radio_button\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"wrap_content\"\r\n    android:layout_gravity=\"start\"\r\n    android:checked=\"true\"\r\n    android:fontFamily=\"@font/roboto\"\r\n    android:layoutDirection=\"rtl\"\r\n    android:padding=\"@dimen/activity_margin\"\r\n    android:paddingRight=\"@dimen/_20sdp\"\r\n    android:text=\"@string/repeat_pattern\"\r\n    android:textAlignment=\"textStart\"\r\n    android:textColor=\"@color/md_grey_black_dark\"\r\n    android:textSize=\"@dimen/_12sdp\" />
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- commons/src/main/res/layout/radio_button.xml	(revision 1709be0c772bd853ba3d7f44f72d3d326dff9cc8)
+++ commons/src/main/res/layout/radio_button.xml	(date 1632465337964)
@@ -5,11 +5,11 @@
     android:layout_height="wrap_content"
     android:layout_gravity="start"
     android:checked="true"
-    android:fontFamily="@font/roboto"
-    android:layoutDirection="rtl"
     android:padding="@dimen/activity_margin"
     android:paddingRight="@dimen/_20sdp"
     android:text="@string/repeat_pattern"
     android:textAlignment="textStart"
+    android:fontFamily="@font/roboto"
+    android:layoutDirection="rtl"
     android:textColor="@color/md_grey_black_dark"
     android:textSize="@dimen/_12sdp" />
\ No newline at end of file
Index: commons/src/main/res/drawable/dialog_bg.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<shape xmlns:android=\"http://schemas.android.com/apk/res/android\">\r\n    <corners android:radius=\"25dp\" />\r\n    <solid android:color=\"@color/white\"></solid>\r\n</shape>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- commons/src/main/res/drawable/dialog_bg.xml	(revision 1709be0c772bd853ba3d7f44f72d3d326dff9cc8)
+++ commons/src/main/res/drawable/dialog_bg.xml	(date 1632461337371)
@@ -1,5 +1,5 @@
 <?xml version="1.0" encoding="utf-8"?>
 <shape xmlns:android="http://schemas.android.com/apk/res/android">
-    <corners android:radius="25dp" />
+    <corners android:radius="15dp" />
     <solid android:color="@color/white"></solid>
 </shape>
Index: app/src/main/java/com/daily/events/calender/Services/SnoozeService.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.simplemobiletools.calendar.pro.services\r\n\r\nimport android.app.IntentService\r\nimport android.content.Intent\r\nimport com.daily.events.calender.Extensions.config\r\nimport com.daily.events.calender.Extensions.eventsDB\r\nimport com.daily.events.calender.Extensions.rescheduleReminder\r\nimport com.daily.events.calender.helpers.EVENT_ID\r\n\r\nclass SnoozeService : IntentService(\"Snooze\") {\r\n    override fun onHandleIntent(intent: Intent?) {\r\n        if (intent != null) {\r\n            val eventId = intent.getLongExtra(EVENT_ID, 0L)\r\n            val event = eventsDB.getEventWithId(eventId)\r\n            rescheduleReminder(event, config.snoozeTime)\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/daily/events/calender/Services/SnoozeService.kt	(revision 1709be0c772bd853ba3d7f44f72d3d326dff9cc8)
+++ app/src/main/java/com/daily/events/calender/Services/SnoozeService.kt	(date 1632215948756)
@@ -1,4 +1,4 @@
-package com.simplemobiletools.calendar.pro.services
+package com.daily.events.calender.services
 
 import android.app.IntentService
 import android.content.Intent
Index: app/src/main/java/com/daily/events/calender/Services/WidgetService.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.simplemobiletools.calendar.pro.services\r\n\r\nimport android.content.Intent\r\nimport android.widget.RemoteViewsService\r\nimport com.daily.events.calender.Adapter.EventListWidgetAdapter\r\n\r\nclass WidgetService : RemoteViewsService() {\r\n    override fun onGetViewFactory(intent: Intent) = EventListWidgetAdapter(applicationContext)\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/daily/events/calender/Services/WidgetService.kt	(revision 1709be0c772bd853ba3d7f44f72d3d326dff9cc8)
+++ app/src/main/java/com/daily/events/calender/Services/WidgetService.kt	(date 1632215948772)
@@ -1,4 +1,4 @@
-package com.simplemobiletools.calendar.pro.services
+package com.daily.events.calender.services
 
 import android.content.Intent
 import android.widget.RemoteViewsService
Index: app/src/main/java/com/daily/events/calender/Services/WidgetServiceEmpty.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.simplemobiletools.calendar.pro.services\r\n\r\nimport android.content.Intent\r\nimport android.widget.RemoteViewsService\r\n\r\nclass WidgetServiceEmpty : RemoteViewsService() {\r\n    override fun onGetViewFactory(intent: Intent) = EventListWidgetAdapterEmpty(applicationContext)\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/daily/events/calender/Services/WidgetServiceEmpty.kt	(revision 1709be0c772bd853ba3d7f44f72d3d326dff9cc8)
+++ app/src/main/java/com/daily/events/calender/Services/WidgetServiceEmpty.kt	(date 1632215948764)
@@ -1,7 +1,8 @@
-package com.simplemobiletools.calendar.pro.services
+package com.daily.events.calender.services
 
 import android.content.Intent
 import android.widget.RemoteViewsService
+import com.daily.events.calender.Adapter.EventListWidgetAdapterEmpty
 
 class WidgetServiceEmpty : RemoteViewsService() {
     override fun onGetViewFactory(intent: Intent) = EventListWidgetAdapterEmpty(applicationContext)
Index: commons/src/main/res/layout/dialog_custom_interval_picker.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<ScrollView xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    android:id=\"@+id/dialog_custom_interval_scrollview\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"wrap_content\">\r\n\r\n    <LinearLayout\r\n        android:id=\"@+id/dialog_custom_interval_holder\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:orientation=\"vertical\"\r\n        android:paddingLeft=\"@dimen/activity_margin\"\r\n        android:paddingTop=\"@dimen/activity_margin\"\r\n        android:paddingRight=\"@dimen/activity_margin\">\r\n\r\n        <com.simplemobiletools.commons.views.MyEditText\r\n            android:id=\"@+id/dialog_custom_interval_value\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:digits=\"0123456789\"\r\n            android:ems=\"6\"\r\n            android:inputType=\"number\"\r\n            android:maxLength=\"5\"\r\n            android:textCursorDrawable=\"@null\"\r\n            android:textSize=\"@dimen/normal_text_size\" />\r\n\r\n        <RadioGroup\r\n            android:id=\"@+id/dialog_radio_view\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:paddingTop=\"@dimen/activity_margin\">\r\n\r\n            <com.simplemobiletools.commons.views.MyCompatRadioButton\r\n                android:id=\"@+id/dialog_radio_seconds\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:paddingTop=\"@dimen/activity_margin\"\r\n                android:paddingBottom=\"@dimen/activity_margin\"\r\n                android:text=\"@string/seconds_raw\" />\r\n\r\n            <com.simplemobiletools.commons.views.MyCompatRadioButton\r\n                android:id=\"@+id/dialog_radio_minutes\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:paddingTop=\"@dimen/activity_margin\"\r\n                android:paddingBottom=\"@dimen/activity_margin\"\r\n                android:text=\"@string/minutes_raw\" />\r\n\r\n            <com.simplemobiletools.commons.views.MyCompatRadioButton\r\n                android:id=\"@+id/dialog_radio_hours\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:paddingTop=\"@dimen/activity_margin\"\r\n                android:paddingBottom=\"@dimen/activity_margin\"\r\n                android:text=\"@string/hours_raw\" />\r\n\r\n            <com.simplemobiletools.commons.views.MyCompatRadioButton\r\n                android:id=\"@+id/dialog_radio_days\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:paddingTop=\"@dimen/activity_margin\"\r\n                android:paddingBottom=\"@dimen/activity_margin\"\r\n                android:text=\"@string/days_raw\" />\r\n\r\n        </RadioGroup>\r\n    </LinearLayout>\r\n</ScrollView>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- commons/src/main/res/layout/dialog_custom_interval_picker.xml	(revision 1709be0c772bd853ba3d7f44f72d3d326dff9cc8)
+++ commons/src/main/res/layout/dialog_custom_interval_picker.xml	(date 1632467213046)
@@ -13,7 +13,7 @@
         android:paddingTop="@dimen/activity_margin"
         android:paddingRight="@dimen/activity_margin">
 
-        <com.simplemobiletools.commons.views.MyEditText
+        <EditText
             android:id="@+id/dialog_custom_interval_value"
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
@@ -21,8 +21,14 @@
             android:ems="6"
             android:inputType="number"
             android:maxLength="5"
+            android:hint="Enter here..."
+            android:textColorHint="@color/grey"
             android:textCursorDrawable="@null"
-            android:textSize="@dimen/normal_text_size" />
+            android:backgroundTint="@color/theme_color"
+            android:textColor="@color/md_grey_black_dark"
+            android:textSize="@dimen/_12sdp"
+            android:fontFamily="@font/roboto"
+             />
 
         <RadioGroup
             android:id="@+id/dialog_radio_view"
@@ -36,6 +42,10 @@
                 android:layout_height="wrap_content"
                 android:paddingTop="@dimen/activity_margin"
                 android:paddingBottom="@dimen/activity_margin"
+                android:fontFamily="@font/roboto"
+                android:layoutDirection="rtl"
+                android:textColor="@color/md_grey_black_dark"
+                android:textSize="@dimen/_12sdp"
                 android:text="@string/seconds_raw" />
 
             <com.simplemobiletools.commons.views.MyCompatRadioButton
@@ -44,6 +54,10 @@
                 android:layout_height="wrap_content"
                 android:paddingTop="@dimen/activity_margin"
                 android:paddingBottom="@dimen/activity_margin"
+                android:fontFamily="@font/roboto"
+                android:layoutDirection="rtl"
+                android:textColor="@color/md_grey_black_dark"
+                android:textSize="@dimen/_12sdp"
                 android:text="@string/minutes_raw" />
 
             <com.simplemobiletools.commons.views.MyCompatRadioButton
@@ -52,6 +66,10 @@
                 android:layout_height="wrap_content"
                 android:paddingTop="@dimen/activity_margin"
                 android:paddingBottom="@dimen/activity_margin"
+                android:fontFamily="@font/roboto"
+                android:layoutDirection="rtl"
+                android:textColor="@color/md_grey_black_dark"
+                android:textSize="@dimen/_12sdp"
                 android:text="@string/hours_raw" />
 
             <com.simplemobiletools.commons.views.MyCompatRadioButton
@@ -60,6 +78,10 @@
                 android:layout_height="wrap_content"
                 android:paddingTop="@dimen/activity_margin"
                 android:paddingBottom="@dimen/activity_margin"
+                android:fontFamily="@font/roboto"
+                android:layoutDirection="rtl"
+                android:textColor="@color/md_grey_black_dark"
+                android:textSize="@dimen/_12sdp"
                 android:text="@string/days_raw" />
 
         </RadioGroup>
Index: app/src/main/java/com/daily/events/calender/Extensions/Activity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.daily.events.calender.Extensions\r\n\r\nimport android.app.Activity\r\nimport com.daily.events.calender.BuildConfig\r\nimport com.daily.events.calender.Dialogs.CustomEventRepeatIntervalDialog\r\nimport com.daily.events.calender.Model.Event\r\nimport com.daily.events.calender.R\r\nimport com.daily.events.calender.helpers.*\r\nimport com.simplemobiletools.commons.activities.BaseSimpleActivity\r\nimport com.simplemobiletools.commons.dialogs.RadioGroupDialog\r\nimport com.simplemobiletools.commons.extensions.*\r\nimport com.simplemobiletools.commons.helpers.ensureBackgroundThread\r\nimport com.simplemobiletools.commons.models.RadioItem\r\nimport java.io.File\r\nimport java.util.*\r\nimport kotlin.collections.ArrayList\r\n\r\nfun BaseSimpleActivity.shareEvents(ids: List<Long>) {\r\n    ensureBackgroundThread {\r\n        val file = getTempFile()\r\n        if (file == null) {\r\n            toast(R.string.unknown_error_occurred)\r\n            return@ensureBackgroundThread\r\n        }\r\n\r\n        val events = eventsDB.getEventsWithIds(ids) as ArrayList<Event>\r\n        getFileOutputStream(file.toFileDirItem(this), true) {\r\n            IcsExporter().exportEvents(this, it, events, false) {\r\n                if (it == IcsExporter.ExportResult.EXPORT_OK) {\r\n                    sharePathIntent(file.absolutePath, BuildConfig.APPLICATION_ID)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfun BaseSimpleActivity.getTempFile(): File? {\r\n    val folder = File(cacheDir, \"events\")\r\n    if (!folder.exists()) {\r\n        if (!folder.mkdir()) {\r\n            toast(R.string.unknown_error_occurred)\r\n            return null\r\n        }\r\n    }\r\n\r\n    return File(folder, \"events.ics\")\r\n}\r\n\r\nfun Activity.showEventRepeatIntervalDialog(curSeconds: Int, callback: (minutes: Int) -> Unit) {\r\n    hideKeyboard()\r\n    val seconds = TreeSet<Int>()\r\n    seconds.apply {\r\n        add(0)\r\n        add(DAY)\r\n        add(WEEK)\r\n        add(MONTH)\r\n        add(YEAR)\r\n        add(curSeconds)\r\n    }\r\n\r\n    val items = ArrayList<RadioItem>(seconds.size + 1)\r\n    seconds.mapIndexedTo(items) { index, value ->\r\n        RadioItem(index, getRepetitionText(value), value)\r\n    }\r\n\r\n    var selectedIndex = 0\r\n    seconds.forEachIndexed { index, value ->\r\n        if (value == curSeconds)\r\n            selectedIndex = index\r\n    }\r\n\r\n    items.add(RadioItem(-1, getString(R.string.custom)))\r\n\r\n    RadioGroupDialog(this, items, selectedIndex) {\r\n        if (it == -1) {\r\n            CustomEventRepeatIntervalDialog(this) {\r\n                callback(it)\r\n            }\r\n        } else {\r\n            callback(it as Int)\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/daily/events/calender/Extensions/Activity.kt	(revision 1709be0c772bd853ba3d7f44f72d3d326dff9cc8)
+++ app/src/main/java/com/daily/events/calender/Extensions/Activity.kt	(date 1632463038529)
@@ -2,7 +2,7 @@
 
 import android.app.Activity
 import com.daily.events.calender.BuildConfig
-import com.daily.events.calender.Dialogs.CustomEventRepeatIntervalDialog
+import com.daily.events.calender.dialogs.CustomEventRepeatIntervalDialog
 import com.daily.events.calender.Model.Event
 import com.daily.events.calender.R
 import com.daily.events.calender.helpers.*
Index: app/src/main/java/com/daily/events/calender/Dialogs/CustomEventRepeatIntervalDialog.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.daily.events.calender.Dialogs\r\n\r\nimport android.app.Activity\r\nimport android.view.ViewGroup\r\nimport androidx.appcompat.app.AlertDialog\r\nimport com.daily.events.calender.R\r\nimport com.daily.events.calender.helpers.DAY\r\nimport com.daily.events.calender.helpers.MONTH\r\nimport com.daily.events.calender.helpers.WEEK\r\nimport com.daily.events.calender.helpers.YEAR\r\nimport com.simplemobiletools.commons.extensions.hideKeyboard\r\nimport com.simplemobiletools.commons.extensions.setupDialogStuff\r\nimport com.simplemobiletools.commons.extensions.showKeyboard\r\nimport com.simplemobiletools.commons.extensions.value\r\nimport kotlinx.android.synthetic.main.dialog_custom_event_repeat_interval.view.*\r\n\r\nclass CustomEventRepeatIntervalDialog(\r\n    val activity: Activity,\r\n    val callback: (seconds: Int) -> Unit\r\n) {\r\n    var dialog: AlertDialog\r\n    var view = activity.layoutInflater.inflate(\r\n        R.layout.dialog_custom_event_repeat_interval,\r\n        null\r\n    ) as ViewGroup\r\n\r\n    init {\r\n        view.dialog_radio_view.check(R.id.dialog_radio_days)\r\n\r\n        dialog = AlertDialog.Builder(activity)\r\n            .setPositiveButton(R.string.ok) { dialogInterface, i -> confirmRepeatInterval() }\r\n            .setNegativeButton(R.string.cancel, null)\r\n            .create().apply {\r\n                activity.setupDialogStuff(view, this) {\r\n                    showKeyboard(view.dialog_custom_repeat_interval_value)\r\n                }\r\n            }\r\n    }\r\n\r\n    private fun confirmRepeatInterval() {\r\n        val value = view.dialog_custom_repeat_interval_value.value\r\n        val multiplier = getMultiplier(view.dialog_radio_view.checkedRadioButtonId)\r\n        val days = Integer.valueOf(if (value.isEmpty()) \"0\" else value)\r\n        callback(days * multiplier)\r\n        activity.hideKeyboard()\r\n        dialog.dismiss()\r\n    }\r\n\r\n    private fun getMultiplier(id: Int) = when (id) {\r\n        R.id.dialog_radio_weeks -> WEEK\r\n        R.id.dialog_radio_months -> MONTH\r\n        R.id.dialog_radio_years -> YEAR\r\n        else -> DAY\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/daily/events/calender/Dialogs/CustomEventRepeatIntervalDialog.kt	(revision 1709be0c772bd853ba3d7f44f72d3d326dff9cc8)
+++ app/src/main/java/com/daily/events/calender/dialogs/CustomEventRepeatIntervalDialog.kt	(date 1632463038523)
@@ -1,4 +1,4 @@
-package com.daily.events.calender.Dialogs
+package com.daily.events.calender.dialogs
 
 import android.app.Activity
 import android.view.ViewGroup
@@ -14,6 +14,7 @@
 import com.simplemobiletools.commons.extensions.value
 import kotlinx.android.synthetic.main.dialog_custom_event_repeat_interval.view.*
 
+
 class CustomEventRepeatIntervalDialog(
     val activity: Activity,
     val callback: (seconds: Int) -> Unit
@@ -25,8 +26,16 @@
     ) as ViewGroup
 
     init {
-        view.dialog_radio_view.check(R.id.dialog_radio_days)
+         view.dialog_radio_view.check(R.id.dialog_radio_days)
 
+//        val group : RadioGroup =view.findViewById(R.id.dialog_radio_view)
+//        group.setOnCheckedChangeListener(RadioGroup.OnCheckedChangeListener { group: RadioGroup, checkedId: Int ->
+//            val checkedRadioButtonId = group.checkedRadioButtonId
+//            val radioBtn = view.findViewById<View>(checkedRadioButtonId) as RadioButton?
+//            radioBtn!!.buttonTintList = activity.getResources().getColorStateList(R.color.theme_color)
+//
+//        } as RadioGroup.OnCheckedChangeListener)
+
         dialog = AlertDialog.Builder(activity)
             .setPositiveButton(R.string.ok) { dialogInterface, i -> confirmRepeatInterval() }
             .setNegativeButton(R.string.cancel, null)
Index: app/src/main/res/layout/dialog_custom_event_repeat_interval.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<ScrollView xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    android:id=\"@+id/dialog_custom_repeat_interval_scrollview\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"wrap_content\">\r\n\r\n    <LinearLayout\r\n        android:id=\"@+id/dialog_custom_repeat_interval_holder\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:orientation=\"vertical\"\r\n        android:paddingStart=\"@dimen/activity_margin\"\r\n        android:paddingTop=\"@dimen/activity_margin\"\r\n        android:paddingEnd=\"@dimen/activity_margin\">\r\n\r\n        <com.simplemobiletools.commons.views.MyEditText\r\n            android:id=\"@+id/dialog_custom_repeat_interval_value\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:digits=\"0123456789\"\r\n            android:ems=\"3\"\r\n            android:inputType=\"number\"\r\n            android:maxLength=\"4\"\r\n            android:textCursorDrawable=\"@null\"\r\n            android:textSize=\"@dimen/normal_text_size\" />\r\n\r\n        <RadioGroup\r\n            android:id=\"@+id/dialog_radio_view\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:paddingTop=\"@dimen/normal_margin\">\r\n\r\n            <com.simplemobiletools.commons.views.MyCompatRadioButton\r\n                android:id=\"@+id/dialog_radio_days\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:paddingBottom=\"@dimen/normal_margin\"\r\n                android:paddingTop=\"@dimen/normal_margin\"\r\n                android:text=\"@string/days_raw\" />\r\n\r\n            <com.simplemobiletools.commons.views.MyCompatRadioButton\r\n                android:id=\"@+id/dialog_radio_weeks\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:paddingBottom=\"@dimen/normal_margin\"\r\n                android:paddingTop=\"@dimen/normal_margin\"\r\n                android:text=\"@string/weeks_raw\" />\r\n\r\n            <com.simplemobiletools.commons.views.MyCompatRadioButton\r\n                android:id=\"@+id/dialog_radio_months\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:paddingBottom=\"@dimen/normal_margin\"\r\n                android:paddingTop=\"@dimen/normal_margin\"\r\n                android:text=\"@string/months_raw\" />\r\n\r\n            <com.simplemobiletools.commons.views.MyCompatRadioButton\r\n                android:id=\"@+id/dialog_radio_years\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:paddingBottom=\"@dimen/normal_margin\"\r\n                android:paddingTop=\"@dimen/normal_margin\"\r\n                android:text=\"@string/years_raw\" />\r\n\r\n        </RadioGroup>\r\n    </LinearLayout>\r\n</ScrollView>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/dialog_custom_event_repeat_interval.xml	(revision 1709be0c772bd853ba3d7f44f72d3d326dff9cc8)
+++ app/src/main/res/layout/dialog_custom_event_repeat_interval.xml	(date 1632461345264)
@@ -13,7 +13,7 @@
         android:paddingTop="@dimen/activity_margin"
         android:paddingEnd="@dimen/activity_margin">
 
-        <com.simplemobiletools.commons.views.MyEditText
+        <EditText
             android:id="@+id/dialog_custom_repeat_interval_value"
             android:layout_width="match_parent"
             android:layout_height="wrap_content"
@@ -22,7 +22,10 @@
             android:inputType="number"
             android:maxLength="4"
             android:textCursorDrawable="@null"
-            android:textSize="@dimen/normal_text_size" />
+            android:textColor="@color/md_grey_black_dark"
+            android:fontFamily="@font/roboto"
+            android:backgroundTint="@color/theme_color"
+            android:textSize="@dimen/_12sdp" />
 
         <RadioGroup
             android:id="@+id/dialog_radio_view"
@@ -36,7 +39,11 @@
                 android:layout_height="wrap_content"
                 android:paddingBottom="@dimen/normal_margin"
                 android:paddingTop="@dimen/normal_margin"
-                android:text="@string/days_raw" />
+                android:layoutDirection="rtl"
+                android:textColor="@color/md_grey_black_dark"
+                android:fontFamily="@font/roboto"
+                android:textSize="@dimen/_12sdp"
+                android:text="Days" />
 
             <com.simplemobiletools.commons.views.MyCompatRadioButton
                 android:id="@+id/dialog_radio_weeks"
@@ -44,7 +51,11 @@
                 android:layout_height="wrap_content"
                 android:paddingBottom="@dimen/normal_margin"
                 android:paddingTop="@dimen/normal_margin"
-                android:text="@string/weeks_raw" />
+                android:layoutDirection="rtl"
+                android:fontFamily="@font/roboto"
+                android:textColor="@color/md_grey_black_dark"
+                android:textSize="@dimen/_12sdp"
+                android:text="Weeks" />
 
             <com.simplemobiletools.commons.views.MyCompatRadioButton
                 android:id="@+id/dialog_radio_months"
@@ -52,7 +63,11 @@
                 android:layout_height="wrap_content"
                 android:paddingBottom="@dimen/normal_margin"
                 android:paddingTop="@dimen/normal_margin"
-                android:text="@string/months_raw" />
+                android:layoutDirection="rtl"
+                android:fontFamily="@font/roboto"
+                android:textColor="@color/md_grey_black_dark"
+                android:textSize="@dimen/_12sdp"
+                android:text="Months" />
 
             <com.simplemobiletools.commons.views.MyCompatRadioButton
                 android:id="@+id/dialog_radio_years"
@@ -60,7 +75,11 @@
                 android:layout_height="wrap_content"
                 android:paddingBottom="@dimen/normal_margin"
                 android:paddingTop="@dimen/normal_margin"
-                android:text="@string/years_raw" />
+                android:layoutDirection="rtl"
+                android:fontFamily="@font/roboto"
+                android:textColor="@color/md_grey_black_dark"
+                android:textSize="@dimen/_12sdp"
+                android:text="Years" />
 
         </RadioGroup>
     </LinearLayout>
Index: app/src/main/res/layout/my_checkbox.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<com.simplemobiletools.commons.views.MyAppCompatCheckbox xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    android:id=\"@+id/my_checkbox\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"wrap_content\"\r\n    android:background=\"?attr/selectableItemBackground\"\r\n    android:paddingTop=\"@dimen/activity_margin\"\r\n    android:paddingBottom=\"@dimen/activity_margin\" />\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/my_checkbox.xml	(revision 1709be0c772bd853ba3d7f44f72d3d326dff9cc8)
+++ app/src/main/res/layout/my_checkbox.xml	(date 1632466420449)
@@ -3,6 +3,9 @@
     android:id="@+id/my_checkbox"
     android:layout_width="match_parent"
     android:layout_height="wrap_content"
-    android:background="?attr/selectableItemBackground"
     android:paddingTop="@dimen/activity_margin"
+    android:layout_marginRight="16dp"
+    android:textSize="@dimen/_12sdp"
+    android:fontFamily="@font/roboto"
+    android:layoutDirection="rtl"
     android:paddingBottom="@dimen/activity_margin" />
Index: commons/src/main/kotlin/com/simplemobiletools/commons/views/MyAppCompatCheckbox.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.simplemobiletools.commons.views\r\n\r\nimport android.content.Context\r\nimport android.content.res.ColorStateList\r\nimport android.util.AttributeSet\r\nimport androidx.appcompat.widget.AppCompatCheckBox\r\nimport com.simplemobiletools.commons.R\r\n\r\nclass MyAppCompatCheckbox : AppCompatCheckBox {\r\n    constructor(context: Context) : super(context)\r\n\r\n    constructor(context: Context, attrs: AttributeSet) : super(context, attrs)\r\n\r\n    constructor(context: Context, attrs: AttributeSet, defStyle: Int) : super(\r\n        context,\r\n        attrs,\r\n        defStyle\r\n    )\r\n\r\n    fun setColors(textColor: Int, accentColor: Int, backgroundColor: Int) {\r\n        setTextColor(textColor)\r\n        val colorStateList = ColorStateList(\r\n            arrayOf(\r\n                intArrayOf(-android.R.attr.state_checked),\r\n                intArrayOf(android.R.attr.state_checked)\r\n            ),\r\n            intArrayOf(context.resources.getColor(R.color.radiobutton_disabled), accentColor)\r\n        )\r\n        supportButtonTintList = colorStateList\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- commons/src/main/kotlin/com/simplemobiletools/commons/views/MyAppCompatCheckbox.kt	(revision 1709be0c772bd853ba3d7f44f72d3d326dff9cc8)
+++ commons/src/main/kotlin/com/simplemobiletools/commons/views/MyAppCompatCheckbox.kt	(date 1632466078872)
@@ -18,13 +18,13 @@
     )
 
     fun setColors(textColor: Int, accentColor: Int, backgroundColor: Int) {
-        setTextColor(textColor)
+        setTextColor(context.resources.getColor(R.color.md_grey_black_dark))
         val colorStateList = ColorStateList(
             arrayOf(
                 intArrayOf(-android.R.attr.state_checked),
                 intArrayOf(android.R.attr.state_checked)
             ),
-            intArrayOf(context.resources.getColor(R.color.radiobutton_disabled), accentColor)
+            intArrayOf(context.resources.getColor(R.color.md_grey), context.resources.getColor(R.color.theme_color))
         )
         supportButtonTintList = colorStateList
     }
diff --git app/src/main/java/com/daily/events/calender/Dialogs/ExportEventsDialog.kt app/src/main/java/com/daily/events/calender/dialogs/ExportEventsDialog.kt
rename from app/src/main/java/com/daily/events/calender/Dialogs/ExportEventsDialog.kt
rename to app/src/main/java/com/daily/events/calender/dialogs/ExportEventsDialog.kt
diff --git app/src/main/java/com/daily/events/calender/Dialogs/FilterEventTypesDialog.kt app/src/main/java/com/daily/events/calender/dialogs/FilterEventTypesDialog.kt
rename from app/src/main/java/com/daily/events/calender/Dialogs/FilterEventTypesDialog.kt
rename to app/src/main/java/com/daily/events/calender/dialogs/FilterEventTypesDialog.kt
diff --git app/src/main/java/com/daily/events/calender/Dialogs/SelectEventTypeDialog.kt app/src/main/java/com/daily/events/calender/dialogs/SelectEventTypeDialog.kt
rename from app/src/main/java/com/daily/events/calender/Dialogs/SelectEventTypeDialog.kt
rename to app/src/main/java/com/daily/events/calender/dialogs/SelectEventTypeDialog.kt
diff --git app/src/main/java/com/daily/events/calender/Dialogs/SelectQuickFilterEventTypesDialog.kt app/src/main/java/com/daily/events/calender/dialogs/SelectQuickFilterEventTypesDialog.kt
rename from app/src/main/java/com/daily/events/calender/Dialogs/SelectQuickFilterEventTypesDialog.kt
rename to app/src/main/java/com/daily/events/calender/dialogs/SelectQuickFilterEventTypesDialog.kt
diff --git app/src/main/java/com/daily/events/calender/Dialogs/SetRemindersDialog.kt app/src/main/java/com/daily/events/calender/dialogs/SetRemindersDialog.kt
rename from app/src/main/java/com/daily/events/calender/Dialogs/SetRemindersDialog.kt
rename to app/src/main/java/com/daily/events/calender/dialogs/SetRemindersDialog.kt
diff --git app/src/main/java/com/daily/events/calender/Dialogs/RepeatRuleWeeklyDialog.kt app/src/main/java/com/daily/events/calender/dialogs/RepeatRuleWeeklyDialog.kt
rename from app/src/main/java/com/daily/events/calender/Dialogs/RepeatRuleWeeklyDialog.kt
rename to app/src/main/java/com/daily/events/calender/dialogs/RepeatRuleWeeklyDialog.kt
diff --git app/src/main/java/com/daily/events/calender/Dialogs/EditRepeatingEventDialog.kt app/src/main/java/com/daily/events/calender/dialogs/EditRepeatingEventDialog.kt
rename from app/src/main/java/com/daily/events/calender/Dialogs/EditRepeatingEventDialog.kt
rename to app/src/main/java/com/daily/events/calender/dialogs/EditRepeatingEventDialog.kt
diff --git app/src/main/java/com/daily/events/calender/Dialogs/EditEventTypeDialog.kt app/src/main/java/com/daily/events/calender/dialogs/EditEventTypeDialog.kt
rename from app/src/main/java/com/daily/events/calender/Dialogs/EditEventTypeDialog.kt
rename to app/src/main/java/com/daily/events/calender/dialogs/EditEventTypeDialog.kt
diff --git app/src/main/java/com/daily/events/calender/Dialogs/SelectEventTypeColorDialog.kt app/src/main/java/com/daily/events/calender/dialogs/SelectEventTypeColorDialog.kt
rename from app/src/main/java/com/daily/events/calender/Dialogs/SelectEventTypeColorDialog.kt
rename to app/src/main/java/com/daily/events/calender/dialogs/SelectEventTypeColorDialog.kt
diff --git app/src/main/java/com/daily/events/calender/Dialogs/SelectEventCalendarDialog.kt app/src/main/java/com/daily/events/calender/dialogs/SelectEventCalendarDialog.kt
rename from app/src/main/java/com/daily/events/calender/Dialogs/SelectEventCalendarDialog.kt
rename to app/src/main/java/com/daily/events/calender/dialogs/SelectEventCalendarDialog.kt
diff --git app/src/main/java/com/daily/events/calender/Dialogs/RepeatLimitTypePickerDialog.kt app/src/main/java/com/daily/events/calender/dialogs/RepeatLimitTypePickerDialog.kt
rename from app/src/main/java/com/daily/events/calender/Dialogs/RepeatLimitTypePickerDialog.kt
rename to app/src/main/java/com/daily/events/calender/dialogs/RepeatLimitTypePickerDialog.kt
diff --git app/src/main/java/com/daily/events/calender/Dialogs/SelectCalendarsDialog.kt app/src/main/java/com/daily/events/calender/dialogs/SelectCalendarsDialog.kt
rename from app/src/main/java/com/daily/events/calender/Dialogs/SelectCalendarsDialog.kt
rename to app/src/main/java/com/daily/events/calender/dialogs/SelectCalendarsDialog.kt
diff --git app/src/main/java/com/daily/events/calender/Dialogs/ImportEventsDialog.kt app/src/main/java/com/daily/events/calender/dialogs/ImportEventsDialog.kt
rename from app/src/main/java/com/daily/events/calender/Dialogs/ImportEventsDialog.kt
rename to app/src/main/java/com/daily/events/calender/dialogs/ImportEventsDialog.kt
diff --git app/src/main/java/com/daily/events/calender/Dialogs/DeleteEventDialog.kt app/src/main/java/com/daily/events/calender/dialogs/DeleteEventDialog.kt
rename from app/src/main/java/com/daily/events/calender/Dialogs/DeleteEventDialog.kt
rename to app/src/main/java/com/daily/events/calender/dialogs/DeleteEventDialog.kt
